
SeniorDesignTestCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002260  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002320  08002320  00012320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800233c  0800233c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800233c  0800233c  0001233c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002344  08002344  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002344  08002344  00012344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002348  08002348  00012348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800234c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  08002358  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08002358  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004a99  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001126  00000000  00000000  00024acd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000490  00000000  00000000  00025bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003f8  00000000  00000000  00026088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f489  00000000  00000000  00026480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005c41  00000000  00000000  00035909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005d439  00000000  00000000  0003b54a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00098983  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f34  00000000  00000000  000989d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002308 	.word	0x08002308

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002308 	.word	0x08002308

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b08a      	sub	sp, #40	; 0x28
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a2:	f000 fb85 	bl	8000bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a6:	f000 f91f 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004aa:	f000 f9d5 	bl	8000858 <MX_GPIO_Init>
  MX_ADC_Init();
 80004ae:	f000 f96f 	bl	8000790 <MX_ADC_Init>
  uint16_t raw;

  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80004b2:	23a0      	movs	r3, #160	; 0xa0
 80004b4:	05db      	lsls	r3, r3, #23
 80004b6:	2200      	movs	r2, #0
 80004b8:	2108      	movs	r1, #8
 80004ba:	0018      	movs	r0, r3
 80004bc:	f001 f971 	bl	80017a2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80004c0:	23a0      	movs	r3, #160	; 0xa0
 80004c2:	05db      	lsls	r3, r3, #23
 80004c4:	2201      	movs	r2, #1
 80004c6:	2102      	movs	r1, #2
 80004c8:	0018      	movs	r0, r3
 80004ca:	f001 f96a 	bl	80017a2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80004ce:	2380      	movs	r3, #128	; 0x80
 80004d0:	021b      	lsls	r3, r3, #8
 80004d2:	4881      	ldr	r0, [pc, #516]	; (80006d8 <main+0x23c>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	0019      	movs	r1, r3
 80004d8:	f001 f963 	bl	80017a2 <HAL_GPIO_WritePin>
	  for (int i = 0; i <= 50000; i++);
 80004dc:	2300      	movs	r3, #0
 80004de:	627b      	str	r3, [r7, #36]	; 0x24
 80004e0:	e002      	b.n	80004e8 <main+0x4c>
 80004e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004e4:	3301      	adds	r3, #1
 80004e6:	627b      	str	r3, [r7, #36]	; 0x24
 80004e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ea:	4a7c      	ldr	r2, [pc, #496]	; (80006dc <main+0x240>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	ddf8      	ble.n	80004e2 <main+0x46>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80004f0:	23a0      	movs	r3, #160	; 0xa0
 80004f2:	05db      	lsls	r3, r3, #23
 80004f4:	2201      	movs	r2, #1
 80004f6:	2108      	movs	r1, #8
 80004f8:	0018      	movs	r0, r3
 80004fa:	f001 f952 	bl	80017a2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80004fe:	23a0      	movs	r3, #160	; 0xa0
 8000500:	05db      	lsls	r3, r3, #23
 8000502:	2200      	movs	r2, #0
 8000504:	2102      	movs	r1, #2
 8000506:	0018      	movs	r0, r3
 8000508:	f001 f94b 	bl	80017a2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	021b      	lsls	r3, r3, #8
 8000510:	4871      	ldr	r0, [pc, #452]	; (80006d8 <main+0x23c>)
 8000512:	2201      	movs	r2, #1
 8000514:	0019      	movs	r1, r3
 8000516:	f001 f944 	bl	80017a2 <HAL_GPIO_WritePin>
	  for (int i = 0; i <= 50000; i++);
 800051a:	2300      	movs	r3, #0
 800051c:	623b      	str	r3, [r7, #32]
 800051e:	e002      	b.n	8000526 <main+0x8a>
 8000520:	6a3b      	ldr	r3, [r7, #32]
 8000522:	3301      	adds	r3, #1
 8000524:	623b      	str	r3, [r7, #32]
 8000526:	6a3b      	ldr	r3, [r7, #32]
 8000528:	4a6c      	ldr	r2, [pc, #432]	; (80006dc <main+0x240>)
 800052a:	4293      	cmp	r3, r2
 800052c:	ddf8      	ble.n	8000520 <main+0x84>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800052e:	23a0      	movs	r3, #160	; 0xa0
 8000530:	05db      	lsls	r3, r3, #23
 8000532:	2200      	movs	r2, #0
 8000534:	2108      	movs	r1, #8
 8000536:	0018      	movs	r0, r3
 8000538:	f001 f933 	bl	80017a2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800053c:	2380      	movs	r3, #128	; 0x80
 800053e:	021b      	lsls	r3, r3, #8
 8000540:	4865      	ldr	r0, [pc, #404]	; (80006d8 <main+0x23c>)
 8000542:	2200      	movs	r2, #0
 8000544:	0019      	movs	r1, r3
 8000546:	f001 f92c 	bl	80017a2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800054a:	2380      	movs	r3, #128	; 0x80
 800054c:	0099      	lsls	r1, r3, #2
 800054e:	23a0      	movs	r3, #160	; 0xa0
 8000550:	05db      	lsls	r3, r3, #23
 8000552:	2201      	movs	r2, #1
 8000554:	0018      	movs	r0, r3
 8000556:	f001 f924 	bl	80017a2 <HAL_GPIO_WritePin>

	  for (int i = 0; i <= 50000; i++);
 800055a:	2300      	movs	r3, #0
 800055c:	61fb      	str	r3, [r7, #28]
 800055e:	e002      	b.n	8000566 <main+0xca>
 8000560:	69fb      	ldr	r3, [r7, #28]
 8000562:	3301      	adds	r3, #1
 8000564:	61fb      	str	r3, [r7, #28]
 8000566:	69fb      	ldr	r3, [r7, #28]
 8000568:	4a5c      	ldr	r2, [pc, #368]	; (80006dc <main+0x240>)
 800056a:	4293      	cmp	r3, r2
 800056c:	ddf8      	ble.n	8000560 <main+0xc4>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800056e:	2380      	movs	r3, #128	; 0x80
 8000570:	00d9      	lsls	r1, r3, #3
 8000572:	23a0      	movs	r3, #160	; 0xa0
 8000574:	05db      	lsls	r3, r3, #23
 8000576:	2201      	movs	r2, #1
 8000578:	0018      	movs	r0, r3
 800057a:	f001 f912 	bl	80017a2 <HAL_GPIO_WritePin>

	  for (int i = 0; i <= 50000; i++);
 800057e:	2300      	movs	r3, #0
 8000580:	61bb      	str	r3, [r7, #24]
 8000582:	e002      	b.n	800058a <main+0xee>
 8000584:	69bb      	ldr	r3, [r7, #24]
 8000586:	3301      	adds	r3, #1
 8000588:	61bb      	str	r3, [r7, #24]
 800058a:	69bb      	ldr	r3, [r7, #24]
 800058c:	4a53      	ldr	r2, [pc, #332]	; (80006dc <main+0x240>)
 800058e:	4293      	cmp	r3, r2
 8000590:	ddf8      	ble.n	8000584 <main+0xe8>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000592:	2380      	movs	r3, #128	; 0x80
 8000594:	0119      	lsls	r1, r3, #4
 8000596:	23a0      	movs	r3, #160	; 0xa0
 8000598:	05db      	lsls	r3, r3, #23
 800059a:	2201      	movs	r2, #1
 800059c:	0018      	movs	r0, r3
 800059e:	f001 f900 	bl	80017a2 <HAL_GPIO_WritePin>

	  for (int i = 0; i <= 50000; i++);
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
 80005a6:	e002      	b.n	80005ae <main+0x112>
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	3301      	adds	r3, #1
 80005ac:	617b      	str	r3, [r7, #20]
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	4a4a      	ldr	r2, [pc, #296]	; (80006dc <main+0x240>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	ddf8      	ble.n	80005a8 <main+0x10c>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80005b6:	2380      	movs	r3, #128	; 0x80
 80005b8:	0159      	lsls	r1, r3, #5
 80005ba:	23a0      	movs	r3, #160	; 0xa0
 80005bc:	05db      	lsls	r3, r3, #23
 80005be:	2201      	movs	r2, #1
 80005c0:	0018      	movs	r0, r3
 80005c2:	f001 f8ee 	bl	80017a2 <HAL_GPIO_WritePin>

	  for (int i = 0; i <= 50000; i++);
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	e002      	b.n	80005d2 <main+0x136>
 80005cc:	693b      	ldr	r3, [r7, #16]
 80005ce:	3301      	adds	r3, #1
 80005d0:	613b      	str	r3, [r7, #16]
 80005d2:	693b      	ldr	r3, [r7, #16]
 80005d4:	4a41      	ldr	r2, [pc, #260]	; (80006dc <main+0x240>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	ddf8      	ble.n	80005cc <main+0x130>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80005da:	2380      	movs	r3, #128	; 0x80
 80005dc:	0099      	lsls	r1, r3, #2
 80005de:	23a0      	movs	r3, #160	; 0xa0
 80005e0:	05db      	lsls	r3, r3, #23
 80005e2:	2200      	movs	r2, #0
 80005e4:	0018      	movs	r0, r3
 80005e6:	f001 f8dc 	bl	80017a2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80005ea:	2380      	movs	r3, #128	; 0x80
 80005ec:	00d9      	lsls	r1, r3, #3
 80005ee:	23a0      	movs	r3, #160	; 0xa0
 80005f0:	05db      	lsls	r3, r3, #23
 80005f2:	2200      	movs	r2, #0
 80005f4:	0018      	movs	r0, r3
 80005f6:	f001 f8d4 	bl	80017a2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80005fa:	2380      	movs	r3, #128	; 0x80
 80005fc:	0119      	lsls	r1, r3, #4
 80005fe:	23a0      	movs	r3, #160	; 0xa0
 8000600:	05db      	lsls	r3, r3, #23
 8000602:	2200      	movs	r2, #0
 8000604:	0018      	movs	r0, r3
 8000606:	f001 f8cc 	bl	80017a2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800060a:	2380      	movs	r3, #128	; 0x80
 800060c:	0159      	lsls	r1, r3, #5
 800060e:	23a0      	movs	r3, #160	; 0xa0
 8000610:	05db      	lsls	r3, r3, #23
 8000612:	2200      	movs	r2, #0
 8000614:	0018      	movs	r0, r3
 8000616:	f001 f8c4 	bl	80017a2 <HAL_GPIO_WritePin>

	  HAL_ADC_Start(&hadc);
 800061a:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <main+0x244>)
 800061c:	0018      	movs	r0, r3
 800061e:	f000 fcab 	bl	8000f78 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000622:	2301      	movs	r3, #1
 8000624:	425a      	negs	r2, r3
 8000626:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <main+0x244>)
 8000628:	0011      	movs	r1, r2
 800062a:	0018      	movs	r0, r3
 800062c:	f000 fcf8 	bl	8001020 <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc);
 8000630:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <main+0x244>)
 8000632:	0018      	movs	r0, r3
 8000634:	f000 fd8a 	bl	800114c <HAL_ADC_GetValue>
 8000638:	0002      	movs	r2, r0
 800063a:	1dbb      	adds	r3, r7, #6
 800063c:	801a      	strh	r2, [r3, #0]
	  if (raw >= 1)
 800063e:	1dbb      	adds	r3, r7, #6
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d007      	beq.n	8000656 <main+0x1ba>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8000646:	2380      	movs	r3, #128	; 0x80
 8000648:	021b      	lsls	r3, r3, #8
 800064a:	4823      	ldr	r0, [pc, #140]	; (80006d8 <main+0x23c>)
 800064c:	2201      	movs	r2, #1
 800064e:	0019      	movs	r1, r3
 8000650:	f001 f8a7 	bl	80017a2 <HAL_GPIO_WritePin>
 8000654:	e006      	b.n	8000664 <main+0x1c8>
	  else
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000656:	23a0      	movs	r3, #160	; 0xa0
 8000658:	05db      	lsls	r3, r3, #23
 800065a:	2201      	movs	r2, #1
 800065c:	2108      	movs	r1, #8
 800065e:	0018      	movs	r0, r3
 8000660:	f001 f89f 	bl	80017a2 <HAL_GPIO_WritePin>

	  for (int i = 0; i <= 150000; i++);
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	e002      	b.n	8000670 <main+0x1d4>
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	3301      	adds	r3, #1
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	4a1c      	ldr	r2, [pc, #112]	; (80006e4 <main+0x248>)
 8000674:	4293      	cmp	r3, r2
 8000676:	ddf8      	ble.n	800066a <main+0x1ce>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000678:	2380      	movs	r3, #128	; 0x80
 800067a:	021b      	lsls	r3, r3, #8
 800067c:	4816      	ldr	r0, [pc, #88]	; (80006d8 <main+0x23c>)
 800067e:	2200      	movs	r2, #0
 8000680:	0019      	movs	r1, r3
 8000682:	f001 f88e 	bl	80017a2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000686:	23a0      	movs	r3, #160	; 0xa0
 8000688:	05db      	lsls	r3, r3, #23
 800068a:	2200      	movs	r2, #0
 800068c:	2108      	movs	r1, #8
 800068e:	0018      	movs	r0, r3
 8000690:	f001 f887 	bl	80017a2 <HAL_GPIO_WritePin>


	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5))
 8000694:	23a0      	movs	r3, #160	; 0xa0
 8000696:	05db      	lsls	r3, r3, #23
 8000698:	2120      	movs	r1, #32
 800069a:	0018      	movs	r0, r3
 800069c:	f001 f864 	bl	8001768 <HAL_GPIO_ReadPin>
 80006a0:	1e03      	subs	r3, r0, #0
 80006a2:	d007      	beq.n	80006b4 <main+0x218>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80006a4:	23a0      	movs	r3, #160	; 0xa0
 80006a6:	05db      	lsls	r3, r3, #23
 80006a8:	2201      	movs	r2, #1
 80006aa:	2102      	movs	r1, #2
 80006ac:	0018      	movs	r0, r3
 80006ae:	f001 f878 	bl	80017a2 <HAL_GPIO_WritePin>
 80006b2:	e006      	b.n	80006c2 <main+0x226>
	  else
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80006b4:	23a0      	movs	r3, #160	; 0xa0
 80006b6:	05db      	lsls	r3, r3, #23
 80006b8:	2200      	movs	r2, #0
 80006ba:	2102      	movs	r1, #2
 80006bc:	0018      	movs	r0, r3
 80006be:	f001 f870 	bl	80017a2 <HAL_GPIO_WritePin>
	  for (int i = 0; i <= 150000; i++);
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	e002      	b.n	80006ce <main+0x232>
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	3301      	adds	r3, #1
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	4a04      	ldr	r2, [pc, #16]	; (80006e4 <main+0x248>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	ddf8      	ble.n	80006c8 <main+0x22c>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80006d6:	e6ec      	b.n	80004b2 <main+0x16>
 80006d8:	50000800 	.word	0x50000800
 80006dc:	0000c350 	.word	0x0000c350
 80006e0:	20000028 	.word	0x20000028
 80006e4:	000249f0 	.word	0x000249f0

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b590      	push	{r4, r7, lr}
 80006ea:	b093      	sub	sp, #76	; 0x4c
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	2414      	movs	r4, #20
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	0018      	movs	r0, r3
 80006f4:	2334      	movs	r3, #52	; 0x34
 80006f6:	001a      	movs	r2, r3
 80006f8:	2100      	movs	r1, #0
 80006fa:	f001 fdfd 	bl	80022f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fe:	003b      	movs	r3, r7
 8000700:	0018      	movs	r0, r3
 8000702:	2314      	movs	r3, #20
 8000704:	001a      	movs	r2, r3
 8000706:	2100      	movs	r1, #0
 8000708:	f001 fdf6 	bl	80022f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemClock_Config+0xa0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a1e      	ldr	r2, [pc, #120]	; (800078c <SystemClock_Config+0xa4>)
 8000712:	401a      	ands	r2, r3
 8000714:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <SystemClock_Config+0xa0>)
 8000716:	2180      	movs	r1, #128	; 0x80
 8000718:	0109      	lsls	r1, r1, #4
 800071a:	430a      	orrs	r2, r1
 800071c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800071e:	0021      	movs	r1, r4
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2210      	movs	r2, #16
 8000724:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2201      	movs	r2, #1
 800072a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	22a0      	movs	r2, #160	; 0xa0
 8000736:	0212      	lsls	r2, r2, #8
 8000738:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	187b      	adds	r3, r7, r1
 8000742:	0018      	movs	r0, r3
 8000744:	f001 f84a 	bl	80017dc <HAL_RCC_OscConfig>
 8000748:	1e03      	subs	r3, r0, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800074c:	f000 f97c 	bl	8000a48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000750:	003b      	movs	r3, r7
 8000752:	220f      	movs	r2, #15
 8000754:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000756:	003b      	movs	r3, r7
 8000758:	2200      	movs	r2, #0
 800075a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075c:	003b      	movs	r3, r7
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000762:	003b      	movs	r3, r7
 8000764:	2200      	movs	r2, #0
 8000766:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000768:	003b      	movs	r3, r7
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800076e:	003b      	movs	r3, r7
 8000770:	2100      	movs	r1, #0
 8000772:	0018      	movs	r0, r3
 8000774:	f001 fbae 	bl	8001ed4 <HAL_RCC_ClockConfig>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800077c:	f000 f964 	bl	8000a48 <Error_Handler>
  }
}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	b013      	add	sp, #76	; 0x4c
 8000786:	bd90      	pop	{r4, r7, pc}
 8000788:	40007000 	.word	0x40007000
 800078c:	ffffe7ff 	.word	0xffffe7ff

08000790 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000796:	003b      	movs	r3, r7
 8000798:	0018      	movs	r0, r3
 800079a:	2308      	movs	r3, #8
 800079c:	001a      	movs	r2, r3
 800079e:	2100      	movs	r1, #0
 80007a0:	f001 fdaa 	bl	80022f8 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80007a4:	4b2a      	ldr	r3, [pc, #168]	; (8000850 <MX_ADC_Init+0xc0>)
 80007a6:	4a2b      	ldr	r2, [pc, #172]	; (8000854 <MX_ADC_Init+0xc4>)
 80007a8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80007aa:	4b29      	ldr	r3, [pc, #164]	; (8000850 <MX_ADC_Init+0xc0>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80007b0:	4b27      	ldr	r3, [pc, #156]	; (8000850 <MX_ADC_Init+0xc0>)
 80007b2:	22c0      	movs	r2, #192	; 0xc0
 80007b4:	0612      	lsls	r2, r2, #24
 80007b6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80007b8:	4b25      	ldr	r3, [pc, #148]	; (8000850 <MX_ADC_Init+0xc0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007be:	4b24      	ldr	r3, [pc, #144]	; (8000850 <MX_ADC_Init+0xc0>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80007c4:	4b22      	ldr	r3, [pc, #136]	; (8000850 <MX_ADC_Init+0xc0>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ca:	4b21      	ldr	r3, [pc, #132]	; (8000850 <MX_ADC_Init+0xc0>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80007d0:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <MX_ADC_Init+0xc0>)
 80007d2:	2220      	movs	r2, #32
 80007d4:	2100      	movs	r1, #0
 80007d6:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <MX_ADC_Init+0xc0>)
 80007da:	2221      	movs	r2, #33	; 0x21
 80007dc:	2100      	movs	r1, #0
 80007de:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <MX_ADC_Init+0xc0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_ADC_Init+0xc0>)
 80007e8:	22c2      	movs	r2, #194	; 0xc2
 80007ea:	32ff      	adds	r2, #255	; 0xff
 80007ec:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_ADC_Init+0xc0>)
 80007f0:	222c      	movs	r2, #44	; 0x2c
 80007f2:	2100      	movs	r1, #0
 80007f4:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <MX_ADC_Init+0xc0>)
 80007f8:	2204      	movs	r2, #4
 80007fa:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_ADC_Init+0xc0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <MX_ADC_Init+0xc0>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_ADC_Init+0xc0>)
 800080a:	2201      	movs	r2, #1
 800080c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <MX_ADC_Init+0xc0>)
 8000810:	2200      	movs	r2, #0
 8000812:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000814:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_ADC_Init+0xc0>)
 8000816:	0018      	movs	r0, r3
 8000818:	f000 fa3a 	bl	8000c90 <HAL_ADC_Init>
 800081c:	1e03      	subs	r3, r0, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000820:	f000 f912 	bl	8000a48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000824:	003b      	movs	r3, r7
 8000826:	2201      	movs	r2, #1
 8000828:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800082a:	003b      	movs	r3, r7
 800082c:	2280      	movs	r2, #128	; 0x80
 800082e:	0152      	lsls	r2, r2, #5
 8000830:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000832:	003a      	movs	r2, r7
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_ADC_Init+0xc0>)
 8000836:	0011      	movs	r1, r2
 8000838:	0018      	movs	r0, r3
 800083a:	f000 fc93 	bl	8001164 <HAL_ADC_ConfigChannel>
 800083e:	1e03      	subs	r3, r0, #0
 8000840:	d001      	beq.n	8000846 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000842:	f000 f901 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	b002      	add	sp, #8
 800084c:	bd80      	pop	{r7, pc}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	20000028 	.word	0x20000028
 8000854:	40012400 	.word	0x40012400

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b089      	sub	sp, #36	; 0x24
 800085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	240c      	movs	r4, #12
 8000860:	193b      	adds	r3, r7, r4
 8000862:	0018      	movs	r0, r3
 8000864:	2314      	movs	r3, #20
 8000866:	001a      	movs	r2, r3
 8000868:	2100      	movs	r1, #0
 800086a:	f001 fd45 	bl	80022f8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	4b71      	ldr	r3, [pc, #452]	; (8000a34 <MX_GPIO_Init+0x1dc>)
 8000870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000872:	4b70      	ldr	r3, [pc, #448]	; (8000a34 <MX_GPIO_Init+0x1dc>)
 8000874:	2104      	movs	r1, #4
 8000876:	430a      	orrs	r2, r1
 8000878:	62da      	str	r2, [r3, #44]	; 0x2c
 800087a:	4b6e      	ldr	r3, [pc, #440]	; (8000a34 <MX_GPIO_Init+0x1dc>)
 800087c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800087e:	2204      	movs	r2, #4
 8000880:	4013      	ands	r3, r2
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b6b      	ldr	r3, [pc, #428]	; (8000a34 <MX_GPIO_Init+0x1dc>)
 8000888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800088a:	4b6a      	ldr	r3, [pc, #424]	; (8000a34 <MX_GPIO_Init+0x1dc>)
 800088c:	2101      	movs	r1, #1
 800088e:	430a      	orrs	r2, r1
 8000890:	62da      	str	r2, [r3, #44]	; 0x2c
 8000892:	4b68      	ldr	r3, [pc, #416]	; (8000a34 <MX_GPIO_Init+0x1dc>)
 8000894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000896:	2201      	movs	r2, #1
 8000898:	4013      	ands	r3, r2
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	4b65      	ldr	r3, [pc, #404]	; (8000a34 <MX_GPIO_Init+0x1dc>)
 80008a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008a2:	4b64      	ldr	r3, [pc, #400]	; (8000a34 <MX_GPIO_Init+0x1dc>)
 80008a4:	2102      	movs	r1, #2
 80008a6:	430a      	orrs	r2, r1
 80008a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80008aa:	4b62      	ldr	r3, [pc, #392]	; (8000a34 <MX_GPIO_Init+0x1dc>)
 80008ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ae:	2202      	movs	r2, #2
 80008b0:	4013      	ands	r3, r2
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80008b6:	2380      	movs	r3, #128	; 0x80
 80008b8:	021b      	lsls	r3, r3, #8
 80008ba:	485f      	ldr	r0, [pc, #380]	; (8000a38 <MX_GPIO_Init+0x1e0>)
 80008bc:	2200      	movs	r2, #0
 80008be:	0019      	movs	r1, r3
 80008c0:	f000 ff6f 	bl	80017a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10
 80008c4:	495d      	ldr	r1, [pc, #372]	; (8000a3c <MX_GPIO_Init+0x1e4>)
 80008c6:	23a0      	movs	r3, #160	; 0xa0
 80008c8:	05db      	lsls	r3, r3, #23
 80008ca:	2200      	movs	r2, #0
 80008cc:	0018      	movs	r0, r3
 80008ce:	f000 ff68 	bl	80017a2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80008d2:	4b5b      	ldr	r3, [pc, #364]	; (8000a40 <MX_GPIO_Init+0x1e8>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	2101      	movs	r1, #1
 80008d8:	0018      	movs	r0, r3
 80008da:	f000 ff62 	bl	80017a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	2280      	movs	r2, #128	; 0x80
 80008e2:	01d2      	lsls	r2, r2, #7
 80008e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	2200      	movs	r2, #0
 80008ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	4a50      	ldr	r2, [pc, #320]	; (8000a38 <MX_GPIO_Init+0x1e0>)
 80008f6:	0019      	movs	r1, r3
 80008f8:	0010      	movs	r0, r2
 80008fa:	f000 fdcf 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80008fe:	0021      	movs	r1, r4
 8000900:	187b      	adds	r3, r7, r1
 8000902:	2280      	movs	r2, #128	; 0x80
 8000904:	0212      	lsls	r2, r2, #8
 8000906:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	000c      	movs	r4, r1
 800090a:	193b      	adds	r3, r7, r4
 800090c:	2201      	movs	r2, #1
 800090e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	193b      	adds	r3, r7, r4
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	193b      	adds	r3, r7, r4
 8000918:	2200      	movs	r2, #0
 800091a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091c:	193b      	adds	r3, r7, r4
 800091e:	4a46      	ldr	r2, [pc, #280]	; (8000a38 <MX_GPIO_Init+0x1e0>)
 8000920:	0019      	movs	r1, r3
 8000922:	0010      	movs	r0, r2
 8000924:	f000 fdba 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 PA9 PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10
 8000928:	193b      	adds	r3, r7, r4
 800092a:	4a44      	ldr	r2, [pc, #272]	; (8000a3c <MX_GPIO_Init+0x1e4>)
 800092c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	193b      	adds	r3, r7, r4
 8000930:	2201      	movs	r2, #1
 8000932:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	193b      	adds	r3, r7, r4
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	193b      	adds	r3, r7, r4
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000940:	193a      	adds	r2, r7, r4
 8000942:	23a0      	movs	r3, #160	; 0xa0
 8000944:	05db      	lsls	r3, r3, #23
 8000946:	0011      	movs	r1, r2
 8000948:	0018      	movs	r0, r3
 800094a:	f000 fda7 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800094e:	193b      	adds	r3, r7, r4
 8000950:	22f4      	movs	r2, #244	; 0xf4
 8000952:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000954:	193b      	adds	r3, r7, r4
 8000956:	2200      	movs	r2, #0
 8000958:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	193b      	adds	r3, r7, r4
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000960:	193a      	adds	r2, r7, r4
 8000962:	23a0      	movs	r3, #160	; 0xa0
 8000964:	05db      	lsls	r3, r3, #23
 8000966:	0011      	movs	r1, r2
 8000968:	0018      	movs	r0, r3
 800096a:	f000 fd97 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800096e:	193b      	adds	r3, r7, r4
 8000970:	2201      	movs	r2, #1
 8000972:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000974:	193b      	adds	r3, r7, r4
 8000976:	2201      	movs	r2, #1
 8000978:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	193b      	adds	r3, r7, r4
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	193b      	adds	r3, r7, r4
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000986:	193b      	adds	r3, r7, r4
 8000988:	4a2d      	ldr	r2, [pc, #180]	; (8000a40 <MX_GPIO_Init+0x1e8>)
 800098a:	0019      	movs	r1, r3
 800098c:	0010      	movs	r0, r2
 800098e:	f000 fd85 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8000992:	193b      	adds	r3, r7, r4
 8000994:	2282      	movs	r2, #130	; 0x82
 8000996:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000998:	193b      	adds	r3, r7, r4
 800099a:	2200      	movs	r2, #0
 800099c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	4a26      	ldr	r2, [pc, #152]	; (8000a40 <MX_GPIO_Init+0x1e8>)
 80009a8:	0019      	movs	r1, r3
 80009aa:	0010      	movs	r0, r2
 80009ac:	f000 fd76 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009b0:	0021      	movs	r1, r4
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2280      	movs	r2, #128	; 0x80
 80009b6:	0212      	lsls	r2, r2, #8
 80009b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	000c      	movs	r4, r1
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	2202      	movs	r2, #2
 80009c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	193b      	adds	r3, r7, r4
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	2203      	movs	r2, #3
 80009cc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80009ce:	193b      	adds	r3, r7, r4
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	193a      	adds	r2, r7, r4
 80009d6:	23a0      	movs	r3, #160	; 0xa0
 80009d8:	05db      	lsls	r3, r3, #23
 80009da:	0011      	movs	r1, r2
 80009dc:	0018      	movs	r0, r3
 80009de:	f000 fd5d 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80009e2:	193b      	adds	r3, r7, r4
 80009e4:	2238      	movs	r2, #56	; 0x38
 80009e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	193b      	adds	r3, r7, r4
 80009ea:	2202      	movs	r2, #2
 80009ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f4:	193b      	adds	r3, r7, r4
 80009f6:	2203      	movs	r2, #3
 80009f8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80009fa:	193b      	adds	r3, r7, r4
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	193b      	adds	r3, r7, r4
 8000a02:	4a0f      	ldr	r2, [pc, #60]	; (8000a40 <MX_GPIO_Init+0x1e8>)
 8000a04:	0019      	movs	r1, r3
 8000a06:	0010      	movs	r0, r2
 8000a08:	f000 fd48 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a0c:	0021      	movs	r1, r4
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2240      	movs	r2, #64	; 0x40
 8000a12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <MX_GPIO_Init+0x1ec>)
 8000a18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <MX_GPIO_Init+0x1e8>)
 8000a24:	0019      	movs	r1, r3
 8000a26:	0010      	movs	r0, r2
 8000a28:	f000 fd38 	bl	800149c <HAL_GPIO_Init>

}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b009      	add	sp, #36	; 0x24
 8000a32:	bd90      	pop	{r4, r7, pc}
 8000a34:	40021000 	.word	0x40021000
 8000a38:	50000800 	.word	0x50000800
 8000a3c:	00001e0a 	.word	0x00001e0a
 8000a40:	50000400 	.word	0x50000400
 8000a44:	10110000 	.word	0x10110000

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
}
 8000a4e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <Error_Handler+0x8>
	...

08000a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <HAL_MspInit+0x24>)
 8000a5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_MspInit+0x24>)
 8000a5e:	2101      	movs	r1, #1
 8000a60:	430a      	orrs	r2, r1
 8000a62:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <HAL_MspInit+0x24>)
 8000a66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a68:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <HAL_MspInit+0x24>)
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	0549      	lsls	r1, r1, #21
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40021000 	.word	0x40021000

08000a7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b089      	sub	sp, #36	; 0x24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	240c      	movs	r4, #12
 8000a86:	193b      	adds	r3, r7, r4
 8000a88:	0018      	movs	r0, r3
 8000a8a:	2314      	movs	r3, #20
 8000a8c:	001a      	movs	r2, r3
 8000a8e:	2100      	movs	r1, #0
 8000a90:	f001 fc32 	bl	80022f8 <memset>
  if(hadc->Instance==ADC1)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a14      	ldr	r2, [pc, #80]	; (8000aec <HAL_ADC_MspInit+0x70>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d122      	bne.n	8000ae4 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a9e:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <HAL_ADC_MspInit+0x74>)
 8000aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000aa2:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <HAL_ADC_MspInit+0x74>)
 8000aa4:	2180      	movs	r1, #128	; 0x80
 8000aa6:	0089      	lsls	r1, r1, #2
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aac:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <HAL_ADC_MspInit+0x74>)
 8000aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <HAL_ADC_MspInit+0x74>)
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <HAL_ADC_MspInit+0x74>)
 8000aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000abc:	2201      	movs	r2, #1
 8000abe:	4013      	ands	r3, r2
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0-CK_IN     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ac4:	193b      	adds	r3, r7, r4
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aca:	193b      	adds	r3, r7, r4
 8000acc:	2203      	movs	r2, #3
 8000ace:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	193b      	adds	r3, r7, r4
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	193a      	adds	r2, r7, r4
 8000ad8:	23a0      	movs	r3, #160	; 0xa0
 8000ada:	05db      	lsls	r3, r3, #23
 8000adc:	0011      	movs	r1, r2
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f000 fcdc 	bl	800149c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b009      	add	sp, #36	; 0x24
 8000aea:	bd90      	pop	{r4, r7, pc}
 8000aec:	40012400 	.word	0x40012400
 8000af0:	40021000 	.word	0x40021000

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <NMI_Handler+0x4>

08000afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <HardFault_Handler+0x4>

08000b00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b18:	f000 f89e 	bl	8000c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1c:	46c0      	nop			; (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000b2c:	4813      	ldr	r0, [pc, #76]	; (8000b7c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000b2e:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000b30:	4813      	ldr	r0, [pc, #76]	; (8000b80 <LoopForever+0x6>)
    LDR R1, [R0]
 8000b32:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000b34:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000b36:	4a13      	ldr	r2, [pc, #76]	; (8000b84 <LoopForever+0xa>)
    CMP R1, R2
 8000b38:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000b3a:	d105      	bne.n	8000b48 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000b3c:	4812      	ldr	r0, [pc, #72]	; (8000b88 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000b3e:	4913      	ldr	r1, [pc, #76]	; (8000b8c <LoopForever+0x12>)
    STR R1, [R0]
 8000b40:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000b42:	4813      	ldr	r0, [pc, #76]	; (8000b90 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000b44:	4913      	ldr	r1, [pc, #76]	; (8000b94 <LoopForever+0x1a>)
    STR R1, [R0]
 8000b46:	6001      	str	r1, [r0, #0]

08000b48 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b48:	4813      	ldr	r0, [pc, #76]	; (8000b98 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000b4a:	4914      	ldr	r1, [pc, #80]	; (8000b9c <LoopForever+0x22>)
  ldr r2, =_sidata
 8000b4c:	4a14      	ldr	r2, [pc, #80]	; (8000ba0 <LoopForever+0x26>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b50:	e002      	b.n	8000b58 <LoopCopyDataInit>

08000b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b56:	3304      	adds	r3, #4

08000b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b5c:	d3f9      	bcc.n	8000b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5e:	4a11      	ldr	r2, [pc, #68]	; (8000ba4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000b60:	4c11      	ldr	r4, [pc, #68]	; (8000ba8 <LoopForever+0x2e>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b64:	e001      	b.n	8000b6a <LoopFillZerobss>

08000b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b68:	3204      	adds	r2, #4

08000b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b6c:	d3fb      	bcc.n	8000b66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b6e:	f7ff ffd8 	bl	8000b22 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b72:	f001 fb9d 	bl	80022b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b76:	f7ff fc91 	bl	800049c <main>

08000b7a <LoopForever>:

LoopForever:
    b LoopForever
 8000b7a:	e7fe      	b.n	8000b7a <LoopForever>
   ldr   r0, =_estack
 8000b7c:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000b80:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000b84:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000b88:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000b8c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000b90:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000b94:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b9c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ba0:	0800234c 	.word	0x0800234c
  ldr r2, =_sbss
 8000ba4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ba8:	20000088 	.word	0x20000088

08000bac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bac:	e7fe      	b.n	8000bac <ADC1_IRQHandler>
	...

08000bb0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <HAL_Init+0x3c>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <HAL_Init+0x3c>)
 8000bc2:	2140      	movs	r1, #64	; 0x40
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f000 f811 	bl	8000bf0 <HAL_InitTick>
 8000bce:	1e03      	subs	r3, r0, #0
 8000bd0:	d003      	beq.n	8000bda <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000bd2:	1dfb      	adds	r3, r7, #7
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	701a      	strb	r2, [r3, #0]
 8000bd8:	e001      	b.n	8000bde <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bda:	f7ff ff3b 	bl	8000a54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	781b      	ldrb	r3, [r3, #0]
}
 8000be2:	0018      	movs	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b002      	add	sp, #8
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	40022000 	.word	0x40022000

08000bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <HAL_InitTick+0x5c>)
 8000bfa:	681c      	ldr	r4, [r3, #0]
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <HAL_InitTick+0x60>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	0019      	movs	r1, r3
 8000c02:	23fa      	movs	r3, #250	; 0xfa
 8000c04:	0098      	lsls	r0, r3, #2
 8000c06:	f7ff fa7f 	bl	8000108 <__udivsi3>
 8000c0a:	0003      	movs	r3, r0
 8000c0c:	0019      	movs	r1, r3
 8000c0e:	0020      	movs	r0, r4
 8000c10:	f7ff fa7a 	bl	8000108 <__udivsi3>
 8000c14:	0003      	movs	r3, r0
 8000c16:	0018      	movs	r0, r3
 8000c18:	f000 fc33 	bl	8001482 <HAL_SYSTICK_Config>
 8000c1c:	1e03      	subs	r3, r0, #0
 8000c1e:	d001      	beq.n	8000c24 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	e00f      	b.n	8000c44 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b03      	cmp	r3, #3
 8000c28:	d80b      	bhi.n	8000c42 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	425b      	negs	r3, r3
 8000c30:	2200      	movs	r2, #0
 8000c32:	0018      	movs	r0, r3
 8000c34:	f000 fc10 	bl	8001458 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_InitTick+0x64>)
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e000      	b.n	8000c44 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	0018      	movs	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	b003      	add	sp, #12
 8000c4a:	bd90      	pop	{r4, r7, pc}
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	20000008 	.word	0x20000008
 8000c54:	20000004 	.word	0x20000004

08000c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <HAL_IncTick+0x1c>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	001a      	movs	r2, r3
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <HAL_IncTick+0x20>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	18d2      	adds	r2, r2, r3
 8000c68:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <HAL_IncTick+0x20>)
 8000c6a:	601a      	str	r2, [r3, #0]
}
 8000c6c:	46c0      	nop			; (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	20000008 	.word	0x20000008
 8000c78:	20000084 	.word	0x20000084

08000c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c80:	4b02      	ldr	r3, [pc, #8]	; (8000c8c <HAL_GetTick+0x10>)
 8000c82:	681b      	ldr	r3, [r3, #0]
}
 8000c84:	0018      	movs	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	20000084 	.word	0x20000084

08000c90 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d101      	bne.n	8000ca2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e159      	b.n	8000f56 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10a      	bne.n	8000cc0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2200      	movs	r2, #0
 8000cae:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2250      	movs	r2, #80	; 0x50
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f7ff fede 	bl	8000a7c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cc4:	2210      	movs	r2, #16
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	2b10      	cmp	r3, #16
 8000cca:	d005      	beq.n	8000cd8 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	2204      	movs	r2, #4
 8000cd4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000cd6:	d00b      	beq.n	8000cf0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cdc:	2210      	movs	r2, #16
 8000cde:	431a      	orrs	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2250      	movs	r2, #80	; 0x50
 8000ce8:	2100      	movs	r1, #0
 8000cea:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	e132      	b.n	8000f56 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cf4:	4a9a      	ldr	r2, [pc, #616]	; (8000f60 <HAL_ADC_Init+0x2d0>)
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	2202      	movs	r2, #2
 8000cfa:	431a      	orrs	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	2203      	movs	r2, #3
 8000d08:	4013      	ands	r3, r2
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d108      	bne.n	8000d20 <HAL_ADC_Init+0x90>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2201      	movs	r2, #1
 8000d16:	4013      	ands	r3, r2
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d101      	bne.n	8000d20 <HAL_ADC_Init+0x90>
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e000      	b.n	8000d22 <HAL_ADC_Init+0x92>
 8000d20:	2300      	movs	r3, #0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d149      	bne.n	8000dba <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	23c0      	movs	r3, #192	; 0xc0
 8000d2c:	061b      	lsls	r3, r3, #24
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d00b      	beq.n	8000d4a <HAL_ADC_Init+0xba>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	2380      	movs	r3, #128	; 0x80
 8000d38:	05db      	lsls	r3, r3, #23
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d005      	beq.n	8000d4a <HAL_ADC_Init+0xba>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	685a      	ldr	r2, [r3, #4]
 8000d42:	2380      	movs	r3, #128	; 0x80
 8000d44:	061b      	lsls	r3, r3, #24
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d111      	bne.n	8000d6e <HAL_ADC_Init+0xde>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	691a      	ldr	r2, [r3, #16]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	0092      	lsls	r2, r2, #2
 8000d56:	0892      	lsrs	r2, r2, #2
 8000d58:	611a      	str	r2, [r3, #16]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	6919      	ldr	r1, [r3, #16]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685a      	ldr	r2, [r3, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	611a      	str	r2, [r3, #16]
 8000d6c:	e014      	b.n	8000d98 <HAL_ADC_Init+0x108>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	691a      	ldr	r2, [r3, #16]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	0092      	lsls	r2, r2, #2
 8000d7a:	0892      	lsrs	r2, r2, #2
 8000d7c:	611a      	str	r2, [r3, #16]
 8000d7e:	4b79      	ldr	r3, [pc, #484]	; (8000f64 <HAL_ADC_Init+0x2d4>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	4b78      	ldr	r3, [pc, #480]	; (8000f64 <HAL_ADC_Init+0x2d4>)
 8000d84:	4978      	ldr	r1, [pc, #480]	; (8000f68 <HAL_ADC_Init+0x2d8>)
 8000d86:	400a      	ands	r2, r1
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	4b76      	ldr	r3, [pc, #472]	; (8000f64 <HAL_ADC_Init+0x2d4>)
 8000d8c:	6819      	ldr	r1, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685a      	ldr	r2, [r3, #4]
 8000d92:	4b74      	ldr	r3, [pc, #464]	; (8000f64 <HAL_ADC_Init+0x2d4>)
 8000d94:	430a      	orrs	r2, r1
 8000d96:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	68da      	ldr	r2, [r3, #12]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2118      	movs	r1, #24
 8000da4:	438a      	bics	r2, r1
 8000da6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	68d9      	ldr	r1, [r3, #12]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	430a      	orrs	r2, r1
 8000db8:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000dba:	4b6a      	ldr	r3, [pc, #424]	; (8000f64 <HAL_ADC_Init+0x2d4>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	4b69      	ldr	r3, [pc, #420]	; (8000f64 <HAL_ADC_Init+0x2d4>)
 8000dc0:	496a      	ldr	r1, [pc, #424]	; (8000f6c <HAL_ADC_Init+0x2dc>)
 8000dc2:	400a      	ands	r2, r1
 8000dc4:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000dc6:	4b67      	ldr	r3, [pc, #412]	; (8000f64 <HAL_ADC_Init+0x2d4>)
 8000dc8:	6819      	ldr	r1, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dce:	065a      	lsls	r2, r3, #25
 8000dd0:	4b64      	ldr	r3, [pc, #400]	; (8000f64 <HAL_ADC_Init+0x2d4>)
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	689a      	ldr	r2, [r3, #8]
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	055b      	lsls	r3, r3, #21
 8000de0:	4013      	ands	r3, r2
 8000de2:	d108      	bne.n	8000df6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689a      	ldr	r2, [r3, #8]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2180      	movs	r1, #128	; 0x80
 8000df0:	0549      	lsls	r1, r1, #21
 8000df2:	430a      	orrs	r2, r1
 8000df4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	68da      	ldr	r2, [r3, #12]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	495b      	ldr	r1, [pc, #364]	; (8000f70 <HAL_ADC_Init+0x2e0>)
 8000e02:	400a      	ands	r2, r1
 8000e04:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	68d9      	ldr	r1, [r3, #12]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	691b      	ldr	r3, [r3, #16]
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d101      	bne.n	8000e1c <HAL_ADC_Init+0x18c>
 8000e18:	2304      	movs	r3, #4
 8000e1a:	e000      	b.n	8000e1e <HAL_ADC_Init+0x18e>
 8000e1c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e1e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2020      	movs	r0, #32
 8000e24:	5c1b      	ldrb	r3, [r3, r0]
 8000e26:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000e28:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	202c      	movs	r0, #44	; 0x2c
 8000e2e:	5c1b      	ldrb	r3, [r3, r0]
 8000e30:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e32:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000e38:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000e40:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000e48:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e56:	23c2      	movs	r3, #194	; 0xc2
 8000e58:	33ff      	adds	r3, #255	; 0xff
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d00b      	beq.n	8000e76 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	68d9      	ldr	r1, [r3, #12]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000e6c:	431a      	orrs	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	430a      	orrs	r2, r1
 8000e74:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2221      	movs	r2, #33	; 0x21
 8000e7a:	5c9b      	ldrb	r3, [r3, r2]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d11a      	bne.n	8000eb6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2220      	movs	r2, #32
 8000e84:	5c9b      	ldrb	r3, [r3, r2]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d109      	bne.n	8000e9e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	68da      	ldr	r2, [r3, #12]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2180      	movs	r1, #128	; 0x80
 8000e96:	0249      	lsls	r1, r1, #9
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	e00b      	b.n	8000eb6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ea2:	2220      	movs	r2, #32
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eae:	2201      	movs	r2, #1
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d11f      	bne.n	8000efe <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	691a      	ldr	r2, [r3, #16]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	492a      	ldr	r1, [pc, #168]	; (8000f74 <HAL_ADC_Init+0x2e4>)
 8000eca:	400a      	ands	r2, r1
 8000ecc:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	6919      	ldr	r1, [r3, #16]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000edc:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8000ee2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	691a      	ldr	r2, [r3, #16]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	611a      	str	r2, [r3, #16]
 8000efc:	e00e      	b.n	8000f1c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	691b      	ldr	r3, [r3, #16]
 8000f04:	2201      	movs	r2, #1
 8000f06:	4013      	ands	r3, r2
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d107      	bne.n	8000f1c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	691a      	ldr	r2, [r3, #16]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2101      	movs	r1, #1
 8000f18:	438a      	bics	r2, r1
 8000f1a:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	695a      	ldr	r2, [r3, #20]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2107      	movs	r1, #7
 8000f28:	438a      	bics	r2, r1
 8000f2a:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6959      	ldr	r1, [r3, #20]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f48:	2203      	movs	r2, #3
 8000f4a:	4393      	bics	r3, r2
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	0018      	movs	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b002      	add	sp, #8
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	fffffefd 	.word	0xfffffefd
 8000f64:	40012708 	.word	0x40012708
 8000f68:	ffc3ffff 	.word	0xffc3ffff
 8000f6c:	fdffffff 	.word	0xfdffffff
 8000f70:	fffe0219 	.word	0xfffe0219
 8000f74:	fffffc03 	.word	0xfffffc03

08000f78 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f80:	230f      	movs	r3, #15
 8000f82:	18fb      	adds	r3, r7, r3
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	2204      	movs	r2, #4
 8000f90:	4013      	ands	r3, r2
 8000f92:	d138      	bne.n	8001006 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2250      	movs	r2, #80	; 0x50
 8000f98:	5c9b      	ldrb	r3, [r3, r2]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d101      	bne.n	8000fa2 <HAL_ADC_Start+0x2a>
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	e038      	b.n	8001014 <HAL_ADC_Start+0x9c>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2250      	movs	r2, #80	; 0x50
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d007      	beq.n	8000fc2 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000fb2:	230f      	movs	r3, #15
 8000fb4:	18fc      	adds	r4, r7, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f000 f93b 	bl	8001234 <ADC_Enable>
 8000fbe:	0003      	movs	r3, r0
 8000fc0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	18fb      	adds	r3, r7, r3
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d120      	bne.n	800100e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fd0:	4a12      	ldr	r2, [pc, #72]	; (800101c <HAL_ADC_Start+0xa4>)
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	2280      	movs	r2, #128	; 0x80
 8000fd6:	0052      	lsls	r2, r2, #1
 8000fd8:	431a      	orrs	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2250      	movs	r2, #80	; 0x50
 8000fe8:	2100      	movs	r1, #0
 8000fea:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	221c      	movs	r2, #28
 8000ff2:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2104      	movs	r1, #4
 8001000:	430a      	orrs	r2, r1
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	e003      	b.n	800100e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001006:	230f      	movs	r3, #15
 8001008:	18fb      	adds	r3, r7, r3
 800100a:	2202      	movs	r2, #2
 800100c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800100e:	230f      	movs	r3, #15
 8001010:	18fb      	adds	r3, r7, r3
 8001012:	781b      	ldrb	r3, [r3, #0]
}
 8001014:	0018      	movs	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	b005      	add	sp, #20
 800101a:	bd90      	pop	{r4, r7, pc}
 800101c:	fffff0fe 	.word	0xfffff0fe

08001020 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	2b08      	cmp	r3, #8
 8001038:	d102      	bne.n	8001040 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800103a:	2308      	movs	r3, #8
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	e014      	b.n	800106a <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	2201      	movs	r2, #1
 8001048:	4013      	ands	r3, r2
 800104a:	2b01      	cmp	r3, #1
 800104c:	d10b      	bne.n	8001066 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001052:	2220      	movs	r2, #32
 8001054:	431a      	orrs	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2250      	movs	r2, #80	; 0x50
 800105e:	2100      	movs	r1, #0
 8001060:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e06c      	b.n	8001140 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001066:	230c      	movs	r3, #12
 8001068:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800106a:	f7ff fe07 	bl	8000c7c <HAL_GetTick>
 800106e:	0003      	movs	r3, r0
 8001070:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001072:	e019      	b.n	80010a8 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	3301      	adds	r3, #1
 8001078:	d016      	beq.n	80010a8 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d007      	beq.n	8001090 <HAL_ADC_PollForConversion+0x70>
 8001080:	f7ff fdfc 	bl	8000c7c <HAL_GetTick>
 8001084:	0002      	movs	r2, r0
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	429a      	cmp	r2, r3
 800108e:	d20b      	bcs.n	80010a8 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001094:	2204      	movs	r2, #4
 8001096:	431a      	orrs	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2250      	movs	r2, #80	; 0x50
 80010a0:	2100      	movs	r1, #0
 80010a2:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e04b      	b.n	8001140 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	4013      	ands	r3, r2
 80010b2:	d0df      	beq.n	8001074 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b8:	2280      	movs	r2, #128	; 0x80
 80010ba:	0092      	lsls	r2, r2, #2
 80010bc:	431a      	orrs	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	68da      	ldr	r2, [r3, #12]
 80010c8:	23c0      	movs	r3, #192	; 0xc0
 80010ca:	011b      	lsls	r3, r3, #4
 80010cc:	4013      	ands	r3, r2
 80010ce:	d12e      	bne.n	800112e <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2220      	movs	r2, #32
 80010d4:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d129      	bne.n	800112e <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2208      	movs	r2, #8
 80010e2:	4013      	ands	r3, r2
 80010e4:	2b08      	cmp	r3, #8
 80010e6:	d122      	bne.n	800112e <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	2204      	movs	r2, #4
 80010f0:	4013      	ands	r3, r2
 80010f2:	d110      	bne.n	8001116 <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	210c      	movs	r1, #12
 8001100:	438a      	bics	r2, r1
 8001102:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001108:	4a0f      	ldr	r2, [pc, #60]	; (8001148 <HAL_ADC_PollForConversion+0x128>)
 800110a:	4013      	ands	r3, r2
 800110c:	2201      	movs	r2, #1
 800110e:	431a      	orrs	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	655a      	str	r2, [r3, #84]	; 0x54
 8001114:	e00b      	b.n	800112e <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800111a:	2220      	movs	r2, #32
 800111c:	431a      	orrs	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001126:	2201      	movs	r2, #1
 8001128:	431a      	orrs	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d103      	bne.n	800113e <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	220c      	movs	r2, #12
 800113c:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	0018      	movs	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	b004      	add	sp, #16
 8001146:	bd80      	pop	{r7, pc}
 8001148:	fffffefe 	.word	0xfffffefe

0800114c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800115a:	0018      	movs	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	b002      	add	sp, #8
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2250      	movs	r2, #80	; 0x50
 8001172:	5c9b      	ldrb	r3, [r3, r2]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d101      	bne.n	800117c <HAL_ADC_ConfigChannel+0x18>
 8001178:	2302      	movs	r3, #2
 800117a:	e050      	b.n	800121e <HAL_ADC_ConfigChannel+0xba>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2250      	movs	r2, #80	; 0x50
 8001180:	2101      	movs	r1, #1
 8001182:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	2204      	movs	r2, #4
 800118c:	4013      	ands	r3, r2
 800118e:	d00b      	beq.n	80011a8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001194:	2220      	movs	r2, #32
 8001196:	431a      	orrs	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2250      	movs	r2, #80	; 0x50
 80011a0:	2100      	movs	r1, #0
 80011a2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e03a      	b.n	800121e <HAL_ADC_ConfigChannel+0xba>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	4a1e      	ldr	r2, [pc, #120]	; (8001228 <HAL_ADC_ConfigChannel+0xc4>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d018      	beq.n	80011e4 <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	035b      	lsls	r3, r3, #13
 80011be:	0b5a      	lsrs	r2, r3, #13
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	430a      	orrs	r2, r1
 80011c6:	629a      	str	r2, [r3, #40]	; 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	029b      	lsls	r3, r3, #10
 80011d0:	4013      	ands	r3, r2
 80011d2:	d01f      	beq.n	8001214 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80011d4:	4b15      	ldr	r3, [pc, #84]	; (800122c <HAL_ADC_ConfigChannel+0xc8>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <HAL_ADC_ConfigChannel+0xc8>)
 80011da:	2180      	movs	r1, #128	; 0x80
 80011dc:	03c9      	lsls	r1, r1, #15
 80011de:	430a      	orrs	r2, r1
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	e017      	b.n	8001214 <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	035b      	lsls	r3, r3, #13
 80011f0:	0b5b      	lsrs	r3, r3, #13
 80011f2:	43d9      	mvns	r1, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	400a      	ands	r2, r1
 80011fa:	629a      	str	r2, [r3, #40]	; 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;   
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	029b      	lsls	r3, r3, #10
 8001204:	4013      	ands	r3, r2
 8001206:	d005      	beq.n	8001214 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <HAL_ADC_ConfigChannel+0xc8>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <HAL_ADC_ConfigChannel+0xc8>)
 800120e:	4908      	ldr	r1, [pc, #32]	; (8001230 <HAL_ADC_ConfigChannel+0xcc>)
 8001210:	400a      	ands	r2, r1
 8001212:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2250      	movs	r2, #80	; 0x50
 8001218:	2100      	movs	r1, #0
 800121a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	0018      	movs	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	b002      	add	sp, #8
 8001224:	bd80      	pop	{r7, pc}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	00001001 	.word	0x00001001
 800122c:	40012708 	.word	0x40012708
 8001230:	ffbfffff 	.word	0xffbfffff

08001234 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	2203      	movs	r2, #3
 8001248:	4013      	ands	r3, r2
 800124a:	2b01      	cmp	r3, #1
 800124c:	d108      	bne.n	8001260 <ADC_Enable+0x2c>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2201      	movs	r2, #1
 8001256:	4013      	ands	r3, r2
 8001258:	2b01      	cmp	r3, #1
 800125a:	d101      	bne.n	8001260 <ADC_Enable+0x2c>
 800125c:	2301      	movs	r3, #1
 800125e:	e000      	b.n	8001262 <ADC_Enable+0x2e>
 8001260:	2300      	movs	r3, #0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d13f      	bne.n	80012e6 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	4a20      	ldr	r2, [pc, #128]	; (80012f0 <ADC_Enable+0xbc>)
 800126e:	4013      	ands	r3, r2
 8001270:	d00d      	beq.n	800128e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001276:	2210      	movs	r2, #16
 8001278:	431a      	orrs	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001282:	2201      	movs	r2, #1
 8001284:	431a      	orrs	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e02c      	b.n	80012e8 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2101      	movs	r1, #1
 800129a:	430a      	orrs	r2, r1
 800129c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800129e:	2001      	movs	r0, #1
 80012a0:	f000 f828 	bl	80012f4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80012a4:	f7ff fcea 	bl	8000c7c <HAL_GetTick>
 80012a8:	0003      	movs	r3, r0
 80012aa:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80012ac:	e014      	b.n	80012d8 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80012ae:	f7ff fce5 	bl	8000c7c <HAL_GetTick>
 80012b2:	0002      	movs	r2, r0
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b0a      	cmp	r3, #10
 80012ba:	d90d      	bls.n	80012d8 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012c0:	2210      	movs	r2, #16
 80012c2:	431a      	orrs	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012cc:	2201      	movs	r2, #1
 80012ce:	431a      	orrs	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e007      	b.n	80012e8 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2201      	movs	r2, #1
 80012e0:	4013      	ands	r3, r2
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d1e3      	bne.n	80012ae <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	0018      	movs	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b004      	add	sp, #16
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	80000017 	.word	0x80000017

080012f4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80012fc:	4b0b      	ldr	r3, [pc, #44]	; (800132c <ADC_DelayMicroSecond+0x38>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	490b      	ldr	r1, [pc, #44]	; (8001330 <ADC_DelayMicroSecond+0x3c>)
 8001302:	0018      	movs	r0, r3
 8001304:	f7fe ff00 	bl	8000108 <__udivsi3>
 8001308:	0003      	movs	r3, r0
 800130a:	001a      	movs	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4353      	muls	r3, r2
 8001310:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8001312:	e002      	b.n	800131a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3b01      	subs	r3, #1
 8001318:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1f9      	bne.n	8001314 <ADC_DelayMicroSecond+0x20>
  } 
}
 8001320:	46c0      	nop			; (mov r8, r8)
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	46bd      	mov	sp, r7
 8001326:	b004      	add	sp, #16
 8001328:	bd80      	pop	{r7, pc}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	20000000 	.word	0x20000000
 8001330:	000f4240 	.word	0x000f4240

08001334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001334:	b590      	push	{r4, r7, lr}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	0002      	movs	r2, r0
 800133c:	6039      	str	r1, [r7, #0]
 800133e:	1dfb      	adds	r3, r7, #7
 8001340:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001342:	1dfb      	adds	r3, r7, #7
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b7f      	cmp	r3, #127	; 0x7f
 8001348:	d828      	bhi.n	800139c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800134a:	4a2f      	ldr	r2, [pc, #188]	; (8001408 <__NVIC_SetPriority+0xd4>)
 800134c:	1dfb      	adds	r3, r7, #7
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	b25b      	sxtb	r3, r3
 8001352:	089b      	lsrs	r3, r3, #2
 8001354:	33c0      	adds	r3, #192	; 0xc0
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	589b      	ldr	r3, [r3, r2]
 800135a:	1dfa      	adds	r2, r7, #7
 800135c:	7812      	ldrb	r2, [r2, #0]
 800135e:	0011      	movs	r1, r2
 8001360:	2203      	movs	r2, #3
 8001362:	400a      	ands	r2, r1
 8001364:	00d2      	lsls	r2, r2, #3
 8001366:	21ff      	movs	r1, #255	; 0xff
 8001368:	4091      	lsls	r1, r2
 800136a:	000a      	movs	r2, r1
 800136c:	43d2      	mvns	r2, r2
 800136e:	401a      	ands	r2, r3
 8001370:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	019b      	lsls	r3, r3, #6
 8001376:	22ff      	movs	r2, #255	; 0xff
 8001378:	401a      	ands	r2, r3
 800137a:	1dfb      	adds	r3, r7, #7
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	0018      	movs	r0, r3
 8001380:	2303      	movs	r3, #3
 8001382:	4003      	ands	r3, r0
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001388:	481f      	ldr	r0, [pc, #124]	; (8001408 <__NVIC_SetPriority+0xd4>)
 800138a:	1dfb      	adds	r3, r7, #7
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	b25b      	sxtb	r3, r3
 8001390:	089b      	lsrs	r3, r3, #2
 8001392:	430a      	orrs	r2, r1
 8001394:	33c0      	adds	r3, #192	; 0xc0
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800139a:	e031      	b.n	8001400 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800139c:	4a1b      	ldr	r2, [pc, #108]	; (800140c <__NVIC_SetPriority+0xd8>)
 800139e:	1dfb      	adds	r3, r7, #7
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	0019      	movs	r1, r3
 80013a4:	230f      	movs	r3, #15
 80013a6:	400b      	ands	r3, r1
 80013a8:	3b08      	subs	r3, #8
 80013aa:	089b      	lsrs	r3, r3, #2
 80013ac:	3306      	adds	r3, #6
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	18d3      	adds	r3, r2, r3
 80013b2:	3304      	adds	r3, #4
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	1dfa      	adds	r2, r7, #7
 80013b8:	7812      	ldrb	r2, [r2, #0]
 80013ba:	0011      	movs	r1, r2
 80013bc:	2203      	movs	r2, #3
 80013be:	400a      	ands	r2, r1
 80013c0:	00d2      	lsls	r2, r2, #3
 80013c2:	21ff      	movs	r1, #255	; 0xff
 80013c4:	4091      	lsls	r1, r2
 80013c6:	000a      	movs	r2, r1
 80013c8:	43d2      	mvns	r2, r2
 80013ca:	401a      	ands	r2, r3
 80013cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	019b      	lsls	r3, r3, #6
 80013d2:	22ff      	movs	r2, #255	; 0xff
 80013d4:	401a      	ands	r2, r3
 80013d6:	1dfb      	adds	r3, r7, #7
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	0018      	movs	r0, r3
 80013dc:	2303      	movs	r3, #3
 80013de:	4003      	ands	r3, r0
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013e4:	4809      	ldr	r0, [pc, #36]	; (800140c <__NVIC_SetPriority+0xd8>)
 80013e6:	1dfb      	adds	r3, r7, #7
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	001c      	movs	r4, r3
 80013ec:	230f      	movs	r3, #15
 80013ee:	4023      	ands	r3, r4
 80013f0:	3b08      	subs	r3, #8
 80013f2:	089b      	lsrs	r3, r3, #2
 80013f4:	430a      	orrs	r2, r1
 80013f6:	3306      	adds	r3, #6
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	18c3      	adds	r3, r0, r3
 80013fc:	3304      	adds	r3, #4
 80013fe:	601a      	str	r2, [r3, #0]
}
 8001400:	46c0      	nop			; (mov r8, r8)
 8001402:	46bd      	mov	sp, r7
 8001404:	b003      	add	sp, #12
 8001406:	bd90      	pop	{r4, r7, pc}
 8001408:	e000e100 	.word	0xe000e100
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	1e5a      	subs	r2, r3, #1
 800141c:	2380      	movs	r3, #128	; 0x80
 800141e:	045b      	lsls	r3, r3, #17
 8001420:	429a      	cmp	r2, r3
 8001422:	d301      	bcc.n	8001428 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001424:	2301      	movs	r3, #1
 8001426:	e010      	b.n	800144a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <SysTick_Config+0x44>)
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	3a01      	subs	r2, #1
 800142e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001430:	2301      	movs	r3, #1
 8001432:	425b      	negs	r3, r3
 8001434:	2103      	movs	r1, #3
 8001436:	0018      	movs	r0, r3
 8001438:	f7ff ff7c 	bl	8001334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <SysTick_Config+0x44>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001442:	4b04      	ldr	r3, [pc, #16]	; (8001454 <SysTick_Config+0x44>)
 8001444:	2207      	movs	r2, #7
 8001446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001448:	2300      	movs	r3, #0
}
 800144a:	0018      	movs	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	b002      	add	sp, #8
 8001450:	bd80      	pop	{r7, pc}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	e000e010 	.word	0xe000e010

08001458 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	210f      	movs	r1, #15
 8001464:	187b      	adds	r3, r7, r1
 8001466:	1c02      	adds	r2, r0, #0
 8001468:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	187b      	adds	r3, r7, r1
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	b25b      	sxtb	r3, r3
 8001472:	0011      	movs	r1, r2
 8001474:	0018      	movs	r0, r3
 8001476:	f7ff ff5d 	bl	8001334 <__NVIC_SetPriority>
}
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	46bd      	mov	sp, r7
 800147e:	b004      	add	sp, #16
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	0018      	movs	r0, r3
 800148e:	f7ff ffbf 	bl	8001410 <SysTick_Config>
 8001492:	0003      	movs	r3, r0
}
 8001494:	0018      	movs	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	b002      	add	sp, #8
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80014b2:	e143      	b.n	800173c <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2101      	movs	r1, #1
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	4091      	lsls	r1, r2
 80014be:	000a      	movs	r2, r1
 80014c0:	4013      	ands	r3, r2
 80014c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d100      	bne.n	80014cc <HAL_GPIO_Init+0x30>
 80014ca:	e134      	b.n	8001736 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d00b      	beq.n	80014ec <HAL_GPIO_Init+0x50>
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d007      	beq.n	80014ec <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014e0:	2b11      	cmp	r3, #17
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b12      	cmp	r3, #18
 80014ea:	d130      	bne.n	800154e <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	2203      	movs	r2, #3
 80014f8:	409a      	lsls	r2, r3
 80014fa:	0013      	movs	r3, r2
 80014fc:	43da      	mvns	r2, r3
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	68da      	ldr	r2, [r3, #12]
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	409a      	lsls	r2, r3
 800150e:	0013      	movs	r3, r2
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001522:	2201      	movs	r2, #1
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	409a      	lsls	r2, r3
 8001528:	0013      	movs	r3, r2
 800152a:	43da      	mvns	r2, r3
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	091b      	lsrs	r3, r3, #4
 8001538:	2201      	movs	r2, #1
 800153a:	401a      	ands	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	409a      	lsls	r2, r3
 8001540:	0013      	movs	r3, r2
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	2203      	movs	r2, #3
 800155a:	409a      	lsls	r2, r3
 800155c:	0013      	movs	r3, r2
 800155e:	43da      	mvns	r2, r3
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	4013      	ands	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	409a      	lsls	r2, r3
 8001570:	0013      	movs	r3, r2
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d003      	beq.n	800158e <HAL_GPIO_Init+0xf2>
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b12      	cmp	r3, #18
 800158c:	d123      	bne.n	80015d6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	08da      	lsrs	r2, r3, #3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3208      	adds	r2, #8
 8001596:	0092      	lsls	r2, r2, #2
 8001598:	58d3      	ldr	r3, [r2, r3]
 800159a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	2207      	movs	r2, #7
 80015a0:	4013      	ands	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	220f      	movs	r2, #15
 80015a6:	409a      	lsls	r2, r3
 80015a8:	0013      	movs	r3, r2
 80015aa:	43da      	mvns	r2, r3
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	691a      	ldr	r2, [r3, #16]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	2107      	movs	r1, #7
 80015ba:	400b      	ands	r3, r1
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	409a      	lsls	r2, r3
 80015c0:	0013      	movs	r3, r2
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	08da      	lsrs	r2, r3, #3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3208      	adds	r2, #8
 80015d0:	0092      	lsls	r2, r2, #2
 80015d2:	6939      	ldr	r1, [r7, #16]
 80015d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	2203      	movs	r2, #3
 80015e2:	409a      	lsls	r2, r3
 80015e4:	0013      	movs	r3, r2
 80015e6:	43da      	mvns	r2, r3
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4013      	ands	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2203      	movs	r2, #3
 80015f4:	401a      	ands	r2, r3
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	409a      	lsls	r2, r3
 80015fc:	0013      	movs	r3, r2
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	055b      	lsls	r3, r3, #21
 8001612:	4013      	ands	r3, r2
 8001614:	d100      	bne.n	8001618 <HAL_GPIO_Init+0x17c>
 8001616:	e08e      	b.n	8001736 <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001618:	4b4e      	ldr	r3, [pc, #312]	; (8001754 <HAL_GPIO_Init+0x2b8>)
 800161a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800161c:	4b4d      	ldr	r3, [pc, #308]	; (8001754 <HAL_GPIO_Init+0x2b8>)
 800161e:	2101      	movs	r1, #1
 8001620:	430a      	orrs	r2, r1
 8001622:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001624:	4a4c      	ldr	r2, [pc, #304]	; (8001758 <HAL_GPIO_Init+0x2bc>)
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	089b      	lsrs	r3, r3, #2
 800162a:	3302      	adds	r3, #2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	589b      	ldr	r3, [r3, r2]
 8001630:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	2203      	movs	r2, #3
 8001636:	4013      	ands	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	220f      	movs	r2, #15
 800163c:	409a      	lsls	r2, r3
 800163e:	0013      	movs	r3, r2
 8001640:	43da      	mvns	r2, r3
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	4013      	ands	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	23a0      	movs	r3, #160	; 0xa0
 800164c:	05db      	lsls	r3, r3, #23
 800164e:	429a      	cmp	r2, r3
 8001650:	d00d      	beq.n	800166e <HAL_GPIO_Init+0x1d2>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a41      	ldr	r2, [pc, #260]	; (800175c <HAL_GPIO_Init+0x2c0>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d007      	beq.n	800166a <HAL_GPIO_Init+0x1ce>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a40      	ldr	r2, [pc, #256]	; (8001760 <HAL_GPIO_Init+0x2c4>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d101      	bne.n	8001666 <HAL_GPIO_Init+0x1ca>
 8001662:	2302      	movs	r3, #2
 8001664:	e004      	b.n	8001670 <HAL_GPIO_Init+0x1d4>
 8001666:	2306      	movs	r3, #6
 8001668:	e002      	b.n	8001670 <HAL_GPIO_Init+0x1d4>
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <HAL_GPIO_Init+0x1d4>
 800166e:	2300      	movs	r3, #0
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	2103      	movs	r1, #3
 8001674:	400a      	ands	r2, r1
 8001676:	0092      	lsls	r2, r2, #2
 8001678:	4093      	lsls	r3, r2
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001680:	4935      	ldr	r1, [pc, #212]	; (8001758 <HAL_GPIO_Init+0x2bc>)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	089b      	lsrs	r3, r3, #2
 8001686:	3302      	adds	r3, #2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800168e:	4b35      	ldr	r3, [pc, #212]	; (8001764 <HAL_GPIO_Init+0x2c8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	43da      	mvns	r2, r3
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	4013      	ands	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	2380      	movs	r3, #128	; 0x80
 80016a4:	025b      	lsls	r3, r3, #9
 80016a6:	4013      	ands	r3, r2
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016b2:	4b2c      	ldr	r3, [pc, #176]	; (8001764 <HAL_GPIO_Init+0x2c8>)
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80016b8:	4b2a      	ldr	r3, [pc, #168]	; (8001764 <HAL_GPIO_Init+0x2c8>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	43da      	mvns	r2, r3
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	029b      	lsls	r3, r3, #10
 80016d0:	4013      	ands	r3, r2
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016dc:	4b21      	ldr	r3, [pc, #132]	; (8001764 <HAL_GPIO_Init+0x2c8>)
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016e2:	4b20      	ldr	r3, [pc, #128]	; (8001764 <HAL_GPIO_Init+0x2c8>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	43da      	mvns	r2, r3
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	035b      	lsls	r3, r3, #13
 80016fa:	4013      	ands	r3, r2
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4313      	orrs	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001706:	4b17      	ldr	r3, [pc, #92]	; (8001764 <HAL_GPIO_Init+0x2c8>)
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800170c:	4b15      	ldr	r3, [pc, #84]	; (8001764 <HAL_GPIO_Init+0x2c8>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	43da      	mvns	r2, r3
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	039b      	lsls	r3, r3, #14
 8001724:	4013      	ands	r3, r2
 8001726:	d003      	beq.n	8001730 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <HAL_GPIO_Init+0x2c8>)
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	3301      	adds	r3, #1
 800173a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	40da      	lsrs	r2, r3
 8001744:	1e13      	subs	r3, r2, #0
 8001746:	d000      	beq.n	800174a <HAL_GPIO_Init+0x2ae>
 8001748:	e6b4      	b.n	80014b4 <HAL_GPIO_Init+0x18>
  }
}
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	46c0      	nop			; (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	b006      	add	sp, #24
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40021000 	.word	0x40021000
 8001758:	40010000 	.word	0x40010000
 800175c:	50000400 	.word	0x50000400
 8001760:	50000800 	.word	0x50000800
 8001764:	40010400 	.word	0x40010400

08001768 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	000a      	movs	r2, r1
 8001772:	1cbb      	adds	r3, r7, #2
 8001774:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	1cba      	adds	r2, r7, #2
 800177c:	8812      	ldrh	r2, [r2, #0]
 800177e:	4013      	ands	r3, r2
 8001780:	d004      	beq.n	800178c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001782:	230f      	movs	r3, #15
 8001784:	18fb      	adds	r3, r7, r3
 8001786:	2201      	movs	r2, #1
 8001788:	701a      	strb	r2, [r3, #0]
 800178a:	e003      	b.n	8001794 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800178c:	230f      	movs	r3, #15
 800178e:	18fb      	adds	r3, r7, r3
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001794:	230f      	movs	r3, #15
 8001796:	18fb      	adds	r3, r7, r3
 8001798:	781b      	ldrb	r3, [r3, #0]
}
 800179a:	0018      	movs	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	b004      	add	sp, #16
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	0008      	movs	r0, r1
 80017ac:	0011      	movs	r1, r2
 80017ae:	1cbb      	adds	r3, r7, #2
 80017b0:	1c02      	adds	r2, r0, #0
 80017b2:	801a      	strh	r2, [r3, #0]
 80017b4:	1c7b      	adds	r3, r7, #1
 80017b6:	1c0a      	adds	r2, r1, #0
 80017b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017ba:	1c7b      	adds	r3, r7, #1
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d004      	beq.n	80017cc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017c2:	1cbb      	adds	r3, r7, #2
 80017c4:	881a      	ldrh	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80017ca:	e003      	b.n	80017d4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80017cc:	1cbb      	adds	r3, r7, #2
 80017ce:	881a      	ldrh	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017d4:	46c0      	nop			; (mov r8, r8)
 80017d6:	46bd      	mov	sp, r7
 80017d8:	b002      	add	sp, #8
 80017da:	bd80      	pop	{r7, pc}

080017dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017dc:	b5b0      	push	{r4, r5, r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d102      	bne.n	80017f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	f000 fb6c 	bl	8001ec8 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017f0:	4bc8      	ldr	r3, [pc, #800]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	220c      	movs	r2, #12
 80017f6:	4013      	ands	r3, r2
 80017f8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017fa:	4bc6      	ldr	r3, [pc, #792]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 80017fc:	68da      	ldr	r2, [r3, #12]
 80017fe:	2380      	movs	r3, #128	; 0x80
 8001800:	025b      	lsls	r3, r3, #9
 8001802:	4013      	ands	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2201      	movs	r2, #1
 800180c:	4013      	ands	r3, r2
 800180e:	d100      	bne.n	8001812 <HAL_RCC_OscConfig+0x36>
 8001810:	e07d      	b.n	800190e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	2b08      	cmp	r3, #8
 8001816:	d007      	beq.n	8001828 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	2b0c      	cmp	r3, #12
 800181c:	d112      	bne.n	8001844 <HAL_RCC_OscConfig+0x68>
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	025b      	lsls	r3, r3, #9
 8001824:	429a      	cmp	r2, r3
 8001826:	d10d      	bne.n	8001844 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001828:	4bba      	ldr	r3, [pc, #744]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	029b      	lsls	r3, r3, #10
 8001830:	4013      	ands	r3, r2
 8001832:	d100      	bne.n	8001836 <HAL_RCC_OscConfig+0x5a>
 8001834:	e06a      	b.n	800190c <HAL_RCC_OscConfig+0x130>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d166      	bne.n	800190c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	f000 fb42 	bl	8001ec8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	025b      	lsls	r3, r3, #9
 800184c:	429a      	cmp	r2, r3
 800184e:	d107      	bne.n	8001860 <HAL_RCC_OscConfig+0x84>
 8001850:	4bb0      	ldr	r3, [pc, #704]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4baf      	ldr	r3, [pc, #700]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 8001856:	2180      	movs	r1, #128	; 0x80
 8001858:	0249      	lsls	r1, r1, #9
 800185a:	430a      	orrs	r2, r1
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	e027      	b.n	80018b0 <HAL_RCC_OscConfig+0xd4>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	23a0      	movs	r3, #160	; 0xa0
 8001866:	02db      	lsls	r3, r3, #11
 8001868:	429a      	cmp	r2, r3
 800186a:	d10e      	bne.n	800188a <HAL_RCC_OscConfig+0xae>
 800186c:	4ba9      	ldr	r3, [pc, #676]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4ba8      	ldr	r3, [pc, #672]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 8001872:	2180      	movs	r1, #128	; 0x80
 8001874:	02c9      	lsls	r1, r1, #11
 8001876:	430a      	orrs	r2, r1
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	4ba6      	ldr	r3, [pc, #664]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4ba5      	ldr	r3, [pc, #660]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 8001880:	2180      	movs	r1, #128	; 0x80
 8001882:	0249      	lsls	r1, r1, #9
 8001884:	430a      	orrs	r2, r1
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	e012      	b.n	80018b0 <HAL_RCC_OscConfig+0xd4>
 800188a:	4ba2      	ldr	r3, [pc, #648]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	4ba1      	ldr	r3, [pc, #644]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 8001890:	49a1      	ldr	r1, [pc, #644]	; (8001b18 <HAL_RCC_OscConfig+0x33c>)
 8001892:	400a      	ands	r2, r1
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	4b9f      	ldr	r3, [pc, #636]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	025b      	lsls	r3, r3, #9
 800189e:	4013      	ands	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4b9b      	ldr	r3, [pc, #620]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b9a      	ldr	r3, [pc, #616]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 80018aa:	499c      	ldr	r1, [pc, #624]	; (8001b1c <HAL_RCC_OscConfig+0x340>)
 80018ac:	400a      	ands	r2, r1
 80018ae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d014      	beq.n	80018e2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7ff f9e0 	bl	8000c7c <HAL_GetTick>
 80018bc:	0003      	movs	r3, r0
 80018be:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018c2:	f7ff f9db 	bl	8000c7c <HAL_GetTick>
 80018c6:	0002      	movs	r2, r0
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b64      	cmp	r3, #100	; 0x64
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e2f9      	b.n	8001ec8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018d4:	4b8f      	ldr	r3, [pc, #572]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	2380      	movs	r3, #128	; 0x80
 80018da:	029b      	lsls	r3, r3, #10
 80018dc:	4013      	ands	r3, r2
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0xe6>
 80018e0:	e015      	b.n	800190e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e2:	f7ff f9cb 	bl	8000c7c <HAL_GetTick>
 80018e6:	0003      	movs	r3, r0
 80018e8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ec:	f7ff f9c6 	bl	8000c7c <HAL_GetTick>
 80018f0:	0002      	movs	r2, r0
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b64      	cmp	r3, #100	; 0x64
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e2e4      	b.n	8001ec8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018fe:	4b85      	ldr	r3, [pc, #532]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	2380      	movs	r3, #128	; 0x80
 8001904:	029b      	lsls	r3, r3, #10
 8001906:	4013      	ands	r3, r2
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0x110>
 800190a:	e000      	b.n	800190e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800190c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2202      	movs	r2, #2
 8001914:	4013      	ands	r3, r2
 8001916:	d100      	bne.n	800191a <HAL_RCC_OscConfig+0x13e>
 8001918:	e099      	b.n	8001a4e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	2220      	movs	r2, #32
 8001924:	4013      	ands	r3, r2
 8001926:	d009      	beq.n	800193c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001928:	4b7a      	ldr	r3, [pc, #488]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b79      	ldr	r3, [pc, #484]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 800192e:	2120      	movs	r1, #32
 8001930:	430a      	orrs	r2, r1
 8001932:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	2220      	movs	r2, #32
 8001938:	4393      	bics	r3, r2
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	2b04      	cmp	r3, #4
 8001940:	d005      	beq.n	800194e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	2b0c      	cmp	r3, #12
 8001946:	d13e      	bne.n	80019c6 <HAL_RCC_OscConfig+0x1ea>
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d13b      	bne.n	80019c6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800194e:	4b71      	ldr	r3, [pc, #452]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2204      	movs	r2, #4
 8001954:	4013      	ands	r3, r2
 8001956:	d004      	beq.n	8001962 <HAL_RCC_OscConfig+0x186>
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e2b2      	b.n	8001ec8 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001962:	4b6c      	ldr	r3, [pc, #432]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	4a6e      	ldr	r2, [pc, #440]	; (8001b20 <HAL_RCC_OscConfig+0x344>)
 8001968:	4013      	ands	r3, r2
 800196a:	0019      	movs	r1, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	021a      	lsls	r2, r3, #8
 8001972:	4b68      	ldr	r3, [pc, #416]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 8001974:	430a      	orrs	r2, r1
 8001976:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001978:	4b66      	ldr	r3, [pc, #408]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2209      	movs	r2, #9
 800197e:	4393      	bics	r3, r2
 8001980:	0019      	movs	r1, r3
 8001982:	4b64      	ldr	r3, [pc, #400]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 8001984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001986:	430a      	orrs	r2, r1
 8001988:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800198a:	f000 fbeb 	bl	8002164 <HAL_RCC_GetSysClockFreq>
 800198e:	0001      	movs	r1, r0
 8001990:	4b60      	ldr	r3, [pc, #384]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	091b      	lsrs	r3, r3, #4
 8001996:	220f      	movs	r2, #15
 8001998:	4013      	ands	r3, r2
 800199a:	4a62      	ldr	r2, [pc, #392]	; (8001b24 <HAL_RCC_OscConfig+0x348>)
 800199c:	5cd3      	ldrb	r3, [r2, r3]
 800199e:	000a      	movs	r2, r1
 80019a0:	40da      	lsrs	r2, r3
 80019a2:	4b61      	ldr	r3, [pc, #388]	; (8001b28 <HAL_RCC_OscConfig+0x34c>)
 80019a4:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80019a6:	4b61      	ldr	r3, [pc, #388]	; (8001b2c <HAL_RCC_OscConfig+0x350>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2513      	movs	r5, #19
 80019ac:	197c      	adds	r4, r7, r5
 80019ae:	0018      	movs	r0, r3
 80019b0:	f7ff f91e 	bl	8000bf0 <HAL_InitTick>
 80019b4:	0003      	movs	r3, r0
 80019b6:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80019b8:	197b      	adds	r3, r7, r5
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d046      	beq.n	8001a4e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80019c0:	197b      	adds	r3, r7, r5
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	e280      	b.n	8001ec8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d027      	beq.n	8001a1c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80019cc:	4b51      	ldr	r3, [pc, #324]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2209      	movs	r2, #9
 80019d2:	4393      	bics	r3, r2
 80019d4:	0019      	movs	r1, r3
 80019d6:	4b4f      	ldr	r3, [pc, #316]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 80019d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019da:	430a      	orrs	r2, r1
 80019dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019de:	f7ff f94d 	bl	8000c7c <HAL_GetTick>
 80019e2:	0003      	movs	r3, r0
 80019e4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019e8:	f7ff f948 	bl	8000c7c <HAL_GetTick>
 80019ec:	0002      	movs	r2, r0
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e266      	b.n	8001ec8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019fa:	4b46      	ldr	r3, [pc, #280]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2204      	movs	r2, #4
 8001a00:	4013      	ands	r3, r2
 8001a02:	d0f1      	beq.n	80019e8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a04:	4b43      	ldr	r3, [pc, #268]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	4a45      	ldr	r2, [pc, #276]	; (8001b20 <HAL_RCC_OscConfig+0x344>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	0019      	movs	r1, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	021a      	lsls	r2, r3, #8
 8001a14:	4b3f      	ldr	r3, [pc, #252]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 8001a16:	430a      	orrs	r2, r1
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	e018      	b.n	8001a4e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a1c:	4b3d      	ldr	r3, [pc, #244]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b3c      	ldr	r3, [pc, #240]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 8001a22:	2101      	movs	r1, #1
 8001a24:	438a      	bics	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a28:	f7ff f928 	bl	8000c7c <HAL_GetTick>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a32:	f7ff f923 	bl	8000c7c <HAL_GetTick>
 8001a36:	0002      	movs	r2, r0
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e241      	b.n	8001ec8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a44:	4b33      	ldr	r3, [pc, #204]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2204      	movs	r2, #4
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d1f1      	bne.n	8001a32 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2210      	movs	r2, #16
 8001a54:	4013      	ands	r3, r2
 8001a56:	d100      	bne.n	8001a5a <HAL_RCC_OscConfig+0x27e>
 8001a58:	e0a1      	b.n	8001b9e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d140      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a60:	4b2c      	ldr	r3, [pc, #176]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d005      	beq.n	8001a78 <HAL_RCC_OscConfig+0x29c>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e227      	b.n	8001ec8 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a78:	4b26      	ldr	r3, [pc, #152]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	4a2c      	ldr	r2, [pc, #176]	; (8001b30 <HAL_RCC_OscConfig+0x354>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	0019      	movs	r1, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a1a      	ldr	r2, [r3, #32]
 8001a86:	4b23      	ldr	r3, [pc, #140]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a8c:	4b21      	ldr	r3, [pc, #132]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	0a19      	lsrs	r1, r3, #8
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	061a      	lsls	r2, r3, #24
 8001a9a:	4b1e      	ldr	r3, [pc, #120]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	0b5b      	lsrs	r3, r3, #13
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2280      	movs	r2, #128	; 0x80
 8001aaa:	0212      	lsls	r2, r2, #8
 8001aac:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001aae:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	091b      	lsrs	r3, r3, #4
 8001ab4:	210f      	movs	r1, #15
 8001ab6:	400b      	ands	r3, r1
 8001ab8:	491a      	ldr	r1, [pc, #104]	; (8001b24 <HAL_RCC_OscConfig+0x348>)
 8001aba:	5ccb      	ldrb	r3, [r1, r3]
 8001abc:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001abe:	4b1a      	ldr	r3, [pc, #104]	; (8001b28 <HAL_RCC_OscConfig+0x34c>)
 8001ac0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001ac2:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <HAL_RCC_OscConfig+0x350>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2513      	movs	r5, #19
 8001ac8:	197c      	adds	r4, r7, r5
 8001aca:	0018      	movs	r0, r3
 8001acc:	f7ff f890 	bl	8000bf0 <HAL_InitTick>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001ad4:	197b      	adds	r3, r7, r5
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d060      	beq.n	8001b9e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001adc:	197b      	adds	r3, r7, r5
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	e1f2      	b.n	8001ec8 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d03f      	beq.n	8001b6a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <HAL_RCC_OscConfig+0x338>)
 8001af0:	2180      	movs	r1, #128	; 0x80
 8001af2:	0049      	lsls	r1, r1, #1
 8001af4:	430a      	orrs	r2, r1
 8001af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af8:	f7ff f8c0 	bl	8000c7c <HAL_GetTick>
 8001afc:	0003      	movs	r3, r0
 8001afe:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b00:	e018      	b.n	8001b34 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b02:	f7ff f8bb 	bl	8000c7c <HAL_GetTick>
 8001b06:	0002      	movs	r2, r0
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d911      	bls.n	8001b34 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e1d9      	b.n	8001ec8 <HAL_RCC_OscConfig+0x6ec>
 8001b14:	40021000 	.word	0x40021000
 8001b18:	fffeffff 	.word	0xfffeffff
 8001b1c:	fffbffff 	.word	0xfffbffff
 8001b20:	ffffe0ff 	.word	0xffffe0ff
 8001b24:	08002320 	.word	0x08002320
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	20000004 	.word	0x20000004
 8001b30:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b34:	4bc9      	ldr	r3, [pc, #804]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d0e0      	beq.n	8001b02 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b40:	4bc6      	ldr	r3, [pc, #792]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	4ac6      	ldr	r2, [pc, #792]	; (8001e60 <HAL_RCC_OscConfig+0x684>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	0019      	movs	r1, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a1a      	ldr	r2, [r3, #32]
 8001b4e:	4bc3      	ldr	r3, [pc, #780]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001b50:	430a      	orrs	r2, r1
 8001b52:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b54:	4bc1      	ldr	r3, [pc, #772]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	021b      	lsls	r3, r3, #8
 8001b5a:	0a19      	lsrs	r1, r3, #8
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	061a      	lsls	r2, r3, #24
 8001b62:	4bbe      	ldr	r3, [pc, #760]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001b64:	430a      	orrs	r2, r1
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	e019      	b.n	8001b9e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b6a:	4bbc      	ldr	r3, [pc, #752]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	4bbb      	ldr	r3, [pc, #748]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001b70:	49bc      	ldr	r1, [pc, #752]	; (8001e64 <HAL_RCC_OscConfig+0x688>)
 8001b72:	400a      	ands	r2, r1
 8001b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b76:	f7ff f881 	bl	8000c7c <HAL_GetTick>
 8001b7a:	0003      	movs	r3, r0
 8001b7c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b80:	f7ff f87c 	bl	8000c7c <HAL_GetTick>
 8001b84:	0002      	movs	r2, r0
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e19a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b92:	4bb2      	ldr	r3, [pc, #712]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d1f0      	bne.n	8001b80 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2208      	movs	r2, #8
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d036      	beq.n	8001c16 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d019      	beq.n	8001be4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb0:	4baa      	ldr	r3, [pc, #680]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001bb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bb4:	4ba9      	ldr	r3, [pc, #676]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bbc:	f7ff f85e 	bl	8000c7c <HAL_GetTick>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bc6:	f7ff f859 	bl	8000c7c <HAL_GetTick>
 8001bca:	0002      	movs	r2, r0
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e177      	b.n	8001ec8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bd8:	4ba0      	ldr	r3, [pc, #640]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bdc:	2202      	movs	r2, #2
 8001bde:	4013      	ands	r3, r2
 8001be0:	d0f1      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x3ea>
 8001be2:	e018      	b.n	8001c16 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be4:	4b9d      	ldr	r3, [pc, #628]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001be6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001be8:	4b9c      	ldr	r3, [pc, #624]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001bea:	2101      	movs	r1, #1
 8001bec:	438a      	bics	r2, r1
 8001bee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf0:	f7ff f844 	bl	8000c7c <HAL_GetTick>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bfa:	f7ff f83f 	bl	8000c7c <HAL_GetTick>
 8001bfe:	0002      	movs	r2, r0
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e15d      	b.n	8001ec8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c0c:	4b93      	ldr	r3, [pc, #588]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c10:	2202      	movs	r2, #2
 8001c12:	4013      	ands	r3, r2
 8001c14:	d1f1      	bne.n	8001bfa <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d100      	bne.n	8001c22 <HAL_RCC_OscConfig+0x446>
 8001c20:	e0ae      	b.n	8001d80 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c22:	2023      	movs	r0, #35	; 0x23
 8001c24:	183b      	adds	r3, r7, r0
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c2a:	4b8c      	ldr	r3, [pc, #560]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001c2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c2e:	2380      	movs	r3, #128	; 0x80
 8001c30:	055b      	lsls	r3, r3, #21
 8001c32:	4013      	ands	r3, r2
 8001c34:	d109      	bne.n	8001c4a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c36:	4b89      	ldr	r3, [pc, #548]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001c38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c3a:	4b88      	ldr	r3, [pc, #544]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001c3c:	2180      	movs	r1, #128	; 0x80
 8001c3e:	0549      	lsls	r1, r1, #21
 8001c40:	430a      	orrs	r2, r1
 8001c42:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001c44:	183b      	adds	r3, r7, r0
 8001c46:	2201      	movs	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4a:	4b87      	ldr	r3, [pc, #540]	; (8001e68 <HAL_RCC_OscConfig+0x68c>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	2380      	movs	r3, #128	; 0x80
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	4013      	ands	r3, r2
 8001c54:	d11a      	bne.n	8001c8c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c56:	4b84      	ldr	r3, [pc, #528]	; (8001e68 <HAL_RCC_OscConfig+0x68c>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	4b83      	ldr	r3, [pc, #524]	; (8001e68 <HAL_RCC_OscConfig+0x68c>)
 8001c5c:	2180      	movs	r1, #128	; 0x80
 8001c5e:	0049      	lsls	r1, r1, #1
 8001c60:	430a      	orrs	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c64:	f7ff f80a 	bl	8000c7c <HAL_GetTick>
 8001c68:	0003      	movs	r3, r0
 8001c6a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c6e:	f7ff f805 	bl	8000c7c <HAL_GetTick>
 8001c72:	0002      	movs	r2, r0
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b64      	cmp	r3, #100	; 0x64
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e123      	b.n	8001ec8 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c80:	4b79      	ldr	r3, [pc, #484]	; (8001e68 <HAL_RCC_OscConfig+0x68c>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d0f0      	beq.n	8001c6e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	2380      	movs	r3, #128	; 0x80
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d107      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x4cc>
 8001c98:	4b70      	ldr	r3, [pc, #448]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001c9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c9c:	4b6f      	ldr	r3, [pc, #444]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001c9e:	2180      	movs	r1, #128	; 0x80
 8001ca0:	0049      	lsls	r1, r1, #1
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	651a      	str	r2, [r3, #80]	; 0x50
 8001ca6:	e031      	b.n	8001d0c <HAL_RCC_OscConfig+0x530>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10c      	bne.n	8001cca <HAL_RCC_OscConfig+0x4ee>
 8001cb0:	4b6a      	ldr	r3, [pc, #424]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001cb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cb4:	4b69      	ldr	r3, [pc, #420]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001cb6:	496b      	ldr	r1, [pc, #428]	; (8001e64 <HAL_RCC_OscConfig+0x688>)
 8001cb8:	400a      	ands	r2, r1
 8001cba:	651a      	str	r2, [r3, #80]	; 0x50
 8001cbc:	4b67      	ldr	r3, [pc, #412]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001cbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cc0:	4b66      	ldr	r3, [pc, #408]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001cc2:	496a      	ldr	r1, [pc, #424]	; (8001e6c <HAL_RCC_OscConfig+0x690>)
 8001cc4:	400a      	ands	r2, r1
 8001cc6:	651a      	str	r2, [r3, #80]	; 0x50
 8001cc8:	e020      	b.n	8001d0c <HAL_RCC_OscConfig+0x530>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	23a0      	movs	r3, #160	; 0xa0
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d10e      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x518>
 8001cd6:	4b61      	ldr	r3, [pc, #388]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001cd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cda:	4b60      	ldr	r3, [pc, #384]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001cdc:	2180      	movs	r1, #128	; 0x80
 8001cde:	00c9      	lsls	r1, r1, #3
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	651a      	str	r2, [r3, #80]	; 0x50
 8001ce4:	4b5d      	ldr	r3, [pc, #372]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001ce6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ce8:	4b5c      	ldr	r3, [pc, #368]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001cea:	2180      	movs	r1, #128	; 0x80
 8001cec:	0049      	lsls	r1, r1, #1
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	651a      	str	r2, [r3, #80]	; 0x50
 8001cf2:	e00b      	b.n	8001d0c <HAL_RCC_OscConfig+0x530>
 8001cf4:	4b59      	ldr	r3, [pc, #356]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001cf6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cf8:	4b58      	ldr	r3, [pc, #352]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001cfa:	495a      	ldr	r1, [pc, #360]	; (8001e64 <HAL_RCC_OscConfig+0x688>)
 8001cfc:	400a      	ands	r2, r1
 8001cfe:	651a      	str	r2, [r3, #80]	; 0x50
 8001d00:	4b56      	ldr	r3, [pc, #344]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001d02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d04:	4b55      	ldr	r3, [pc, #340]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001d06:	4959      	ldr	r1, [pc, #356]	; (8001e6c <HAL_RCC_OscConfig+0x690>)
 8001d08:	400a      	ands	r2, r1
 8001d0a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d015      	beq.n	8001d40 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d14:	f7fe ffb2 	bl	8000c7c <HAL_GetTick>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d1c:	e009      	b.n	8001d32 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d1e:	f7fe ffad 	bl	8000c7c <HAL_GetTick>
 8001d22:	0002      	movs	r2, r0
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	4a51      	ldr	r2, [pc, #324]	; (8001e70 <HAL_RCC_OscConfig+0x694>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e0ca      	b.n	8001ec8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d32:	4b4a      	ldr	r3, [pc, #296]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001d34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d0ef      	beq.n	8001d1e <HAL_RCC_OscConfig+0x542>
 8001d3e:	e014      	b.n	8001d6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d40:	f7fe ff9c 	bl	8000c7c <HAL_GetTick>
 8001d44:	0003      	movs	r3, r0
 8001d46:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d48:	e009      	b.n	8001d5e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d4a:	f7fe ff97 	bl	8000c7c <HAL_GetTick>
 8001d4e:	0002      	movs	r2, r0
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	4a46      	ldr	r2, [pc, #280]	; (8001e70 <HAL_RCC_OscConfig+0x694>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e0b4      	b.n	8001ec8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d5e:	4b3f      	ldr	r3, [pc, #252]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001d60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4013      	ands	r3, r2
 8001d68:	d1ef      	bne.n	8001d4a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d6a:	2323      	movs	r3, #35	; 0x23
 8001d6c:	18fb      	adds	r3, r7, r3
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d105      	bne.n	8001d80 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d74:	4b39      	ldr	r3, [pc, #228]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001d76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d78:	4b38      	ldr	r3, [pc, #224]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001d7a:	493e      	ldr	r1, [pc, #248]	; (8001e74 <HAL_RCC_OscConfig+0x698>)
 8001d7c:	400a      	ands	r2, r1
 8001d7e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d100      	bne.n	8001d8a <HAL_RCC_OscConfig+0x5ae>
 8001d88:	e09d      	b.n	8001ec6 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	2b0c      	cmp	r3, #12
 8001d8e:	d100      	bne.n	8001d92 <HAL_RCC_OscConfig+0x5b6>
 8001d90:	e076      	b.n	8001e80 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d145      	bne.n	8001e26 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9a:	4b30      	ldr	r3, [pc, #192]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	4b2f      	ldr	r3, [pc, #188]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001da0:	4935      	ldr	r1, [pc, #212]	; (8001e78 <HAL_RCC_OscConfig+0x69c>)
 8001da2:	400a      	ands	r2, r1
 8001da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da6:	f7fe ff69 	bl	8000c7c <HAL_GetTick>
 8001daa:	0003      	movs	r3, r0
 8001dac:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db0:	f7fe ff64 	bl	8000c7c <HAL_GetTick>
 8001db4:	0002      	movs	r2, r0
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e082      	b.n	8001ec8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001dc2:	4b26      	ldr	r3, [pc, #152]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	2380      	movs	r3, #128	; 0x80
 8001dc8:	049b      	lsls	r3, r3, #18
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dce:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	4a2a      	ldr	r2, [pc, #168]	; (8001e7c <HAL_RCC_OscConfig+0x6a0>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	0019      	movs	r1, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de0:	431a      	orrs	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	431a      	orrs	r2, r3
 8001de8:	4b1c      	ldr	r3, [pc, #112]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001dea:	430a      	orrs	r2, r1
 8001dec:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dee:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001df4:	2180      	movs	r1, #128	; 0x80
 8001df6:	0449      	lsls	r1, r1, #17
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfc:	f7fe ff3e 	bl	8000c7c <HAL_GetTick>
 8001e00:	0003      	movs	r3, r0
 8001e02:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e06:	f7fe ff39 	bl	8000c7c <HAL_GetTick>
 8001e0a:	0002      	movs	r2, r0
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e057      	b.n	8001ec8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001e18:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	2380      	movs	r3, #128	; 0x80
 8001e1e:	049b      	lsls	r3, r3, #18
 8001e20:	4013      	ands	r3, r2
 8001e22:	d0f0      	beq.n	8001e06 <HAL_RCC_OscConfig+0x62a>
 8001e24:	e04f      	b.n	8001ec6 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e26:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001e2c:	4912      	ldr	r1, [pc, #72]	; (8001e78 <HAL_RCC_OscConfig+0x69c>)
 8001e2e:	400a      	ands	r2, r1
 8001e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e32:	f7fe ff23 	bl	8000c7c <HAL_GetTick>
 8001e36:	0003      	movs	r3, r0
 8001e38:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e3c:	f7fe ff1e 	bl	8000c7c <HAL_GetTick>
 8001e40:	0002      	movs	r2, r0
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e03c      	b.n	8001ec8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e4e:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <HAL_RCC_OscConfig+0x680>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	2380      	movs	r3, #128	; 0x80
 8001e54:	049b      	lsls	r3, r3, #18
 8001e56:	4013      	ands	r3, r2
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x660>
 8001e5a:	e034      	b.n	8001ec6 <HAL_RCC_OscConfig+0x6ea>
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	ffff1fff 	.word	0xffff1fff
 8001e64:	fffffeff 	.word	0xfffffeff
 8001e68:	40007000 	.word	0x40007000
 8001e6c:	fffffbff 	.word	0xfffffbff
 8001e70:	00001388 	.word	0x00001388
 8001e74:	efffffff 	.word	0xefffffff
 8001e78:	feffffff 	.word	0xfeffffff
 8001e7c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e01d      	b.n	8001ec8 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e8c:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <HAL_RCC_OscConfig+0x6f4>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	025b      	lsls	r3, r3, #9
 8001e98:	401a      	ands	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d10f      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	23f0      	movs	r3, #240	; 0xf0
 8001ea6:	039b      	lsls	r3, r3, #14
 8001ea8:	401a      	ands	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d107      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	23c0      	movs	r3, #192	; 0xc0
 8001eb6:	041b      	lsls	r3, r3, #16
 8001eb8:	401a      	ands	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d001      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	0018      	movs	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b00a      	add	sp, #40	; 0x28
 8001ece:	bdb0      	pop	{r4, r5, r7, pc}
 8001ed0:	40021000 	.word	0x40021000

08001ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed4:	b5b0      	push	{r4, r5, r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e128      	b.n	800213a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee8:	4b96      	ldr	r3, [pc, #600]	; (8002144 <HAL_RCC_ClockConfig+0x270>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2201      	movs	r2, #1
 8001eee:	4013      	ands	r3, r2
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d91e      	bls.n	8001f34 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef6:	4b93      	ldr	r3, [pc, #588]	; (8002144 <HAL_RCC_ClockConfig+0x270>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2201      	movs	r2, #1
 8001efc:	4393      	bics	r3, r2
 8001efe:	0019      	movs	r1, r3
 8001f00:	4b90      	ldr	r3, [pc, #576]	; (8002144 <HAL_RCC_ClockConfig+0x270>)
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f08:	f7fe feb8 	bl	8000c7c <HAL_GetTick>
 8001f0c:	0003      	movs	r3, r0
 8001f0e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f10:	e009      	b.n	8001f26 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f12:	f7fe feb3 	bl	8000c7c <HAL_GetTick>
 8001f16:	0002      	movs	r2, r0
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	4a8a      	ldr	r2, [pc, #552]	; (8002148 <HAL_RCC_ClockConfig+0x274>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e109      	b.n	800213a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f26:	4b87      	ldr	r3, [pc, #540]	; (8002144 <HAL_RCC_ClockConfig+0x270>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d1ee      	bne.n	8001f12 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2202      	movs	r2, #2
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d009      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f3e:	4b83      	ldr	r3, [pc, #524]	; (800214c <HAL_RCC_ClockConfig+0x278>)
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	22f0      	movs	r2, #240	; 0xf0
 8001f44:	4393      	bics	r3, r2
 8001f46:	0019      	movs	r1, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	4b7f      	ldr	r3, [pc, #508]	; (800214c <HAL_RCC_ClockConfig+0x278>)
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2201      	movs	r2, #1
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d100      	bne.n	8001f5e <HAL_RCC_ClockConfig+0x8a>
 8001f5c:	e089      	b.n	8002072 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d107      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f66:	4b79      	ldr	r3, [pc, #484]	; (800214c <HAL_RCC_ClockConfig+0x278>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	029b      	lsls	r3, r3, #10
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d120      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e0e1      	b.n	800213a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	d107      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f7e:	4b73      	ldr	r3, [pc, #460]	; (800214c <HAL_RCC_ClockConfig+0x278>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	049b      	lsls	r3, r3, #18
 8001f86:	4013      	ands	r3, r2
 8001f88:	d114      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e0d5      	b.n	800213a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d106      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f96:	4b6d      	ldr	r3, [pc, #436]	; (800214c <HAL_RCC_ClockConfig+0x278>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2204      	movs	r2, #4
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d109      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0ca      	b.n	800213a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001fa4:	4b69      	ldr	r3, [pc, #420]	; (800214c <HAL_RCC_ClockConfig+0x278>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4013      	ands	r3, r2
 8001fae:	d101      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0c2      	b.n	800213a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fb4:	4b65      	ldr	r3, [pc, #404]	; (800214c <HAL_RCC_ClockConfig+0x278>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	2203      	movs	r2, #3
 8001fba:	4393      	bics	r3, r2
 8001fbc:	0019      	movs	r1, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	4b62      	ldr	r3, [pc, #392]	; (800214c <HAL_RCC_ClockConfig+0x278>)
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fc8:	f7fe fe58 	bl	8000c7c <HAL_GetTick>
 8001fcc:	0003      	movs	r3, r0
 8001fce:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d111      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fd8:	e009      	b.n	8001fee <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fda:	f7fe fe4f 	bl	8000c7c <HAL_GetTick>
 8001fde:	0002      	movs	r2, r0
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	4a58      	ldr	r2, [pc, #352]	; (8002148 <HAL_RCC_ClockConfig+0x274>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e0a5      	b.n	800213a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fee:	4b57      	ldr	r3, [pc, #348]	; (800214c <HAL_RCC_ClockConfig+0x278>)
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b08      	cmp	r3, #8
 8001ff8:	d1ef      	bne.n	8001fda <HAL_RCC_ClockConfig+0x106>
 8001ffa:	e03a      	b.n	8002072 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b03      	cmp	r3, #3
 8002002:	d111      	bne.n	8002028 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002004:	e009      	b.n	800201a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002006:	f7fe fe39 	bl	8000c7c <HAL_GetTick>
 800200a:	0002      	movs	r2, r0
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	4a4d      	ldr	r2, [pc, #308]	; (8002148 <HAL_RCC_ClockConfig+0x274>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e08f      	b.n	800213a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800201a:	4b4c      	ldr	r3, [pc, #304]	; (800214c <HAL_RCC_ClockConfig+0x278>)
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	220c      	movs	r2, #12
 8002020:	4013      	ands	r3, r2
 8002022:	2b0c      	cmp	r3, #12
 8002024:	d1ef      	bne.n	8002006 <HAL_RCC_ClockConfig+0x132>
 8002026:	e024      	b.n	8002072 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d11b      	bne.n	8002068 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002030:	e009      	b.n	8002046 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002032:	f7fe fe23 	bl	8000c7c <HAL_GetTick>
 8002036:	0002      	movs	r2, r0
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	4a42      	ldr	r2, [pc, #264]	; (8002148 <HAL_RCC_ClockConfig+0x274>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e079      	b.n	800213a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002046:	4b41      	ldr	r3, [pc, #260]	; (800214c <HAL_RCC_ClockConfig+0x278>)
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	220c      	movs	r2, #12
 800204c:	4013      	ands	r3, r2
 800204e:	2b04      	cmp	r3, #4
 8002050:	d1ef      	bne.n	8002032 <HAL_RCC_ClockConfig+0x15e>
 8002052:	e00e      	b.n	8002072 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002054:	f7fe fe12 	bl	8000c7c <HAL_GetTick>
 8002058:	0002      	movs	r2, r0
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	4a3a      	ldr	r2, [pc, #232]	; (8002148 <HAL_RCC_ClockConfig+0x274>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e068      	b.n	800213a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002068:	4b38      	ldr	r3, [pc, #224]	; (800214c <HAL_RCC_ClockConfig+0x278>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	220c      	movs	r2, #12
 800206e:	4013      	ands	r3, r2
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002072:	4b34      	ldr	r3, [pc, #208]	; (8002144 <HAL_RCC_ClockConfig+0x270>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2201      	movs	r2, #1
 8002078:	4013      	ands	r3, r2
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d21e      	bcs.n	80020be <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002080:	4b30      	ldr	r3, [pc, #192]	; (8002144 <HAL_RCC_ClockConfig+0x270>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2201      	movs	r2, #1
 8002086:	4393      	bics	r3, r2
 8002088:	0019      	movs	r1, r3
 800208a:	4b2e      	ldr	r3, [pc, #184]	; (8002144 <HAL_RCC_ClockConfig+0x270>)
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002092:	f7fe fdf3 	bl	8000c7c <HAL_GetTick>
 8002096:	0003      	movs	r3, r0
 8002098:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800209a:	e009      	b.n	80020b0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800209c:	f7fe fdee 	bl	8000c7c <HAL_GetTick>
 80020a0:	0002      	movs	r2, r0
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	4a28      	ldr	r2, [pc, #160]	; (8002148 <HAL_RCC_ClockConfig+0x274>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e044      	b.n	800213a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b0:	4b24      	ldr	r3, [pc, #144]	; (8002144 <HAL_RCC_ClockConfig+0x270>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2201      	movs	r2, #1
 80020b6:	4013      	ands	r3, r2
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d1ee      	bne.n	800209c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2204      	movs	r2, #4
 80020c4:	4013      	ands	r3, r2
 80020c6:	d009      	beq.n	80020dc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c8:	4b20      	ldr	r3, [pc, #128]	; (800214c <HAL_RCC_ClockConfig+0x278>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	4a20      	ldr	r2, [pc, #128]	; (8002150 <HAL_RCC_ClockConfig+0x27c>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	0019      	movs	r1, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	4b1d      	ldr	r3, [pc, #116]	; (800214c <HAL_RCC_ClockConfig+0x278>)
 80020d8:	430a      	orrs	r2, r1
 80020da:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2208      	movs	r2, #8
 80020e2:	4013      	ands	r3, r2
 80020e4:	d00a      	beq.n	80020fc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020e6:	4b19      	ldr	r3, [pc, #100]	; (800214c <HAL_RCC_ClockConfig+0x278>)
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	4a1a      	ldr	r2, [pc, #104]	; (8002154 <HAL_RCC_ClockConfig+0x280>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	0019      	movs	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	00da      	lsls	r2, r3, #3
 80020f6:	4b15      	ldr	r3, [pc, #84]	; (800214c <HAL_RCC_ClockConfig+0x278>)
 80020f8:	430a      	orrs	r2, r1
 80020fa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020fc:	f000 f832 	bl	8002164 <HAL_RCC_GetSysClockFreq>
 8002100:	0001      	movs	r1, r0
 8002102:	4b12      	ldr	r3, [pc, #72]	; (800214c <HAL_RCC_ClockConfig+0x278>)
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	091b      	lsrs	r3, r3, #4
 8002108:	220f      	movs	r2, #15
 800210a:	4013      	ands	r3, r2
 800210c:	4a12      	ldr	r2, [pc, #72]	; (8002158 <HAL_RCC_ClockConfig+0x284>)
 800210e:	5cd3      	ldrb	r3, [r2, r3]
 8002110:	000a      	movs	r2, r1
 8002112:	40da      	lsrs	r2, r3
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <HAL_RCC_ClockConfig+0x288>)
 8002116:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_RCC_ClockConfig+0x28c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	250b      	movs	r5, #11
 800211e:	197c      	adds	r4, r7, r5
 8002120:	0018      	movs	r0, r3
 8002122:	f7fe fd65 	bl	8000bf0 <HAL_InitTick>
 8002126:	0003      	movs	r3, r0
 8002128:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800212a:	197b      	adds	r3, r7, r5
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d002      	beq.n	8002138 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002132:	197b      	adds	r3, r7, r5
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	e000      	b.n	800213a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	0018      	movs	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	b004      	add	sp, #16
 8002140:	bdb0      	pop	{r4, r5, r7, pc}
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	40022000 	.word	0x40022000
 8002148:	00001388 	.word	0x00001388
 800214c:	40021000 	.word	0x40021000
 8002150:	fffff8ff 	.word	0xfffff8ff
 8002154:	ffffc7ff 	.word	0xffffc7ff
 8002158:	08002320 	.word	0x08002320
 800215c:	20000000 	.word	0x20000000
 8002160:	20000004 	.word	0x20000004

08002164 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002164:	b5b0      	push	{r4, r5, r7, lr}
 8002166:	b08e      	sub	sp, #56	; 0x38
 8002168:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800216a:	4b4c      	ldr	r3, [pc, #304]	; (800229c <HAL_RCC_GetSysClockFreq+0x138>)
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002172:	230c      	movs	r3, #12
 8002174:	4013      	ands	r3, r2
 8002176:	2b0c      	cmp	r3, #12
 8002178:	d014      	beq.n	80021a4 <HAL_RCC_GetSysClockFreq+0x40>
 800217a:	d900      	bls.n	800217e <HAL_RCC_GetSysClockFreq+0x1a>
 800217c:	e07b      	b.n	8002276 <HAL_RCC_GetSysClockFreq+0x112>
 800217e:	2b04      	cmp	r3, #4
 8002180:	d002      	beq.n	8002188 <HAL_RCC_GetSysClockFreq+0x24>
 8002182:	2b08      	cmp	r3, #8
 8002184:	d00b      	beq.n	800219e <HAL_RCC_GetSysClockFreq+0x3a>
 8002186:	e076      	b.n	8002276 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002188:	4b44      	ldr	r3, [pc, #272]	; (800229c <HAL_RCC_GetSysClockFreq+0x138>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2210      	movs	r2, #16
 800218e:	4013      	ands	r3, r2
 8002190:	d002      	beq.n	8002198 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002192:	4b43      	ldr	r3, [pc, #268]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002194:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002196:	e07c      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002198:	4b42      	ldr	r3, [pc, #264]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x140>)
 800219a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800219c:	e079      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800219e:	4b42      	ldr	r3, [pc, #264]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x144>)
 80021a0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021a2:	e076      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80021a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a6:	0c9a      	lsrs	r2, r3, #18
 80021a8:	230f      	movs	r3, #15
 80021aa:	401a      	ands	r2, r3
 80021ac:	4b3f      	ldr	r3, [pc, #252]	; (80022ac <HAL_RCC_GetSysClockFreq+0x148>)
 80021ae:	5c9b      	ldrb	r3, [r3, r2]
 80021b0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80021b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b4:	0d9a      	lsrs	r2, r3, #22
 80021b6:	2303      	movs	r3, #3
 80021b8:	4013      	ands	r3, r2
 80021ba:	3301      	adds	r3, #1
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021be:	4b37      	ldr	r3, [pc, #220]	; (800229c <HAL_RCC_GetSysClockFreq+0x138>)
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	025b      	lsls	r3, r3, #9
 80021c6:	4013      	ands	r3, r2
 80021c8:	d01a      	beq.n	8002200 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80021ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021cc:	61bb      	str	r3, [r7, #24]
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
 80021d2:	4a35      	ldr	r2, [pc, #212]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x144>)
 80021d4:	2300      	movs	r3, #0
 80021d6:	69b8      	ldr	r0, [r7, #24]
 80021d8:	69f9      	ldr	r1, [r7, #28]
 80021da:	f7fe f841 	bl	8000260 <__aeabi_lmul>
 80021de:	0002      	movs	r2, r0
 80021e0:	000b      	movs	r3, r1
 80021e2:	0010      	movs	r0, r2
 80021e4:	0019      	movs	r1, r3
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	f7fe f815 	bl	8000220 <__aeabi_uldivmod>
 80021f6:	0002      	movs	r2, r0
 80021f8:	000b      	movs	r3, r1
 80021fa:	0013      	movs	r3, r2
 80021fc:	637b      	str	r3, [r7, #52]	; 0x34
 80021fe:	e037      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002200:	4b26      	ldr	r3, [pc, #152]	; (800229c <HAL_RCC_GetSysClockFreq+0x138>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2210      	movs	r2, #16
 8002206:	4013      	ands	r3, r2
 8002208:	d01a      	beq.n	8002240 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800220a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	4a23      	ldr	r2, [pc, #140]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002214:	2300      	movs	r3, #0
 8002216:	68b8      	ldr	r0, [r7, #8]
 8002218:	68f9      	ldr	r1, [r7, #12]
 800221a:	f7fe f821 	bl	8000260 <__aeabi_lmul>
 800221e:	0002      	movs	r2, r0
 8002220:	000b      	movs	r3, r1
 8002222:	0010      	movs	r0, r2
 8002224:	0019      	movs	r1, r3
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	603b      	str	r3, [r7, #0]
 800222a:	2300      	movs	r3, #0
 800222c:	607b      	str	r3, [r7, #4]
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f7fd fff5 	bl	8000220 <__aeabi_uldivmod>
 8002236:	0002      	movs	r2, r0
 8002238:	000b      	movs	r3, r1
 800223a:	0013      	movs	r3, r2
 800223c:	637b      	str	r3, [r7, #52]	; 0x34
 800223e:	e017      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002242:	0018      	movs	r0, r3
 8002244:	2300      	movs	r3, #0
 8002246:	0019      	movs	r1, r3
 8002248:	4a16      	ldr	r2, [pc, #88]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x140>)
 800224a:	2300      	movs	r3, #0
 800224c:	f7fe f808 	bl	8000260 <__aeabi_lmul>
 8002250:	0002      	movs	r2, r0
 8002252:	000b      	movs	r3, r1
 8002254:	0010      	movs	r0, r2
 8002256:	0019      	movs	r1, r3
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	001c      	movs	r4, r3
 800225c:	2300      	movs	r3, #0
 800225e:	001d      	movs	r5, r3
 8002260:	0022      	movs	r2, r4
 8002262:	002b      	movs	r3, r5
 8002264:	f7fd ffdc 	bl	8000220 <__aeabi_uldivmod>
 8002268:	0002      	movs	r2, r0
 800226a:	000b      	movs	r3, r1
 800226c:	0013      	movs	r3, r2
 800226e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002272:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002274:	e00d      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <HAL_RCC_GetSysClockFreq+0x138>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	0b5b      	lsrs	r3, r3, #13
 800227c:	2207      	movs	r2, #7
 800227e:	4013      	ands	r3, r2
 8002280:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	3301      	adds	r3, #1
 8002286:	2280      	movs	r2, #128	; 0x80
 8002288:	0212      	lsls	r2, r2, #8
 800228a:	409a      	lsls	r2, r3
 800228c:	0013      	movs	r3, r2
 800228e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002290:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002294:	0018      	movs	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	b00e      	add	sp, #56	; 0x38
 800229a:	bdb0      	pop	{r4, r5, r7, pc}
 800229c:	40021000 	.word	0x40021000
 80022a0:	003d0900 	.word	0x003d0900
 80022a4:	00f42400 	.word	0x00f42400
 80022a8:	007a1200 	.word	0x007a1200
 80022ac:	08002330 	.word	0x08002330

080022b0 <__libc_init_array>:
 80022b0:	b570      	push	{r4, r5, r6, lr}
 80022b2:	2600      	movs	r6, #0
 80022b4:	4d0c      	ldr	r5, [pc, #48]	; (80022e8 <__libc_init_array+0x38>)
 80022b6:	4c0d      	ldr	r4, [pc, #52]	; (80022ec <__libc_init_array+0x3c>)
 80022b8:	1b64      	subs	r4, r4, r5
 80022ba:	10a4      	asrs	r4, r4, #2
 80022bc:	42a6      	cmp	r6, r4
 80022be:	d109      	bne.n	80022d4 <__libc_init_array+0x24>
 80022c0:	2600      	movs	r6, #0
 80022c2:	f000 f821 	bl	8002308 <_init>
 80022c6:	4d0a      	ldr	r5, [pc, #40]	; (80022f0 <__libc_init_array+0x40>)
 80022c8:	4c0a      	ldr	r4, [pc, #40]	; (80022f4 <__libc_init_array+0x44>)
 80022ca:	1b64      	subs	r4, r4, r5
 80022cc:	10a4      	asrs	r4, r4, #2
 80022ce:	42a6      	cmp	r6, r4
 80022d0:	d105      	bne.n	80022de <__libc_init_array+0x2e>
 80022d2:	bd70      	pop	{r4, r5, r6, pc}
 80022d4:	00b3      	lsls	r3, r6, #2
 80022d6:	58eb      	ldr	r3, [r5, r3]
 80022d8:	4798      	blx	r3
 80022da:	3601      	adds	r6, #1
 80022dc:	e7ee      	b.n	80022bc <__libc_init_array+0xc>
 80022de:	00b3      	lsls	r3, r6, #2
 80022e0:	58eb      	ldr	r3, [r5, r3]
 80022e2:	4798      	blx	r3
 80022e4:	3601      	adds	r6, #1
 80022e6:	e7f2      	b.n	80022ce <__libc_init_array+0x1e>
 80022e8:	08002344 	.word	0x08002344
 80022ec:	08002344 	.word	0x08002344
 80022f0:	08002344 	.word	0x08002344
 80022f4:	08002348 	.word	0x08002348

080022f8 <memset>:
 80022f8:	0003      	movs	r3, r0
 80022fa:	1882      	adds	r2, r0, r2
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d100      	bne.n	8002302 <memset+0xa>
 8002300:	4770      	bx	lr
 8002302:	7019      	strb	r1, [r3, #0]
 8002304:	3301      	adds	r3, #1
 8002306:	e7f9      	b.n	80022fc <memset+0x4>

08002308 <_init>:
 8002308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800230e:	bc08      	pop	{r3}
 8002310:	469e      	mov	lr, r3
 8002312:	4770      	bx	lr

08002314 <_fini>:
 8002314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800231a:	bc08      	pop	{r3}
 800231c:	469e      	mov	lr, r3
 800231e:	4770      	bx	lr
