
SeniorDesignTestCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d50  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003e10  08003e10  00013e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e2c  08003e2c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e2c  08003e2c  00013e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e34  08003e34  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e34  08003e34  00013e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e38  08003e38  00013e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000000c  08003e48  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08003e48  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008dd7  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001801  00000000  00000000  00028e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000868  00000000  00000000  0002a610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b0  00000000  00000000  0002ae78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010860  00000000  00000000  0002b628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008d2e  00000000  00000000  0003be88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000638a3  00000000  00000000  00044bb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a8459  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e0c  00000000  00000000  000a84ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003df8 	.word	0x08003df8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003df8 	.word	0x08003df8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <NRF24_DelayMicroSeconds>:
//static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80004a8:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <NRF24_DelayMicroSeconds+0x38>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	490a      	ldr	r1, [pc, #40]	; (80004d8 <NRF24_DelayMicroSeconds+0x3c>)
 80004ae:	0018      	movs	r0, r3
 80004b0:	f7ff fe2a 	bl	8000108 <__udivsi3>
 80004b4:	0003      	movs	r3, r0
 80004b6:	001a      	movs	r2, r3
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	4353      	muls	r3, r2
 80004bc:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	1e5a      	subs	r2, r3, #1
 80004c4:	60fa      	str	r2, [r7, #12]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d1fa      	bne.n	80004c0 <NRF24_DelayMicroSeconds+0x24>
}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	46c0      	nop			; (mov r8, r8)
 80004ce:	46bd      	mov	sp, r7
 80004d0:	b004      	add	sp, #16
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000000 	.word	0x20000000
 80004d8:	002dc6c0 	.word	0x002dc6c0

080004dc <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d008      	beq.n	80004fc <NRF24_csn+0x20>
 80004ea:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <NRF24_csn+0x38>)
 80004ec:	6818      	ldr	r0, [r3, #0]
 80004ee:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <NRF24_csn+0x3c>)
 80004f0:	881b      	ldrh	r3, [r3, #0]
 80004f2:	2201      	movs	r2, #1
 80004f4:	0019      	movs	r1, r3
 80004f6:	f002 f8a6 	bl	8002646 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80004fa:	e007      	b.n	800050c <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <NRF24_csn+0x38>)
 80004fe:	6818      	ldr	r0, [r3, #0]
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <NRF24_csn+0x3c>)
 8000502:	881b      	ldrh	r3, [r3, #0]
 8000504:	2200      	movs	r2, #0
 8000506:	0019      	movs	r1, r3
 8000508:	f002 f89d 	bl	8002646 <HAL_GPIO_WritePin>
}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	b002      	add	sp, #8
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000030 	.word	0x20000030
 8000518:	20000034 	.word	0x20000034

0800051c <NRF24_read_register>:
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 800051c:	b5b0      	push	{r4, r5, r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	0002      	movs	r2, r0
 8000524:	1dfb      	adds	r3, r7, #7
 8000526:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000528:	2000      	movs	r0, #0
 800052a:	f7ff ffd7 	bl	80004dc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800052e:	1dfb      	adds	r3, r7, #7
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	221f      	movs	r2, #31
 8000534:	4013      	ands	r3, r2
 8000536:	b2da      	uxtb	r2, r3
 8000538:	240c      	movs	r4, #12
 800053a:	193b      	adds	r3, r7, r4
 800053c:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800053e:	1939      	adds	r1, r7, r4
 8000540:	480c      	ldr	r0, [pc, #48]	; (8000574 <NRF24_read_register+0x58>)
 8000542:	2364      	movs	r3, #100	; 0x64
 8000544:	2201      	movs	r2, #1
 8000546:	f002 feaa 	bl	800329e <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 800054a:	193b      	adds	r3, r7, r4
 800054c:	1c59      	adds	r1, r3, #1
 800054e:	4809      	ldr	r0, [pc, #36]	; (8000574 <NRF24_read_register+0x58>)
 8000550:	2364      	movs	r3, #100	; 0x64
 8000552:	2201      	movs	r2, #1
 8000554:	f002 fffa 	bl	800354c <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000558:	250f      	movs	r5, #15
 800055a:	197b      	adds	r3, r7, r5
 800055c:	193a      	adds	r2, r7, r4
 800055e:	7852      	ldrb	r2, [r2, #1]
 8000560:	701a      	strb	r2, [r3, #0]
	//Bring CSN high
	NRF24_csn(1);
 8000562:	2001      	movs	r0, #1
 8000564:	f7ff ffba 	bl	80004dc <NRF24_csn>
	return retData;
 8000568:	197b      	adds	r3, r7, r5
 800056a:	781b      	ldrb	r3, [r3, #0]
}
 800056c:	0018      	movs	r0, r3
 800056e:	46bd      	mov	sp, r7
 8000570:	b004      	add	sp, #16
 8000572:	bdb0      	pop	{r4, r5, r7, pc}
 8000574:	20000038 	.word	0x20000038

08000578 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6039      	str	r1, [r7, #0]
 8000580:	0011      	movs	r1, r2
 8000582:	1dfb      	adds	r3, r7, #7
 8000584:	1c02      	adds	r2, r0, #0
 8000586:	701a      	strb	r2, [r3, #0]
 8000588:	1dbb      	adds	r3, r7, #6
 800058a:	1c0a      	adds	r2, r1, #0
 800058c:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800058e:	2000      	movs	r0, #0
 8000590:	f7ff ffa4 	bl	80004dc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000594:	1dfb      	adds	r3, r7, #7
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	221f      	movs	r2, #31
 800059a:	4013      	ands	r3, r2
 800059c:	b2da      	uxtb	r2, r3
 800059e:	210c      	movs	r1, #12
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	701a      	strb	r2, [r3, #0]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	480a      	ldr	r0, [pc, #40]	; (80005d0 <NRF24_read_registerN+0x58>)
 80005a8:	2364      	movs	r3, #100	; 0x64
 80005aa:	2201      	movs	r2, #1
 80005ac:	f002 fe77 	bl	800329e <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80005b0:	1dbb      	adds	r3, r7, #6
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	b29a      	uxth	r2, r3
 80005b6:	6839      	ldr	r1, [r7, #0]
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <NRF24_read_registerN+0x58>)
 80005ba:	2364      	movs	r3, #100	; 0x64
 80005bc:	f002 ffc6 	bl	800354c <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80005c0:	2001      	movs	r0, #1
 80005c2:	f7ff ff8b 	bl	80004dc <NRF24_csn>
}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b004      	add	sp, #16
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	20000038 	.word	0x20000038

080005d4 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	0002      	movs	r2, r0
 80005dc:	1dfb      	adds	r3, r7, #7
 80005de:	701a      	strb	r2, [r3, #0]
 80005e0:	1dbb      	adds	r3, r7, #6
 80005e2:	1c0a      	adds	r2, r1, #0
 80005e4:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80005e6:	2000      	movs	r0, #0
 80005e8:	f7ff ff78 	bl	80004dc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80005ec:	1dfb      	adds	r3, r7, #7
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2220      	movs	r2, #32
 80005f2:	4313      	orrs	r3, r2
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	210c      	movs	r1, #12
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	701a      	strb	r2, [r3, #0]
	spiBuf[1] = value;
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	1dba      	adds	r2, r7, #6
 8000600:	7812      	ldrb	r2, [r2, #0]
 8000602:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000604:	1879      	adds	r1, r7, r1
 8000606:	4806      	ldr	r0, [pc, #24]	; (8000620 <NRF24_write_register+0x4c>)
 8000608:	2364      	movs	r3, #100	; 0x64
 800060a:	2202      	movs	r2, #2
 800060c:	f002 fe47 	bl	800329e <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000610:	2001      	movs	r0, #1
 8000612:	f7ff ff63 	bl	80004dc <NRF24_csn>
}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	46bd      	mov	sp, r7
 800061a:	b004      	add	sp, #16
 800061c:	bd80      	pop	{r7, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	20000038 	.word	0x20000038

08000624 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6039      	str	r1, [r7, #0]
 800062c:	0011      	movs	r1, r2
 800062e:	1dfb      	adds	r3, r7, #7
 8000630:	1c02      	adds	r2, r0, #0
 8000632:	701a      	strb	r2, [r3, #0]
 8000634:	1dbb      	adds	r3, r7, #6
 8000636:	1c0a      	adds	r2, r1, #0
 8000638:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800063a:	2000      	movs	r0, #0
 800063c:	f7ff ff4e 	bl	80004dc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000640:	1dfb      	adds	r3, r7, #7
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2220      	movs	r2, #32
 8000646:	4313      	orrs	r3, r2
 8000648:	b2da      	uxtb	r2, r3
 800064a:	210c      	movs	r1, #12
 800064c:	187b      	adds	r3, r7, r1
 800064e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000650:	1879      	adds	r1, r7, r1
 8000652:	480a      	ldr	r0, [pc, #40]	; (800067c <NRF24_write_registerN+0x58>)
 8000654:	2364      	movs	r3, #100	; 0x64
 8000656:	2201      	movs	r2, #1
 8000658:	f002 fe21 	bl	800329e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800065c:	1dbb      	adds	r3, r7, #6
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	b29a      	uxth	r2, r3
 8000662:	6839      	ldr	r1, [r7, #0]
 8000664:	4805      	ldr	r0, [pc, #20]	; (800067c <NRF24_write_registerN+0x58>)
 8000666:	2364      	movs	r3, #100	; 0x64
 8000668:	f002 fe19 	bl	800329e <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800066c:	2001      	movs	r0, #1
 800066e:	f7ff ff35 	bl	80004dc <NRF24_csn>
}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	b004      	add	sp, #16
 8000678:	bd80      	pop	{r7, pc}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	20000038 	.word	0x20000038

08000680 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	000a      	movs	r2, r1
 800068a:	1cfb      	adds	r3, r7, #3
 800068c:	701a      	strb	r2, [r3, #0]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 800068e:	2000      	movs	r0, #0
 8000690:	f7ff ff24 	bl	80004dc <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8000694:	210f      	movs	r1, #15
 8000696:	187b      	adds	r3, r7, r1
 8000698:	22a0      	movs	r2, #160	; 0xa0
 800069a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 800069c:	1879      	adds	r1, r7, r1
 800069e:	480a      	ldr	r0, [pc, #40]	; (80006c8 <NRF24_write_payload+0x48>)
 80006a0:	2364      	movs	r3, #100	; 0x64
 80006a2:	2201      	movs	r2, #1
 80006a4:	f002 fdfb 	bl	800329e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 80006a8:	1cfb      	adds	r3, r7, #3
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	6879      	ldr	r1, [r7, #4]
 80006b0:	4805      	ldr	r0, [pc, #20]	; (80006c8 <NRF24_write_payload+0x48>)
 80006b2:	2364      	movs	r3, #100	; 0x64
 80006b4:	f002 fdf3 	bl	800329e <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80006b8:	2001      	movs	r0, #1
 80006ba:	f7ff ff0f 	bl	80004dc <NRF24_csn>
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b004      	add	sp, #16
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	20000038 	.word	0x20000038

080006cc <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	000a      	movs	r2, r1
 80006d6:	1cfb      	adds	r3, r7, #3
 80006d8:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80006da:	f000 fa63 	bl	8000ba4 <NRF24_getPayloadSize>
 80006de:	0003      	movs	r3, r0
 80006e0:	001a      	movs	r2, r3
 80006e2:	1cfb      	adds	r3, r7, #3
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d304      	bcc.n	80006f4 <NRF24_read_payload+0x28>
 80006ea:	f000 fa5b 	bl	8000ba4 <NRF24_getPayloadSize>
 80006ee:	0003      	movs	r3, r0
 80006f0:	001a      	movs	r2, r3
 80006f2:	e001      	b.n	80006f8 <NRF24_read_payload+0x2c>
 80006f4:	1cfb      	adds	r3, r7, #3
 80006f6:	781a      	ldrb	r2, [r3, #0]
 80006f8:	240f      	movs	r4, #15
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	701a      	strb	r2, [r3, #0]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80006fe:	2000      	movs	r0, #0
 8000700:	f7ff feec 	bl	80004dc <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8000704:	210e      	movs	r1, #14
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2261      	movs	r2, #97	; 0x61
 800070a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 800070c:	1879      	adds	r1, r7, r1
 800070e:	480a      	ldr	r0, [pc, #40]	; (8000738 <NRF24_read_payload+0x6c>)
 8000710:	2364      	movs	r3, #100	; 0x64
 8000712:	2201      	movs	r2, #1
 8000714:	f002 fdc3 	bl	800329e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8000718:	193b      	adds	r3, r7, r4
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	b29a      	uxth	r2, r3
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	4805      	ldr	r0, [pc, #20]	; (8000738 <NRF24_read_payload+0x6c>)
 8000722:	2364      	movs	r3, #100	; 0x64
 8000724:	f002 ff12 	bl	800354c <HAL_SPI_Receive>
	NRF24_csn(1);
 8000728:	2001      	movs	r0, #1
 800072a:	f7ff fed7 	bl	80004dc <NRF24_csn>
}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	b005      	add	sp, #20
 8000734:	bd90      	pop	{r4, r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	20000038 	.word	0x20000038

0800073c <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000740:	21ff      	movs	r1, #255	; 0xff
 8000742:	20e1      	movs	r0, #225	; 0xe1
 8000744:	f7ff ff46 	bl	80005d4 <NRF24_write_register>
}
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000752:	21ff      	movs	r1, #255	; 0xff
 8000754:	20e2      	movs	r0, #226	; 0xe2
 8000756:	f7ff ff3d 	bl	80005d4 <NRF24_write_register>
}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000766:	1dfc      	adds	r4, r7, #7
 8000768:	2007      	movs	r0, #7
 800076a:	f7ff fed7 	bl	800051c <NRF24_read_register>
 800076e:	0003      	movs	r3, r0
 8000770:	7023      	strb	r3, [r4, #0]
	return statReg;
 8000772:	1dfb      	adds	r3, r7, #7
 8000774:	781b      	ldrb	r3, [r3, #0]
}
 8000776:	0018      	movs	r0, r3
 8000778:	46bd      	mov	sp, r7
 800077a:	b003      	add	sp, #12
 800077c:	bd90      	pop	{r4, r7, pc}
	...

08000780 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000780:	b082      	sub	sp, #8
 8000782:	b590      	push	{r4, r7, lr}
 8000784:	46c6      	mov	lr, r8
 8000786:	b500      	push	{lr}
 8000788:	b084      	sub	sp, #16
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
 800078e:	0008      	movs	r0, r1
 8000790:	0011      	movs	r1, r2
 8000792:	2204      	movs	r2, #4
 8000794:	2418      	movs	r4, #24
 8000796:	46a4      	mov	ip, r4
 8000798:	2408      	movs	r4, #8
 800079a:	46a0      	mov	r8, r4
 800079c:	44b8      	add	r8, r7
 800079e:	44c4      	add	ip, r8
 80007a0:	4462      	add	r2, ip
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	1cbb      	adds	r3, r7, #2
 80007a6:	1c02      	adds	r2, r0, #0
 80007a8:	801a      	strh	r2, [r3, #0]
 80007aa:	003b      	movs	r3, r7
 80007ac:	1c0a      	adds	r2, r1, #0
 80007ae:	801a      	strh	r2, [r3, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80007b0:	4a71      	ldr	r2, [pc, #452]	; (8000978 <NRF24_begin+0x1f8>)
 80007b2:	2304      	movs	r3, #4
 80007b4:	2118      	movs	r1, #24
 80007b6:	468c      	mov	ip, r1
 80007b8:	2108      	movs	r1, #8
 80007ba:	4688      	mov	r8, r1
 80007bc:	44b8      	add	r8, r7
 80007be:	44c4      	add	ip, r8
 80007c0:	4463      	add	r3, ip
 80007c2:	0010      	movs	r0, r2
 80007c4:	0019      	movs	r1, r3
 80007c6:	2358      	movs	r3, #88	; 0x58
 80007c8:	001a      	movs	r2, r3
 80007ca:	f003 fb03 	bl	8003dd4 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 80007ce:	4b6b      	ldr	r3, [pc, #428]	; (800097c <NRF24_begin+0x1fc>)
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	601a      	str	r2, [r3, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 80007d4:	4b6a      	ldr	r3, [pc, #424]	; (8000980 <NRF24_begin+0x200>)
 80007d6:	1cba      	adds	r2, r7, #2
 80007d8:	8812      	ldrh	r2, [r2, #0]
 80007da:	801a      	strh	r2, [r3, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 80007dc:	4b69      	ldr	r3, [pc, #420]	; (8000984 <NRF24_begin+0x204>)
 80007de:	003a      	movs	r2, r7
 80007e0:	8812      	ldrh	r2, [r2, #0]
 80007e2:	801a      	strh	r2, [r3, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 80007e4:	2001      	movs	r0, #1
 80007e6:	f7ff fe79 	bl	80004dc <NRF24_csn>
	//NRF24_ce(0);
	//5 ms initial delay
	HAL_Delay(5);
 80007ea:	2005      	movs	r0, #5
 80007ec:	f001 f97e 	bl	8001aec <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 80007f0:	2108      	movs	r1, #8
 80007f2:	2000      	movs	r0, #0
 80007f4:	f7ff feee 	bl	80005d4 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80007f8:	213f      	movs	r1, #63	; 0x3f
 80007fa:	2001      	movs	r0, #1
 80007fc:	f7ff feea 	bl	80005d4 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000800:	2103      	movs	r1, #3
 8000802:	2002      	movs	r0, #2
 8000804:	f7ff fee6 	bl	80005d4 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000808:	2103      	movs	r1, #3
 800080a:	2003      	movs	r0, #3
 800080c:	f7ff fee2 	bl	80005d4 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000810:	2103      	movs	r1, #3
 8000812:	2004      	movs	r0, #4
 8000814:	f7ff fede 	bl	80005d4 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000818:	2102      	movs	r1, #2
 800081a:	2005      	movs	r0, #5
 800081c:	f7ff feda 	bl	80005d4 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000820:	210f      	movs	r1, #15
 8000822:	2006      	movs	r0, #6
 8000824:	f7ff fed6 	bl	80005d4 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000828:	210e      	movs	r1, #14
 800082a:	2007      	movs	r0, #7
 800082c:	f7ff fed2 	bl	80005d4 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000830:	2100      	movs	r1, #0
 8000832:	2008      	movs	r0, #8
 8000834:	f7ff fece 	bl	80005d4 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000838:	2100      	movs	r1, #0
 800083a:	2009      	movs	r0, #9
 800083c:	f7ff feca 	bl	80005d4 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000840:	2108      	movs	r1, #8
 8000842:	187b      	adds	r3, r7, r1
 8000844:	22e7      	movs	r2, #231	; 0xe7
 8000846:	711a      	strb	r2, [r3, #4]
 8000848:	187b      	adds	r3, r7, r1
 800084a:	22e7      	movs	r2, #231	; 0xe7
 800084c:	70da      	strb	r2, [r3, #3]
 800084e:	187b      	adds	r3, r7, r1
 8000850:	22e7      	movs	r2, #231	; 0xe7
 8000852:	709a      	strb	r2, [r3, #2]
 8000854:	187b      	adds	r3, r7, r1
 8000856:	22e7      	movs	r2, #231	; 0xe7
 8000858:	705a      	strb	r2, [r3, #1]
 800085a:	187b      	adds	r3, r7, r1
 800085c:	22e7      	movs	r2, #231	; 0xe7
 800085e:	701a      	strb	r2, [r3, #0]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000860:	000c      	movs	r4, r1
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2205      	movs	r2, #5
 8000866:	0019      	movs	r1, r3
 8000868:	200a      	movs	r0, #10
 800086a:	f7ff fedb 	bl	8000624 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 800086e:	0021      	movs	r1, r4
 8000870:	187b      	adds	r3, r7, r1
 8000872:	22c2      	movs	r2, #194	; 0xc2
 8000874:	711a      	strb	r2, [r3, #4]
 8000876:	187b      	adds	r3, r7, r1
 8000878:	22c2      	movs	r2, #194	; 0xc2
 800087a:	70da      	strb	r2, [r3, #3]
 800087c:	187b      	adds	r3, r7, r1
 800087e:	22c2      	movs	r2, #194	; 0xc2
 8000880:	709a      	strb	r2, [r3, #2]
 8000882:	187b      	adds	r3, r7, r1
 8000884:	22c2      	movs	r2, #194	; 0xc2
 8000886:	705a      	strb	r2, [r3, #1]
 8000888:	187b      	adds	r3, r7, r1
 800088a:	22c2      	movs	r2, #194	; 0xc2
 800088c:	701a      	strb	r2, [r3, #0]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800088e:	000c      	movs	r4, r1
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2205      	movs	r2, #5
 8000894:	0019      	movs	r1, r3
 8000896:	200b      	movs	r0, #11
 8000898:	f7ff fec4 	bl	8000624 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 800089c:	21c3      	movs	r1, #195	; 0xc3
 800089e:	200c      	movs	r0, #12
 80008a0:	f7ff fe98 	bl	80005d4 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80008a4:	21c4      	movs	r1, #196	; 0xc4
 80008a6:	200d      	movs	r0, #13
 80008a8:	f7ff fe94 	bl	80005d4 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80008ac:	21c5      	movs	r1, #197	; 0xc5
 80008ae:	200e      	movs	r0, #14
 80008b0:	f7ff fe90 	bl	80005d4 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80008b4:	21c6      	movs	r1, #198	; 0xc6
 80008b6:	200f      	movs	r0, #15
 80008b8:	f7ff fe8c 	bl	80005d4 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80008bc:	0021      	movs	r1, r4
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	22e7      	movs	r2, #231	; 0xe7
 80008c2:	711a      	strb	r2, [r3, #4]
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	22e7      	movs	r2, #231	; 0xe7
 80008c8:	70da      	strb	r2, [r3, #3]
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	22e7      	movs	r2, #231	; 0xe7
 80008ce:	709a      	strb	r2, [r3, #2]
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	22e7      	movs	r2, #231	; 0xe7
 80008d4:	705a      	strb	r2, [r3, #1]
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	22e7      	movs	r2, #231	; 0xe7
 80008da:	701a      	strb	r2, [r3, #0]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2205      	movs	r2, #5
 80008e0:	0019      	movs	r1, r3
 80008e2:	2010      	movs	r0, #16
 80008e4:	f7ff fe9e 	bl	8000624 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80008e8:	2100      	movs	r1, #0
 80008ea:	2011      	movs	r0, #17
 80008ec:	f7ff fe72 	bl	80005d4 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 80008f0:	2100      	movs	r1, #0
 80008f2:	2012      	movs	r0, #18
 80008f4:	f7ff fe6e 	bl	80005d4 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80008f8:	2100      	movs	r1, #0
 80008fa:	2013      	movs	r0, #19
 80008fc:	f7ff fe6a 	bl	80005d4 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000900:	2100      	movs	r1, #0
 8000902:	2014      	movs	r0, #20
 8000904:	f7ff fe66 	bl	80005d4 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000908:	2100      	movs	r1, #0
 800090a:	2015      	movs	r0, #21
 800090c:	f7ff fe62 	bl	80005d4 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000910:	2100      	movs	r1, #0
 8000912:	2016      	movs	r0, #22
 8000914:	f7ff fe5e 	bl	80005d4 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000918:	f000 fb84 	bl	8001024 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800091c:	2100      	movs	r1, #0
 800091e:	201c      	movs	r0, #28
 8000920:	f7ff fe58 	bl	80005d4 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000924:	2100      	movs	r1, #0
 8000926:	201d      	movs	r0, #29
 8000928:	f7ff fe54 	bl	80005d4 <NRF24_write_register>
	//printRadioSettings();
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 800092c:	210f      	movs	r1, #15
 800092e:	200f      	movs	r0, #15
 8000930:	f000 f8e2 	bl	8000af8 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000934:	2003      	movs	r0, #3
 8000936:	f000 f9e2 	bl	8000cfe <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 800093a:	2001      	movs	r0, #1
 800093c:	f000 fa30 	bl	8000da0 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000940:	2002      	movs	r0, #2
 8000942:	f000 fa89 	bl	8000e58 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000946:	f000 f9a7 	bl	8000c98 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 800094a:	2020      	movs	r0, #32
 800094c:	f000 f90e 	bl	8000b6c <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000950:	f000 fb5f 	bl	8001012 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000954:	204c      	movs	r0, #76	; 0x4c
 8000956:	f000 f8ed 	bl	8000b34 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 800095a:	f7ff feef 	bl	800073c <NRF24_flush_tx>
	NRF24_flush_rx();
 800095e:	f7ff fef6 	bl	800074e <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000962:	f000 fab1 	bl	8000ec8 <NRF24_powerDown>
	
}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	b004      	add	sp, #16
 800096c:	bc80      	pop	{r7}
 800096e:	46b8      	mov	r8, r7
 8000970:	bc90      	pop	{r4, r7}
 8000972:	bc08      	pop	{r3}
 8000974:	b002      	add	sp, #8
 8000976:	4718      	bx	r3
 8000978:	20000038 	.word	0x20000038
 800097c:	20000030 	.word	0x20000030
 8000980:	20000034 	.word	0x20000034
 8000984:	20000036 	.word	0x20000036

08000988 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	//NRF24_ce(0);
	NRF24_flush_tx();
 800098c:	f7ff fed6 	bl	800073c <NRF24_flush_tx>
	NRF24_flush_rx();
 8000990:	f7ff fedd 	bl	800074e <NRF24_flush_rx>
}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 800099c:	b5b0      	push	{r4, r5, r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	000a      	movs	r2, r1
 80009a6:	1cfb      	adds	r3, r7, #3
 80009a8:	701a      	strb	r2, [r3, #0]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 80009aa:	f000 fb32 	bl	8001012 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 80009ae:	1cfb      	adds	r3, r7, #3
 80009b0:	781a      	ldrb	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	0011      	movs	r1, r2
 80009b6:	0018      	movs	r0, r3
 80009b8:	f000 fad1 	bl	8000f5e <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 80009bc:	f001 f88c 	bl	8001ad8 <HAL_GetTick>
 80009c0:	0003      	movs	r3, r0
 80009c2:	617b      	str	r3, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 80009c4:	230a      	movs	r3, #10
 80009c6:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 80009c8:	230d      	movs	r3, #13
 80009ca:	18fb      	adds	r3, r7, r3
 80009cc:	2201      	movs	r2, #1
 80009ce:	0019      	movs	r1, r3
 80009d0:	2008      	movs	r0, #8
 80009d2:	f7ff fdd1 	bl	8000578 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 80009d6:	250f      	movs	r5, #15
 80009d8:	197c      	adds	r4, r7, r5
 80009da:	f7ff fec1 	bl	8000760 <NRF24_get_status>
 80009de:	0003      	movs	r3, r0
 80009e0:	7023      	strb	r3, [r4, #0]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 80009e2:	197b      	adds	r3, r7, r5
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2230      	movs	r2, #48	; 0x30
 80009e8:	4013      	ands	r3, r2
 80009ea:	d107      	bne.n	80009fc <NRF24_write+0x60>
 80009ec:	f001 f874 	bl	8001ad8 <HAL_GetTick>
 80009f0:	0002      	movs	r2, r0
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d8e5      	bhi.n	80009c8 <NRF24_write+0x2c>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 80009fc:	4a10      	ldr	r2, [pc, #64]	; (8000a40 <NRF24_write+0xa4>)
 80009fe:	230b      	movs	r3, #11
 8000a00:	18f9      	adds	r1, r7, r3
 8000a02:	240c      	movs	r4, #12
 8000a04:	193b      	adds	r3, r7, r4
 8000a06:	0018      	movs	r0, r3
 8000a08:	f000 fad0 	bl	8000fac <NRF24_whatHappened>
	retStatus = tx_ok;
 8000a0c:	230e      	movs	r3, #14
 8000a0e:	18fb      	adds	r3, r7, r3
 8000a10:	193a      	adds	r2, r7, r4
 8000a12:	7812      	ldrb	r2, [r2, #0]
 8000a14:	701a      	strb	r2, [r3, #0]
	if ( ack_payload_available )
 8000a16:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <NRF24_write+0xa4>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d005      	beq.n	8000a2a <NRF24_write+0x8e>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8000a1e:	f000 f8cb 	bl	8000bb8 <NRF24_getDynamicPayloadSize>
 8000a22:	0003      	movs	r3, r0
 8000a24:	001a      	movs	r2, r3
 8000a26:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <NRF24_write+0xa8>)
 8000a28:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8000a2a:	f000 f80d 	bl	8000a48 <NRF24_available>
	NRF24_flush_tx();
 8000a2e:	f7ff fe85 	bl	800073c <NRF24_flush_tx>
	return retStatus;
 8000a32:	230e      	movs	r3, #14
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	781b      	ldrb	r3, [r3, #0]
}
 8000a38:	0018      	movs	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b006      	add	sp, #24
 8000a3e:	bdb0      	pop	{r4, r5, r7, pc}
 8000a40:	20000028 	.word	0x20000028
 8000a44:	20000029 	.word	0x20000029

08000a48 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f000 fa4d 	bl	8000eec <NRF24_availablePipe>
 8000a52:	0003      	movs	r3, r0
}
 8000a54:	0018      	movs	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000a5a:	b590      	push	{r4, r7, lr}
 8000a5c:	b085      	sub	sp, #20
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
 8000a62:	000a      	movs	r2, r1
 8000a64:	1cfb      	adds	r3, r7, #3
 8000a66:	701a      	strb	r2, [r3, #0]
	NRF24_read_payload( buf, len );
 8000a68:	1cfb      	adds	r3, r7, #3
 8000a6a:	781a      	ldrb	r2, [r3, #0]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	0011      	movs	r1, r2
 8000a70:	0018      	movs	r0, r3
 8000a72:	f7ff fe2b 	bl	80006cc <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000a76:	2017      	movs	r0, #23
 8000a78:	f7ff fd50 	bl	800051c <NRF24_read_register>
 8000a7c:	0003      	movs	r3, r0
 8000a7e:	0019      	movs	r1, r3
 8000a80:	240f      	movs	r4, #15
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	2201      	movs	r2, #1
 8000a86:	400a      	ands	r2, r1
 8000a88:	701a      	strb	r2, [r3, #0]
	NRF24_flush_rx();
 8000a8a:	f7ff fe60 	bl	800074e <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000a8e:	f000 f893 	bl	8000bb8 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	1e5a      	subs	r2, r3, #1
 8000a98:	4193      	sbcs	r3, r2
 8000a9a:	b2db      	uxtb	r3, r3
}
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b005      	add	sp, #20
 8000aa2:	bd90      	pop	{r4, r7, pc}

08000aa4 <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6038      	str	r0, [r7, #0]
 8000aac:	6079      	str	r1, [r7, #4]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000aae:	003b      	movs	r3, r7
 8000ab0:	2205      	movs	r2, #5
 8000ab2:	0019      	movs	r1, r3
 8000ab4:	200a      	movs	r0, #10
 8000ab6:	f7ff fdb5 	bl	8000624 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000aba:	003b      	movs	r3, r7
 8000abc:	2205      	movs	r2, #5
 8000abe:	0019      	movs	r1, r3
 8000ac0:	2010      	movs	r0, #16
 8000ac2:	f7ff fdaf 	bl	8000624 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8000ac6:	210f      	movs	r1, #15
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	2220      	movs	r2, #32
 8000acc:	701a      	strb	r2, [r3, #0]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <NRF24_openWritingPipe+0x50>)
 8000ad0:	781a      	ldrb	r2, [r3, #0]
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	1c10      	adds	r0, r2, #0
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	b2d9      	uxtb	r1, r3
 8000ada:	b2c2      	uxtb	r2, r0
 8000adc:	4291      	cmp	r1, r2
 8000ade:	d900      	bls.n	8000ae2 <NRF24_openWritingPipe+0x3e>
 8000ae0:	1c03      	adds	r3, r0, #0
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	0019      	movs	r1, r3
 8000ae6:	2011      	movs	r0, #17
 8000ae8:	f7ff fd74 	bl	80005d4 <NRF24_write_register>
}
 8000aec:	46c0      	nop			; (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b004      	add	sp, #16
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	2000002a 	.word	0x2000002a

08000af8 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	0002      	movs	r2, r0
 8000b00:	1dfb      	adds	r3, r7, #7
 8000b02:	701a      	strb	r2, [r3, #0]
 8000b04:	1dbb      	adds	r3, r7, #6
 8000b06:	1c0a      	adds	r2, r1, #0
 8000b08:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000b0a:	1dfb      	adds	r3, r7, #7
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	011b      	lsls	r3, r3, #4
 8000b10:	b25a      	sxtb	r2, r3
 8000b12:	1dbb      	adds	r3, r7, #6
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	b25b      	sxtb	r3, r3
 8000b18:	210f      	movs	r1, #15
 8000b1a:	400b      	ands	r3, r1
 8000b1c:	b25b      	sxtb	r3, r3
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	b25b      	sxtb	r3, r3
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	0019      	movs	r1, r3
 8000b26:	2004      	movs	r0, #4
 8000b28:	f7ff fd54 	bl	80005d4 <NRF24_write_register>
}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b002      	add	sp, #8
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	0002      	movs	r2, r0
 8000b3c:	1dfb      	adds	r3, r7, #7
 8000b3e:	701a      	strb	r2, [r3, #0]
	const uint8_t max_channel = 127;
 8000b40:	210f      	movs	r1, #15
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	227f      	movs	r2, #127	; 0x7f
 8000b46:	701a      	strb	r2, [r3, #0]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	1dfa      	adds	r2, r7, #7
 8000b4c:	7810      	ldrb	r0, [r2, #0]
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	b2d9      	uxtb	r1, r3
 8000b52:	b2c2      	uxtb	r2, r0
 8000b54:	4291      	cmp	r1, r2
 8000b56:	d900      	bls.n	8000b5a <NRF24_setChannel+0x26>
 8000b58:	1c03      	adds	r3, r0, #0
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	0019      	movs	r1, r3
 8000b5e:	2005      	movs	r0, #5
 8000b60:	f7ff fd38 	bl	80005d4 <NRF24_write_register>
}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b004      	add	sp, #16
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	0002      	movs	r2, r0
 8000b74:	1dfb      	adds	r3, r7, #7
 8000b76:	701a      	strb	r2, [r3, #0]
	const uint8_t max_payload_size = 32;
 8000b78:	210f      	movs	r1, #15
 8000b7a:	187b      	adds	r3, r7, r1
 8000b7c:	2220      	movs	r2, #32
 8000b7e:	701a      	strb	r2, [r3, #0]
  payload_size = MIN(size,max_payload_size);
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	1dfa      	adds	r2, r7, #7
 8000b84:	7810      	ldrb	r0, [r2, #0]
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	b2d9      	uxtb	r1, r3
 8000b8a:	b2c2      	uxtb	r2, r0
 8000b8c:	4291      	cmp	r1, r2
 8000b8e:	d900      	bls.n	8000b92 <NRF24_setPayloadSize+0x26>
 8000b90:	1c03      	adds	r3, r0, #0
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	4b02      	ldr	r3, [pc, #8]	; (8000ba0 <NRF24_setPayloadSize+0x34>)
 8000b96:	701a      	strb	r2, [r3, #0]
}
 8000b98:	46c0      	nop			; (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b004      	add	sp, #16
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	2000002a 	.word	0x2000002a

08000ba4 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	return payload_size;
 8000ba8:	4b02      	ldr	r3, [pc, #8]	; (8000bb4 <NRF24_getPayloadSize+0x10>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
}
 8000bac:	0018      	movs	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	2000002a 	.word	0x2000002a

08000bb8 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000bbc:	2060      	movs	r0, #96	; 0x60
 8000bbe:	f7ff fcad 	bl	800051c <NRF24_read_register>
 8000bc2:	0003      	movs	r3, r0
}
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8000bce:	201d      	movs	r0, #29
 8000bd0:	f7ff fca4 	bl	800051c <NRF24_read_register>
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	001a      	movs	r2, r3
 8000bd8:	2306      	movs	r3, #6
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	0019      	movs	r1, r3
 8000be0:	201d      	movs	r0, #29
 8000be2:	f7ff fcf7 	bl	80005d4 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000be6:	201d      	movs	r0, #29
 8000be8:	f7ff fc98 	bl	800051c <NRF24_read_register>
 8000bec:	1e03      	subs	r3, r0, #0
 8000bee:	d10d      	bne.n	8000c0c <NRF24_enableAckPayload+0x42>
	{
		NRF24_ACTIVATE_cmd();
 8000bf0:	f000 fa18 	bl	8001024 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8000bf4:	201d      	movs	r0, #29
 8000bf6:	f7ff fc91 	bl	800051c <NRF24_read_register>
 8000bfa:	0003      	movs	r3, r0
 8000bfc:	001a      	movs	r2, r3
 8000bfe:	2306      	movs	r3, #6
 8000c00:	4313      	orrs	r3, r2
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	0019      	movs	r1, r3
 8000c06:	201d      	movs	r0, #29
 8000c08:	f7ff fce4 	bl	80005d4 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000c0c:	201c      	movs	r0, #28
 8000c0e:	f7ff fc85 	bl	800051c <NRF24_read_register>
 8000c12:	0003      	movs	r3, r0
 8000c14:	001a      	movs	r2, r3
 8000c16:	2303      	movs	r3, #3
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	0019      	movs	r1, r3
 8000c1e:	201c      	movs	r0, #28
 8000c20:	f7ff fcd8 	bl	80005d4 <NRF24_write_register>
}
 8000c24:	46c0      	nop			; (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000c30:	201d      	movs	r0, #29
 8000c32:	f7ff fc73 	bl	800051c <NRF24_read_register>
 8000c36:	0003      	movs	r3, r0
 8000c38:	001a      	movs	r2, r3
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	0019      	movs	r1, r3
 8000c42:	201d      	movs	r0, #29
 8000c44:	f7ff fcc6 	bl	80005d4 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000c48:	201d      	movs	r0, #29
 8000c4a:	f7ff fc67 	bl	800051c <NRF24_read_register>
 8000c4e:	1e03      	subs	r3, r0, #0
 8000c50:	d10d      	bne.n	8000c6e <NRF24_enableDynamicPayloads+0x42>
	{
		NRF24_ACTIVATE_cmd();
 8000c52:	f000 f9e7 	bl	8001024 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000c56:	201d      	movs	r0, #29
 8000c58:	f7ff fc60 	bl	800051c <NRF24_read_register>
 8000c5c:	0003      	movs	r3, r0
 8000c5e:	001a      	movs	r2, r3
 8000c60:	2304      	movs	r3, #4
 8000c62:	4313      	orrs	r3, r2
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	0019      	movs	r1, r3
 8000c68:	201d      	movs	r0, #29
 8000c6a:	f7ff fcb3 	bl	80005d4 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000c6e:	201c      	movs	r0, #28
 8000c70:	f7ff fc54 	bl	800051c <NRF24_read_register>
 8000c74:	0003      	movs	r3, r0
 8000c76:	001a      	movs	r2, r3
 8000c78:	233f      	movs	r3, #63	; 0x3f
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	0019      	movs	r1, r3
 8000c80:	201c      	movs	r0, #28
 8000c82:	f7ff fca7 	bl	80005d4 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8000c86:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <NRF24_enableDynamicPayloads+0x68>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	701a      	strb	r2, [r3, #0]
	
}
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	2000002b 	.word	0x2000002b

08000c98 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000c9c:	201d      	movs	r0, #29
 8000c9e:	f7ff fc3d 	bl	800051c <NRF24_read_register>
 8000ca2:	0003      	movs	r3, r0
 8000ca4:	001a      	movs	r2, r3
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	439a      	bics	r2, r3
 8000caa:	0013      	movs	r3, r2
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	0019      	movs	r1, r3
 8000cb0:	201d      	movs	r0, #29
 8000cb2:	f7ff fc8f 	bl	80005d4 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	201c      	movs	r0, #28
 8000cba:	f7ff fc8b 	bl	80005d4 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000cbe:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <NRF24_disableDynamicPayloads+0x34>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	701a      	strb	r2, [r3, #0]
}
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	2000002b 	.word	0x2000002b

08000cd0 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	0002      	movs	r2, r0
 8000cd8:	1dfb      	adds	r3, r7, #7
 8000cda:	701a      	strb	r2, [r3, #0]
	if ( enable )
 8000cdc:	1dfb      	adds	r3, r7, #7
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d004      	beq.n	8000cee <NRF24_setAutoAck+0x1e>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000ce4:	213f      	movs	r1, #63	; 0x3f
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f7ff fc74 	bl	80005d4 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000cec:	e003      	b.n	8000cf6 <NRF24_setAutoAck+0x26>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000cee:	2100      	movs	r1, #0
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f7ff fc6f 	bl	80005d4 <NRF24_write_register>
}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b002      	add	sp, #8
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000cfe:	b5b0      	push	{r4, r5, r7, lr}
 8000d00:	b084      	sub	sp, #16
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	0002      	movs	r2, r0
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	701a      	strb	r2, [r3, #0]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000d0a:	250f      	movs	r5, #15
 8000d0c:	197c      	adds	r4, r7, r5
 8000d0e:	2006      	movs	r0, #6
 8000d10:	f7ff fc04 	bl	800051c <NRF24_read_register>
 8000d14:	0003      	movs	r3, r0
 8000d16:	7023      	strb	r3, [r4, #0]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000d18:	0028      	movs	r0, r5
 8000d1a:	183b      	adds	r3, r7, r0
 8000d1c:	183a      	adds	r2, r7, r0
 8000d1e:	7812      	ldrb	r2, [r2, #0]
 8000d20:	2106      	movs	r1, #6
 8000d22:	438a      	bics	r2, r1
 8000d24:	701a      	strb	r2, [r3, #0]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000d26:	1dfb      	adds	r3, r7, #7
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b03      	cmp	r3, #3
 8000d2c:	d106      	bne.n	8000d3c <NRF24_setPALevel+0x3e>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000d2e:	183b      	adds	r3, r7, r0
 8000d30:	183a      	adds	r2, r7, r0
 8000d32:	7812      	ldrb	r2, [r2, #0]
 8000d34:	2106      	movs	r1, #6
 8000d36:	430a      	orrs	r2, r1
 8000d38:	701a      	strb	r2, [r3, #0]
 8000d3a:	e026      	b.n	8000d8a <NRF24_setPALevel+0x8c>
  }
  else if ( level == RF24_PA_m6dB )
 8000d3c:	1dfb      	adds	r3, r7, #7
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d107      	bne.n	8000d54 <NRF24_setPALevel+0x56>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000d44:	220f      	movs	r2, #15
 8000d46:	18bb      	adds	r3, r7, r2
 8000d48:	18ba      	adds	r2, r7, r2
 8000d4a:	7812      	ldrb	r2, [r2, #0]
 8000d4c:	2104      	movs	r1, #4
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	701a      	strb	r2, [r3, #0]
 8000d52:	e01a      	b.n	8000d8a <NRF24_setPALevel+0x8c>
  }
  else if ( level == RF24_PA_m12dB )
 8000d54:	1dfb      	adds	r3, r7, #7
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d107      	bne.n	8000d6c <NRF24_setPALevel+0x6e>
  {
    setup |= _BV(RF_PWR_LOW);
 8000d5c:	220f      	movs	r2, #15
 8000d5e:	18bb      	adds	r3, r7, r2
 8000d60:	18ba      	adds	r2, r7, r2
 8000d62:	7812      	ldrb	r2, [r2, #0]
 8000d64:	2102      	movs	r1, #2
 8000d66:	430a      	orrs	r2, r1
 8000d68:	701a      	strb	r2, [r3, #0]
 8000d6a:	e00e      	b.n	8000d8a <NRF24_setPALevel+0x8c>
  }
  else if ( level == RF24_PA_m18dB )
 8000d6c:	1dfb      	adds	r3, r7, #7
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d00a      	beq.n	8000d8a <NRF24_setPALevel+0x8c>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000d74:	1dfb      	adds	r3, r7, #7
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b04      	cmp	r3, #4
 8000d7a:	d106      	bne.n	8000d8a <NRF24_setPALevel+0x8c>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000d7c:	220f      	movs	r2, #15
 8000d7e:	18bb      	adds	r3, r7, r2
 8000d80:	18ba      	adds	r2, r7, r2
 8000d82:	7812      	ldrb	r2, [r2, #0]
 8000d84:	2106      	movs	r1, #6
 8000d86:	430a      	orrs	r2, r1
 8000d88:	701a      	strb	r2, [r3, #0]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000d8a:	230f      	movs	r3, #15
 8000d8c:	18fb      	adds	r3, r7, r3
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	0019      	movs	r1, r3
 8000d92:	2006      	movs	r0, #6
 8000d94:	f7ff fc1e 	bl	80005d4 <NRF24_write_register>
}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b004      	add	sp, #16
 8000d9e:	bdb0      	pop	{r4, r5, r7, pc}

08000da0 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000da0:	b5b0      	push	{r4, r5, r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	0002      	movs	r2, r0
 8000da8:	1dfb      	adds	r3, r7, #7
 8000daa:	701a      	strb	r2, [r3, #0]
	bool result = false;
 8000dac:	230f      	movs	r3, #15
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000db4:	250e      	movs	r5, #14
 8000db6:	197c      	adds	r4, r7, r5
 8000db8:	2006      	movs	r0, #6
 8000dba:	f7ff fbaf 	bl	800051c <NRF24_read_register>
 8000dbe:	0003      	movs	r3, r0
 8000dc0:	7023      	strb	r3, [r4, #0]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000dc2:	4b24      	ldr	r3, [pc, #144]	; (8000e54 <NRF24_setDataRate+0xb4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000dc8:	0028      	movs	r0, r5
 8000dca:	183b      	adds	r3, r7, r0
 8000dcc:	183a      	adds	r2, r7, r0
 8000dce:	7812      	ldrb	r2, [r2, #0]
 8000dd0:	2128      	movs	r1, #40	; 0x28
 8000dd2:	438a      	bics	r2, r1
 8000dd4:	701a      	strb	r2, [r3, #0]
  if( speed == RF24_250KBPS )
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d109      	bne.n	8000df2 <NRF24_setDataRate+0x52>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000dde:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <NRF24_setDataRate+0xb4>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000de4:	183b      	adds	r3, r7, r0
 8000de6:	183a      	adds	r2, r7, r0
 8000de8:	7812      	ldrb	r2, [r2, #0]
 8000dea:	2120      	movs	r1, #32
 8000dec:	430a      	orrs	r2, r1
 8000dee:	701a      	strb	r2, [r3, #0]
 8000df0:	e011      	b.n	8000e16 <NRF24_setDataRate+0x76>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000df2:	1dfb      	adds	r3, r7, #7
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d10a      	bne.n	8000e10 <NRF24_setDataRate+0x70>
    {
      wide_band = true ;
 8000dfa:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <NRF24_setDataRate+0xb4>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000e00:	220e      	movs	r2, #14
 8000e02:	18bb      	adds	r3, r7, r2
 8000e04:	18ba      	adds	r2, r7, r2
 8000e06:	7812      	ldrb	r2, [r2, #0]
 8000e08:	2108      	movs	r1, #8
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	701a      	strb	r2, [r3, #0]
 8000e0e:	e002      	b.n	8000e16 <NRF24_setDataRate+0x76>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000e10:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <NRF24_setDataRate+0xb4>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000e16:	240e      	movs	r4, #14
 8000e18:	193b      	adds	r3, r7, r4
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	0019      	movs	r1, r3
 8000e1e:	2006      	movs	r0, #6
 8000e20:	f7ff fbd8 	bl	80005d4 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000e24:	2006      	movs	r0, #6
 8000e26:	f7ff fb79 	bl	800051c <NRF24_read_register>
 8000e2a:	0003      	movs	r3, r0
 8000e2c:	001a      	movs	r2, r3
 8000e2e:	193b      	adds	r3, r7, r4
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d104      	bne.n	8000e40 <NRF24_setDataRate+0xa0>
  {
    result = true;
 8000e36:	230f      	movs	r3, #15
 8000e38:	18fb      	adds	r3, r7, r3
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	701a      	strb	r2, [r3, #0]
 8000e3e:	e002      	b.n	8000e46 <NRF24_setDataRate+0xa6>
  }
  else
  {
    wide_band = false;
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <NRF24_setDataRate+0xb4>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000e46:	230f      	movs	r3, #15
 8000e48:	18fb      	adds	r3, r7, r3
 8000e4a:	781b      	ldrb	r3, [r3, #0]
}
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b004      	add	sp, #16
 8000e52:	bdb0      	pop	{r4, r5, r7, pc}
 8000e54:	2000002c 	.word	0x2000002c

08000e58 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	0002      	movs	r2, r0
 8000e60:	1dfb      	adds	r3, r7, #7
 8000e62:	701a      	strb	r2, [r3, #0]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000e64:	2000      	movs	r0, #0
 8000e66:	f7ff fb59 	bl	800051c <NRF24_read_register>
 8000e6a:	0003      	movs	r3, r0
 8000e6c:	0019      	movs	r1, r3
 8000e6e:	200f      	movs	r0, #15
 8000e70:	183b      	adds	r3, r7, r0
 8000e72:	220c      	movs	r2, #12
 8000e74:	4391      	bics	r1, r2
 8000e76:	000a      	movs	r2, r1
 8000e78:	701a      	strb	r2, [r3, #0]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000e7a:	1dfb      	adds	r3, r7, #7
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d017      	beq.n	8000eb2 <NRF24_setCRCLength+0x5a>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8000e82:	1dfb      	adds	r3, r7, #7
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d106      	bne.n	8000e98 <NRF24_setCRCLength+0x40>
  {
    config |= _BV(BIT_EN_CRC);
 8000e8a:	183b      	adds	r3, r7, r0
 8000e8c:	183a      	adds	r2, r7, r0
 8000e8e:	7812      	ldrb	r2, [r2, #0]
 8000e90:	2108      	movs	r1, #8
 8000e92:	430a      	orrs	r2, r1
 8000e94:	701a      	strb	r2, [r3, #0]
 8000e96:	e00c      	b.n	8000eb2 <NRF24_setCRCLength+0x5a>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000e98:	200f      	movs	r0, #15
 8000e9a:	183b      	adds	r3, r7, r0
 8000e9c:	183a      	adds	r2, r7, r0
 8000e9e:	7812      	ldrb	r2, [r2, #0]
 8000ea0:	2108      	movs	r1, #8
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	701a      	strb	r2, [r3, #0]
    config |= _BV( BIT_CRCO );
 8000ea6:	183b      	adds	r3, r7, r0
 8000ea8:	183a      	adds	r2, r7, r0
 8000eaa:	7812      	ldrb	r2, [r2, #0]
 8000eac:	2104      	movs	r1, #4
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	701a      	strb	r2, [r3, #0]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000eb2:	230f      	movs	r3, #15
 8000eb4:	18fb      	adds	r3, r7, r3
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	0019      	movs	r1, r3
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f7ff fb8a 	bl	80005d4 <NRF24_write_register>
}
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b004      	add	sp, #16
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f7ff fb25 	bl	800051c <NRF24_read_register>
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	439a      	bics	r2, r3
 8000eda:	0013      	movs	r3, r2
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	0019      	movs	r1, r3
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f7ff fb77 	bl	80005d4 <NRF24_write_register>
}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000eec:	b5b0      	push	{r4, r5, r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000ef4:	250f      	movs	r5, #15
 8000ef6:	197c      	adds	r4, r7, r5
 8000ef8:	f7ff fc32 	bl	8000760 <NRF24_get_status>
 8000efc:	0003      	movs	r3, r0
 8000efe:	7023      	strb	r3, [r4, #0]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000f00:	0028      	movs	r0, r5
 8000f02:	183b      	adds	r3, r7, r0
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2240      	movs	r2, #64	; 0x40
 8000f08:	401a      	ands	r2, r3
 8000f0a:	240e      	movs	r4, #14
 8000f0c:	193b      	adds	r3, r7, r4
 8000f0e:	1e51      	subs	r1, r2, #1
 8000f10:	418a      	sbcs	r2, r1
 8000f12:	701a      	strb	r2, [r3, #0]

  if (result)
 8000f14:	193b      	adds	r3, r7, r4
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d019      	beq.n	8000f50 <NRF24_availablePipe+0x64>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d008      	beq.n	8000f34 <NRF24_availablePipe+0x48>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000f22:	183b      	adds	r3, r7, r0
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	085b      	lsrs	r3, r3, #1
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2207      	movs	r2, #7
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000f34:	2140      	movs	r1, #64	; 0x40
 8000f36:	2007      	movs	r0, #7
 8000f38:	f7ff fb4c 	bl	80005d4 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000f3c:	230f      	movs	r3, #15
 8000f3e:	18fb      	adds	r3, r7, r3
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2220      	movs	r2, #32
 8000f44:	4013      	ands	r3, r2
 8000f46:	d003      	beq.n	8000f50 <NRF24_availablePipe+0x64>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000f48:	2120      	movs	r1, #32
 8000f4a:	2007      	movs	r0, #7
 8000f4c:	f7ff fb42 	bl	80005d4 <NRF24_write_register>
    }
  }
  return result;
 8000f50:	230e      	movs	r3, #14
 8000f52:	18fb      	adds	r3, r7, r3
 8000f54:	781b      	ldrb	r3, [r3, #0]
}
 8000f56:	0018      	movs	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b004      	add	sp, #16
 8000f5c:	bdb0      	pop	{r4, r5, r7, pc}

08000f5e <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	000a      	movs	r2, r1
 8000f68:	1cfb      	adds	r3, r7, #3
 8000f6a:	701a      	strb	r2, [r3, #0]
  // Transmitter power-up
  //NRF24_ce(0);
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f7ff fad5 	bl	800051c <NRF24_read_register>
 8000f72:	0003      	movs	r3, r0
 8000f74:	001a      	movs	r2, r3
 8000f76:	2302      	movs	r3, #2
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	4393      	bics	r3, r2
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	0019      	movs	r1, r3
 8000f84:	2000      	movs	r0, #0
 8000f86:	f7ff fb25 	bl	80005d4 <NRF24_write_register>
  //NRF24_ce(1);
  NRF24_DelayMicroSeconds(150);
 8000f8a:	2096      	movs	r0, #150	; 0x96
 8000f8c:	f7ff fa86 	bl	800049c <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8000f90:	1cfb      	adds	r3, r7, #3
 8000f92:	781a      	ldrb	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	0011      	movs	r1, r2
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f7ff fb71 	bl	8000680 <NRF24_write_payload>

  // Enable Tx for 15usec
  //NRF24_ce(1);
  NRF24_DelayMicroSeconds(15);
 8000f9e:	200f      	movs	r0, #15
 8000fa0:	f7ff fa7c 	bl	800049c <NRF24_DelayMicroSeconds>
  //NRF24_ce(0);
}
 8000fa4:	46c0      	nop			; (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b002      	add	sp, #8
 8000faa:	bd80      	pop	{r7, pc}

08000fac <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8000fac:	b5b0      	push	{r4, r5, r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000fb8:	2517      	movs	r5, #23
 8000fba:	197c      	adds	r4, r7, r5
 8000fbc:	f7ff fbd0 	bl	8000760 <NRF24_get_status>
 8000fc0:	0003      	movs	r3, r0
 8000fc2:	7023      	strb	r3, [r4, #0]
	*tx_ok = 0;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000fca:	2170      	movs	r1, #112	; 0x70
 8000fcc:	2007      	movs	r0, #7
 8000fce:	f7ff fb01 	bl	80005d4 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8000fd2:	0029      	movs	r1, r5
 8000fd4:	187b      	adds	r3, r7, r1
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2220      	movs	r2, #32
 8000fda:	4013      	ands	r3, r2
 8000fdc:	1e5a      	subs	r2, r3, #1
 8000fde:	4193      	sbcs	r3, r2
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8000fe6:	187b      	adds	r3, r7, r1
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2210      	movs	r2, #16
 8000fec:	4013      	ands	r3, r2
 8000fee:	1e5a      	subs	r2, r3, #1
 8000ff0:	4193      	sbcs	r3, r2
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8000ff8:	187b      	adds	r3, r7, r1
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2240      	movs	r2, #64	; 0x40
 8000ffe:	4013      	ands	r3, r2
 8001000:	1e5a      	subs	r2, r3, #1
 8001002:	4193      	sbcs	r3, r2
 8001004:	b2da      	uxtb	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	701a      	strb	r2, [r3, #0]
}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	46bd      	mov	sp, r7
 800100e:	b006      	add	sp, #24
 8001010:	bdb0      	pop	{r4, r5, r7, pc}

08001012 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001016:	2170      	movs	r1, #112	; 0x70
 8001018:	2007      	movs	r0, #7
 800101a:	f7ff fadb 	bl	80005d4 <NRF24_write_register>
}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800102a:	2000      	movs	r0, #0
 800102c:	f7ff fa56 	bl	80004dc <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	2250      	movs	r2, #80	; 0x50
 8001034:	701a      	strb	r2, [r3, #0]
	cmdRxBuf[1] = 0x73;
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	2273      	movs	r2, #115	; 0x73
 800103a:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 800103c:	1d39      	adds	r1, r7, #4
 800103e:	4806      	ldr	r0, [pc, #24]	; (8001058 <NRF24_ACTIVATE_cmd+0x34>)
 8001040:	2364      	movs	r3, #100	; 0x64
 8001042:	2202      	movs	r2, #2
 8001044:	f002 f92b 	bl	800329e <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001048:	2001      	movs	r0, #1
 800104a:	f7ff fa47 	bl	80004dc <NRF24_csn>
}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	46bd      	mov	sp, r7
 8001052:	b002      	add	sp, #8
 8001054:	bd80      	pop	{r7, pc}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	20000038 	.word	0x20000038

0800105c <wait>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void wait (unsigned int n)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	n *= 100;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2264      	movs	r2, #100	; 0x64
 8001068:	4353      	muls	r3, r2
 800106a:	607b      	str	r3, [r7, #4]
	for (int i = 0; i <= n; i++);
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	e002      	b.n	8001078 <wait+0x1c>
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	3301      	adds	r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	429a      	cmp	r2, r3
 800107e:	d2f8      	bcs.n	8001072 <wait+0x16>
}
 8001080:	46c0      	nop			; (mov r8, r8)
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	46bd      	mov	sp, r7
 8001086:	b004      	add	sp, #16
 8001088:	bd80      	pop	{r7, pc}

0800108a <send_lasers_on>:

void send_lasers_on()
{
 800108a:	b580      	push	{r7, lr}
 800108c:	af00      	add	r7, sp, #0
	return;
 800108e:	46c0      	nop			; (mov r8, r8)
}
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <send_mouse_movement>:

void send_mouse_movement()
{
 8001094:	b590      	push	{r4, r7, lr}
 8001096:	b091      	sub	sp, #68	; 0x44
 8001098:	af00      	add	r7, sp, #0
	char myTxData[32] = "";
 800109a:	2420      	movs	r4, #32
 800109c:	193b      	adds	r3, r7, r4
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	3304      	adds	r3, #4
 80010a4:	221c      	movs	r2, #28
 80010a6:	2100      	movs	r1, #0
 80010a8:	0018      	movs	r0, r3
 80010aa:	f002 fe9c 	bl	8003de6 <memset>
	myTxData[0] = 0x03;
 80010ae:	0021      	movs	r1, r4
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	2203      	movs	r2, #3
 80010b4:	701a      	strb	r2, [r3, #0]
	myTxData[1] = 0x07;
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	2207      	movs	r2, #7
 80010ba:	705a      	strb	r2, [r3, #1]
	myTxData[2] = 0xFF;
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	22ff      	movs	r2, #255	; 0xff
 80010c0:	709a      	strb	r2, [r3, #2]
	myTxData[3] = 0x07;
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	2207      	movs	r2, #7
 80010c6:	70da      	strb	r2, [r3, #3]
	myTxData[4] = 0xFF;
 80010c8:	187b      	adds	r3, r7, r1
 80010ca:	22ff      	movs	r2, #255	; 0xff
 80010cc:	711a      	strb	r2, [r3, #4]
	  char AckPayload[32];

	  if(NRF24_write(myTxData, 32))
 80010ce:	187b      	adds	r3, r7, r1
 80010d0:	2120      	movs	r1, #32
 80010d2:	0018      	movs	r0, r3
 80010d4:	f7ff fc62 	bl	800099c <NRF24_write>
 80010d8:	1e03      	subs	r3, r0, #0
 80010da:	d005      	beq.n	80010e8 <send_mouse_movement+0x54>
	          {
	            NRF24_read(AckPayload, 32);
 80010dc:	003b      	movs	r3, r7
 80010de:	2120      	movs	r1, #32
 80010e0:	0018      	movs	r0, r3
 80010e2:	f7ff fcba 	bl	8000a5a <NRF24_read>
	          }
	  return;
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	46c0      	nop			; (mov r8, r8)
}
 80010ea:	46bd      	mov	sp, r7
 80010ec:	b011      	add	sp, #68	; 0x44
 80010ee:	bd90      	pop	{r4, r7, pc}

080010f0 <send_right_click>:

void send_right_click()
{
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b091      	sub	sp, #68	; 0x44
 80010f4:	af00      	add	r7, sp, #0
	char myTxData[32] = "";
 80010f6:	2420      	movs	r4, #32
 80010f8:	193b      	adds	r3, r7, r4
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	3304      	adds	r3, #4
 8001100:	221c      	movs	r2, #28
 8001102:	2100      	movs	r1, #0
 8001104:	0018      	movs	r0, r3
 8001106:	f002 fe6e 	bl	8003de6 <memset>
	myTxData[0] = 0x02;
 800110a:	0021      	movs	r1, r4
 800110c:	187b      	adds	r3, r7, r1
 800110e:	2202      	movs	r2, #2
 8001110:	701a      	strb	r2, [r3, #0]
	myTxData[1] = 0x02;
 8001112:	187b      	adds	r3, r7, r1
 8001114:	2202      	movs	r2, #2
 8001116:	705a      	strb	r2, [r3, #1]
	char AckPayload[32];

	if(NRF24_write(myTxData, 32)) {
 8001118:	187b      	adds	r3, r7, r1
 800111a:	2120      	movs	r1, #32
 800111c:	0018      	movs	r0, r3
 800111e:	f7ff fc3d 	bl	800099c <NRF24_write>
 8001122:	1e03      	subs	r3, r0, #0
 8001124:	d017      	beq.n	8001156 <send_right_click+0x66>
		NRF24_read(AckPayload, 32);
 8001126:	003b      	movs	r3, r7
 8001128:	2120      	movs	r1, #32
 800112a:	0018      	movs	r0, r3
 800112c:	f7ff fc95 	bl	8000a5a <NRF24_read>
		while (AckPayload[0] == 0x01) {
 8001130:	e00c      	b.n	800114c <send_right_click+0x5c>
			if(NRF24_write(myTxData, 32)) {
 8001132:	2320      	movs	r3, #32
 8001134:	18fb      	adds	r3, r7, r3
 8001136:	2120      	movs	r1, #32
 8001138:	0018      	movs	r0, r3
 800113a:	f7ff fc2f 	bl	800099c <NRF24_write>
 800113e:	1e03      	subs	r3, r0, #0
 8001140:	d004      	beq.n	800114c <send_right_click+0x5c>
				NRF24_read(AckPayload, 32);
 8001142:	003b      	movs	r3, r7
 8001144:	2120      	movs	r1, #32
 8001146:	0018      	movs	r0, r3
 8001148:	f7ff fc87 	bl	8000a5a <NRF24_read>
		while (AckPayload[0] == 0x01) {
 800114c:	003b      	movs	r3, r7
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d0ee      	beq.n	8001132 <send_right_click+0x42>
			}
		}
	}
	return;
 8001154:	46c0      	nop			; (mov r8, r8)
 8001156:	46c0      	nop			; (mov r8, r8)
}
 8001158:	46bd      	mov	sp, r7
 800115a:	b011      	add	sp, #68	; 0x44
 800115c:	bd90      	pop	{r4, r7, pc}

0800115e <send_left_click>:

void send_left_click()
{
 800115e:	b590      	push	{r4, r7, lr}
 8001160:	b091      	sub	sp, #68	; 0x44
 8001162:	af00      	add	r7, sp, #0
	char myTxData[32] = "";
 8001164:	2420      	movs	r4, #32
 8001166:	193b      	adds	r3, r7, r4
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	3304      	adds	r3, #4
 800116e:	221c      	movs	r2, #28
 8001170:	2100      	movs	r1, #0
 8001172:	0018      	movs	r0, r3
 8001174:	f002 fe37 	bl	8003de6 <memset>
	myTxData[0] = 0x02;
 8001178:	0021      	movs	r1, r4
 800117a:	187b      	adds	r3, r7, r1
 800117c:	2202      	movs	r2, #2
 800117e:	701a      	strb	r2, [r3, #0]
	myTxData[1] = 0x01;
 8001180:	187b      	adds	r3, r7, r1
 8001182:	2201      	movs	r2, #1
 8001184:	705a      	strb	r2, [r3, #1]
	char AckPayload[32];

	if(NRF24_write(myTxData, 32)) {
 8001186:	187b      	adds	r3, r7, r1
 8001188:	2120      	movs	r1, #32
 800118a:	0018      	movs	r0, r3
 800118c:	f7ff fc06 	bl	800099c <NRF24_write>
 8001190:	1e03      	subs	r3, r0, #0
 8001192:	d017      	beq.n	80011c4 <send_left_click+0x66>
		NRF24_read(AckPayload, 32);
 8001194:	003b      	movs	r3, r7
 8001196:	2120      	movs	r1, #32
 8001198:	0018      	movs	r0, r3
 800119a:	f7ff fc5e 	bl	8000a5a <NRF24_read>
		while (AckPayload[0] == 0x01) {
 800119e:	e00c      	b.n	80011ba <send_left_click+0x5c>
			if(NRF24_write(myTxData, 32)) {
 80011a0:	2320      	movs	r3, #32
 80011a2:	18fb      	adds	r3, r7, r3
 80011a4:	2120      	movs	r1, #32
 80011a6:	0018      	movs	r0, r3
 80011a8:	f7ff fbf8 	bl	800099c <NRF24_write>
 80011ac:	1e03      	subs	r3, r0, #0
 80011ae:	d004      	beq.n	80011ba <send_left_click+0x5c>
				NRF24_read(AckPayload, 32);
 80011b0:	003b      	movs	r3, r7
 80011b2:	2120      	movs	r1, #32
 80011b4:	0018      	movs	r0, r3
 80011b6:	f7ff fc50 	bl	8000a5a <NRF24_read>
		while (AckPayload[0] == 0x01) {
 80011ba:	003b      	movs	r3, r7
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d0ee      	beq.n	80011a0 <send_left_click+0x42>
			}
		}
	}
	return;
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	46c0      	nop			; (mov r8, r8)
}
 80011c6:	46bd      	mov	sp, r7
 80011c8:	b011      	add	sp, #68	; 0x44
 80011ca:	bd90      	pop	{r4, r7, pc}

080011cc <send_calibration_mode>:

void send_calibration_mode()
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	return;
 80011d0:	46c0      	nop			; (mov r8, r8)
}
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011da:	b09b      	sub	sp, #108	; 0x6c
 80011dc:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011de:	f000 fc15 	bl	8001a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e2:	f000 f971 	bl	80014c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e6:	f000 fa5f 	bl	80016a8 <MX_GPIO_Init>
  MX_ADC_Init();
 80011ea:	f000 f9c1 	bl	8001570 <MX_ADC_Init>
  MX_SPI1_Init();
 80011ee:	f000 fa23 	bl	8001638 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  //Initialize NRF24
  NRF24_begin(CSN_GPIO_Port, CSN_Pin, 17, hspi1);
 80011f2:	4cad      	ldr	r4, [pc, #692]	; (80014a8 <main+0x2d0>)
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	021e      	lsls	r6, r3, #8
 80011f8:	23a0      	movs	r3, #160	; 0xa0
 80011fa:	05dd      	lsls	r5, r3, #23
 80011fc:	466b      	mov	r3, sp
 80011fe:	0018      	movs	r0, r3
 8001200:	1d23      	adds	r3, r4, #4
 8001202:	2254      	movs	r2, #84	; 0x54
 8001204:	0019      	movs	r1, r3
 8001206:	f002 fde5 	bl	8003dd4 <memcpy>
 800120a:	6823      	ldr	r3, [r4, #0]
 800120c:	2211      	movs	r2, #17
 800120e:	0031      	movs	r1, r6
 8001210:	0028      	movs	r0, r5
 8001212:	f7ff fab5 	bl	8000780 <NRF24_begin>
  //Initialize NRF24 UART Debugging
  //nrf24_DebugUART_Init(huart2);

  //Attempt Transmission
	uint64_t TxpipeAddrs = 0x11223344AA;
 8001216:	4aa5      	ldr	r2, [pc, #660]	; (80014ac <main+0x2d4>)
 8001218:	2311      	movs	r3, #17
 800121a:	60ba      	str	r2, [r7, #8]
 800121c:	60fb      	str	r3, [r7, #12]
	//**** TRANSMIT - ACK ****//
	NRF24_stopListening();
 800121e:	f7ff fbb3 	bl	8000988 <NRF24_stopListening>
	NRF24_openWritingPipe(TxpipeAddrs);
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	0010      	movs	r0, r2
 8001228:	0019      	movs	r1, r3
 800122a:	f7ff fc3b 	bl	8000aa4 <NRF24_openWritingPipe>
	NRF24_setAutoAck(true);
 800122e:	2001      	movs	r0, #1
 8001230:	f7ff fd4e 	bl	8000cd0 <NRF24_setAutoAck>
	NRF24_setChannel(52);
 8001234:	2034      	movs	r0, #52	; 0x34
 8001236:	f7ff fc7d 	bl	8000b34 <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 800123a:	2020      	movs	r0, #32
 800123c:	f7ff fc96 	bl	8000b6c <NRF24_setPayloadSize>
	NRF24_enableDynamicPayloads();
 8001240:	f7ff fcf4 	bl	8000c2c <NRF24_enableDynamicPayloads>
	NRF24_enableAckPayload();
 8001244:	f7ff fcc1 	bl	8000bca <NRF24_enableAckPayload>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Down is PA4
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4))
 8001248:	23a0      	movs	r3, #160	; 0xa0
 800124a:	05db      	lsls	r3, r3, #23
 800124c:	2110      	movs	r1, #16
 800124e:	0018      	movs	r0, r3
 8001250:	f001 f9dc 	bl	800260c <HAL_GPIO_ReadPin>
 8001254:	1e03      	subs	r3, r0, #0
 8001256:	d010      	beq.n	800127a <main+0xa2>
	  {
		  send_lasers_on(); // Send that the lasers are about to toggle
 8001258:	f7ff ff17 	bl	800108a <send_lasers_on>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3); // Toggle red laser
 800125c:	23a0      	movs	r3, #160	; 0xa0
 800125e:	05db      	lsls	r3, r3, #23
 8001260:	2108      	movs	r1, #8
 8001262:	0018      	movs	r0, r3
 8001264:	f001 fa0c 	bl	8002680 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); // Toggle IR laser
 8001268:	4b91      	ldr	r3, [pc, #580]	; (80014b0 <main+0x2d8>)
 800126a:	2101      	movs	r1, #1
 800126c:	0018      	movs	r0, r3
 800126e:	f001 fa07 	bl	8002680 <HAL_GPIO_TogglePin>
		  wait(750);
 8001272:	4b90      	ldr	r3, [pc, #576]	; (80014b4 <main+0x2dc>)
 8001274:	0018      	movs	r0, r3
 8001276:	f7ff fef1 	bl	800105c <wait>
	  }

	  // '-' is PA2
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2))
 800127a:	23a0      	movs	r3, #160	; 0xa0
 800127c:	05db      	lsls	r3, r3, #23
 800127e:	2104      	movs	r1, #4
 8001280:	0018      	movs	r0, r3
 8001282:	f001 f9c3 	bl	800260c <HAL_GPIO_ReadPin>
 8001286:	1e03      	subs	r3, r0, #0
 8001288:	d014      	beq.n	80012b4 <main+0xdc>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET); // Start with yellow 4 (going left to right)
 800128a:	2380      	movs	r3, #128	; 0x80
 800128c:	0159      	lsls	r1, r3, #5
 800128e:	23a0      	movs	r3, #160	; 0xa0
 8001290:	05db      	lsls	r3, r3, #23
 8001292:	2201      	movs	r2, #1
 8001294:	0018      	movs	r0, r3
 8001296:	f001 f9d6 	bl	8002646 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 800129a:	23fa      	movs	r3, #250	; 0xfa
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	0018      	movs	r0, r3
 80012a0:	f000 fc24 	bl	8001aec <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // Start with yellow 4 (going left to right)
 80012a4:	2380      	movs	r3, #128	; 0x80
 80012a6:	0159      	lsls	r1, r3, #5
 80012a8:	23a0      	movs	r3, #160	; 0xa0
 80012aa:	05db      	lsls	r3, r3, #23
 80012ac:	2200      	movs	r2, #0
 80012ae:	0018      	movs	r0, r3
 80012b0:	f001 f9c9 	bl	8002646 <HAL_GPIO_WritePin>

	  }

	  // A is PA6
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6))
 80012b4:	23a0      	movs	r3, #160	; 0xa0
 80012b6:	05db      	lsls	r3, r3, #23
 80012b8:	2140      	movs	r1, #64	; 0x40
 80012ba:	0018      	movs	r0, r3
 80012bc:	f001 f9a6 	bl	800260c <HAL_GPIO_ReadPin>
 80012c0:	1e03      	subs	r3, r0, #0
 80012c2:	d006      	beq.n	80012d2 <main+0xfa>
	  {
		  send_left_click(); // Send left click
 80012c4:	f7ff ff4b 	bl	800115e <send_left_click>
		  wait(300);
 80012c8:	2396      	movs	r3, #150	; 0x96
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	0018      	movs	r0, r3
 80012ce:	f7ff fec5 	bl	800105c <wait>
	  }

	  // B is PA5
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5))
 80012d2:	23a0      	movs	r3, #160	; 0xa0
 80012d4:	05db      	lsls	r3, r3, #23
 80012d6:	2120      	movs	r1, #32
 80012d8:	0018      	movs	r0, r3
 80012da:	f001 f997 	bl	800260c <HAL_GPIO_ReadPin>
 80012de:	1e03      	subs	r3, r0, #0
 80012e0:	d006      	beq.n	80012f0 <main+0x118>
	  {
		  send_right_click(); // Send right click
 80012e2:	f7ff ff05 	bl	80010f0 <send_right_click>
		  wait(300);
 80012e6:	2396      	movs	r3, #150	; 0x96
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	0018      	movs	r0, r3
 80012ec:	f7ff feb6 	bl	800105c <wait>
	  }

    // 'Home' is PA7
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))
 80012f0:	23a0      	movs	r3, #160	; 0xa0
 80012f2:	05db      	lsls	r3, r3, #23
 80012f4:	2180      	movs	r1, #128	; 0x80
 80012f6:	0018      	movs	r0, r3
 80012f8:	f001 f988 	bl	800260c <HAL_GPIO_ReadPin>
 80012fc:	1e03      	subs	r3, r0, #0
 80012fe:	d006      	beq.n	800130e <main+0x136>
    {
      send_mouse_movement(); // Send right click
 8001300:	f7ff fec8 	bl	8001094 <send_mouse_movement>
      wait(300);
 8001304:	2396      	movs	r3, #150	; 0x96
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	0018      	movs	r0, r3
 800130a:	f7ff fea7 	bl	800105c <wait>
    }

	  // 1 is PB7
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 800130e:	4b68      	ldr	r3, [pc, #416]	; (80014b0 <main+0x2d8>)
 8001310:	2180      	movs	r1, #128	; 0x80
 8001312:	0018      	movs	r0, r3
 8001314:	f001 f97a 	bl	800260c <HAL_GPIO_ReadPin>
 8001318:	1e03      	subs	r3, r0, #0
 800131a:	d100      	bne.n	800131e <main+0x146>
 800131c:	e081      	b.n	8001422 <main+0x24a>
	  {
		  send_calibration_mode(); // Send calibration mode
 800131e:	f7ff ff55 	bl	80011cc <send_calibration_mode>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET); // Start with yellow 4 (going left to right)
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	0159      	lsls	r1, r3, #5
 8001326:	23a0      	movs	r3, #160	; 0xa0
 8001328:	05db      	lsls	r3, r3, #23
 800132a:	2201      	movs	r2, #1
 800132c:	0018      	movs	r0, r3
 800132e:	f001 f98a 	bl	8002646 <HAL_GPIO_WritePin>
		  wait(3000);
 8001332:	4b61      	ldr	r3, [pc, #388]	; (80014b8 <main+0x2e0>)
 8001334:	0018      	movs	r0, r3
 8001336:	f7ff fe91 	bl	800105c <wait>

		  // Press B on the top left corner of the screen
		  while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0);
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	23a0      	movs	r3, #160	; 0xa0
 800133e:	05db      	lsls	r3, r3, #23
 8001340:	2120      	movs	r1, #32
 8001342:	0018      	movs	r0, r3
 8001344:	f001 f962 	bl	800260c <HAL_GPIO_ReadPin>
 8001348:	1e03      	subs	r3, r0, #0
 800134a:	d0f7      	beq.n	800133c <main+0x164>
		  send_right_click(); // Send right click
 800134c:	f7ff fed0 	bl	80010f0 <send_right_click>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET); // Start with yellow 4 (going left to right)
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	0119      	lsls	r1, r3, #4
 8001354:	23a0      	movs	r3, #160	; 0xa0
 8001356:	05db      	lsls	r3, r3, #23
 8001358:	2201      	movs	r2, #1
 800135a:	0018      	movs	r0, r3
 800135c:	f001 f973 	bl	8002646 <HAL_GPIO_WritePin>
		  wait(3000);
 8001360:	4b55      	ldr	r3, [pc, #340]	; (80014b8 <main+0x2e0>)
 8001362:	0018      	movs	r0, r3
 8001364:	f7ff fe7a 	bl	800105c <wait>

		  while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0);
 8001368:	46c0      	nop			; (mov r8, r8)
 800136a:	23a0      	movs	r3, #160	; 0xa0
 800136c:	05db      	lsls	r3, r3, #23
 800136e:	2120      	movs	r1, #32
 8001370:	0018      	movs	r0, r3
 8001372:	f001 f94b 	bl	800260c <HAL_GPIO_ReadPin>
 8001376:	1e03      	subs	r3, r0, #0
 8001378:	d0f7      	beq.n	800136a <main+0x192>
		  send_right_click(); // Send right click
 800137a:	f7ff feb9 	bl	80010f0 <send_right_click>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); // Turn on yellow 3
 800137e:	2380      	movs	r3, #128	; 0x80
 8001380:	00d9      	lsls	r1, r3, #3
 8001382:	23a0      	movs	r3, #160	; 0xa0
 8001384:	05db      	lsls	r3, r3, #23
 8001386:	2201      	movs	r2, #1
 8001388:	0018      	movs	r0, r3
 800138a:	f001 f95c 	bl	8002646 <HAL_GPIO_WritePin>
		  wait(3000);
 800138e:	4b4a      	ldr	r3, [pc, #296]	; (80014b8 <main+0x2e0>)
 8001390:	0018      	movs	r0, r3
 8001392:	f7ff fe63 	bl	800105c <wait>

		  while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0);
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	23a0      	movs	r3, #160	; 0xa0
 800139a:	05db      	lsls	r3, r3, #23
 800139c:	2120      	movs	r1, #32
 800139e:	0018      	movs	r0, r3
 80013a0:	f001 f934 	bl	800260c <HAL_GPIO_ReadPin>
 80013a4:	1e03      	subs	r3, r0, #0
 80013a6:	d0f7      	beq.n	8001398 <main+0x1c0>
		  send_right_click(); // Send right click
 80013a8:	f7ff fea2 	bl	80010f0 <send_right_click>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); // Turn on yellow 2
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	0099      	lsls	r1, r3, #2
 80013b0:	23a0      	movs	r3, #160	; 0xa0
 80013b2:	05db      	lsls	r3, r3, #23
 80013b4:	2201      	movs	r2, #1
 80013b6:	0018      	movs	r0, r3
 80013b8:	f001 f945 	bl	8002646 <HAL_GPIO_WritePin>
		  wait(3000);
 80013bc:	4b3e      	ldr	r3, [pc, #248]	; (80014b8 <main+0x2e0>)
 80013be:	0018      	movs	r0, r3
 80013c0:	f7ff fe4c 	bl	800105c <wait>

		  while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0);
 80013c4:	46c0      	nop			; (mov r8, r8)
 80013c6:	23a0      	movs	r3, #160	; 0xa0
 80013c8:	05db      	lsls	r3, r3, #23
 80013ca:	2120      	movs	r1, #32
 80013cc:	0018      	movs	r0, r3
 80013ce:	f001 f91d 	bl	800260c <HAL_GPIO_ReadPin>
 80013d2:	1e03      	subs	r3, r0, #0
 80013d4:	d0f7      	beq.n	80013c6 <main+0x1ee>
		  send_right_click(); // Send right click
 80013d6:	f7ff fe8b 	bl	80010f0 <send_right_click>

		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // Turn off yellow 4
 80013da:	2380      	movs	r3, #128	; 0x80
 80013dc:	0159      	lsls	r1, r3, #5
 80013de:	23a0      	movs	r3, #160	; 0xa0
 80013e0:	05db      	lsls	r3, r3, #23
 80013e2:	2200      	movs	r2, #0
 80013e4:	0018      	movs	r0, r3
 80013e6:	f001 f92e 	bl	8002646 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET); // Turn off yellow 3
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	0119      	lsls	r1, r3, #4
 80013ee:	23a0      	movs	r3, #160	; 0xa0
 80013f0:	05db      	lsls	r3, r3, #23
 80013f2:	2200      	movs	r2, #0
 80013f4:	0018      	movs	r0, r3
 80013f6:	f001 f926 	bl	8002646 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Turn off yellow 2
 80013fa:	2380      	movs	r3, #128	; 0x80
 80013fc:	00d9      	lsls	r1, r3, #3
 80013fe:	23a0      	movs	r3, #160	; 0xa0
 8001400:	05db      	lsls	r3, r3, #23
 8001402:	2200      	movs	r2, #0
 8001404:	0018      	movs	r0, r3
 8001406:	f001 f91e 	bl	8002646 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); // Turn off yellow 1
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	0099      	lsls	r1, r3, #2
 800140e:	23a0      	movs	r3, #160	; 0xa0
 8001410:	05db      	lsls	r3, r3, #23
 8001412:	2200      	movs	r2, #0
 8001414:	0018      	movs	r0, r3
 8001416:	f001 f916 	bl	8002646 <HAL_GPIO_WritePin>
		  wait(3000);
 800141a:	4b27      	ldr	r3, [pc, #156]	; (80014b8 <main+0x2e0>)
 800141c:	0018      	movs	r0, r3
 800141e:	f7ff fe1d 	bl	800105c <wait>
	  }

	  // 2 is PC14
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14))
 8001422:	2380      	movs	r3, #128	; 0x80
 8001424:	01db      	lsls	r3, r3, #7
 8001426:	4a25      	ldr	r2, [pc, #148]	; (80014bc <main+0x2e4>)
 8001428:	0019      	movs	r1, r3
 800142a:	0010      	movs	r0, r2
 800142c:	f001 f8ee 	bl	800260c <HAL_GPIO_ReadPin>
 8001430:	1e03      	subs	r3, r0, #0
 8001432:	d100      	bne.n	8001436 <main+0x25e>
 8001434:	e708      	b.n	8001248 <main+0x70>
	  {
		  // ADC stuff
		  HAL_ADC_Start(&hadc);
 8001436:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <main+0x2e8>)
 8001438:	0018      	movs	r0, r3
 800143a:	f000 fcef 	bl	8001e1c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800143e:	2301      	movs	r3, #1
 8001440:	425a      	negs	r2, r3
 8001442:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <main+0x2e8>)
 8001444:	0011      	movs	r1, r2
 8001446:	0018      	movs	r0, r3
 8001448:	f000 fd3c 	bl	8001ec4 <HAL_ADC_PollForConversion>
		  raw = HAL_ADC_GetValue(&hadc);
 800144c:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <main+0x2e8>)
 800144e:	0018      	movs	r0, r3
 8001450:	f000 fdce 	bl	8001ff0 <HAL_ADC_GetValue>
 8001454:	0002      	movs	r2, r0
 8001456:	1dbb      	adds	r3, r7, #6
 8001458:	801a      	strh	r2, [r3, #0]

		  if (raw >= 2950) // red at 2950, green anywhere below that. 2.2 V
 800145a:	1dbb      	adds	r3, r7, #6
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	4a19      	ldr	r2, [pc, #100]	; (80014c4 <main+0x2ec>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d907      	bls.n	8001474 <main+0x29c>
		  {
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // Turn on the green LEDs
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	4814      	ldr	r0, [pc, #80]	; (80014bc <main+0x2e4>)
 800146a:	2201      	movs	r2, #1
 800146c:	0019      	movs	r1, r3
 800146e:	f001 f8ea 	bl	8002646 <HAL_GPIO_WritePin>
 8001472:	e006      	b.n	8001482 <main+0x2aa>
		  }
		  else
		  {
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); // Turn on the red LEDs
 8001474:	23a0      	movs	r3, #160	; 0xa0
 8001476:	05db      	lsls	r3, r3, #23
 8001478:	2201      	movs	r2, #1
 800147a:	2102      	movs	r1, #2
 800147c:	0018      	movs	r0, r3
 800147e:	f001 f8e2 	bl	8002646 <HAL_GPIO_WritePin>
		  }

		  wait(3000);
 8001482:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <main+0x2e0>)
 8001484:	0018      	movs	r0, r3
 8001486:	f7ff fde9 	bl	800105c <wait>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // Turn off the red LEDs
 800148a:	2380      	movs	r3, #128	; 0x80
 800148c:	021b      	lsls	r3, r3, #8
 800148e:	480b      	ldr	r0, [pc, #44]	; (80014bc <main+0x2e4>)
 8001490:	2200      	movs	r2, #0
 8001492:	0019      	movs	r1, r3
 8001494:	f001 f8d7 	bl	8002646 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // Turn off the red LEDs
 8001498:	23a0      	movs	r3, #160	; 0xa0
 800149a:	05db      	lsls	r3, r3, #23
 800149c:	2200      	movs	r2, #0
 800149e:	2102      	movs	r1, #2
 80014a0:	0018      	movs	r0, r3
 80014a2:	f001 f8d0 	bl	8002646 <HAL_GPIO_WritePin>
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4))
 80014a6:	e6cf      	b.n	8001248 <main+0x70>
 80014a8:	20000090 	.word	0x20000090
 80014ac:	223344aa 	.word	0x223344aa
 80014b0:	50000400 	.word	0x50000400
 80014b4:	000002ee 	.word	0x000002ee
 80014b8:	00000bb8 	.word	0x00000bb8
 80014bc:	50000800 	.word	0x50000800
 80014c0:	200000e8 	.word	0x200000e8
 80014c4:	00000b85 	.word	0x00000b85

080014c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b093      	sub	sp, #76	; 0x4c
 80014cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ce:	2414      	movs	r4, #20
 80014d0:	193b      	adds	r3, r7, r4
 80014d2:	0018      	movs	r0, r3
 80014d4:	2334      	movs	r3, #52	; 0x34
 80014d6:	001a      	movs	r2, r3
 80014d8:	2100      	movs	r1, #0
 80014da:	f002 fc84 	bl	8003de6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014de:	003b      	movs	r3, r7
 80014e0:	0018      	movs	r0, r3
 80014e2:	2314      	movs	r3, #20
 80014e4:	001a      	movs	r2, r3
 80014e6:	2100      	movs	r1, #0
 80014e8:	f002 fc7d 	bl	8003de6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014ec:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <SystemClock_Config+0xa0>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a1e      	ldr	r2, [pc, #120]	; (800156c <SystemClock_Config+0xa4>)
 80014f2:	401a      	ands	r2, r3
 80014f4:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <SystemClock_Config+0xa0>)
 80014f6:	2180      	movs	r1, #128	; 0x80
 80014f8:	0109      	lsls	r1, r1, #4
 80014fa:	430a      	orrs	r2, r1
 80014fc:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80014fe:	0021      	movs	r1, r4
 8001500:	187b      	adds	r3, r7, r1
 8001502:	2210      	movs	r2, #16
 8001504:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001506:	187b      	adds	r3, r7, r1
 8001508:	2201      	movs	r2, #1
 800150a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800150c:	187b      	adds	r3, r7, r1
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001512:	187b      	adds	r3, r7, r1
 8001514:	22a0      	movs	r2, #160	; 0xa0
 8001516:	0212      	lsls	r2, r2, #8
 8001518:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800151a:	187b      	adds	r3, r7, r1
 800151c:	2200      	movs	r2, #0
 800151e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001520:	187b      	adds	r3, r7, r1
 8001522:	0018      	movs	r0, r3
 8001524:	f001 f8c8 	bl	80026b8 <HAL_RCC_OscConfig>
 8001528:	1e03      	subs	r3, r0, #0
 800152a:	d001      	beq.n	8001530 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800152c:	f000 f976 	bl	800181c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001530:	003b      	movs	r3, r7
 8001532:	220f      	movs	r2, #15
 8001534:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001536:	003b      	movs	r3, r7
 8001538:	2200      	movs	r2, #0
 800153a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153c:	003b      	movs	r3, r7
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001542:	003b      	movs	r3, r7
 8001544:	2200      	movs	r2, #0
 8001546:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001548:	003b      	movs	r3, r7
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800154e:	003b      	movs	r3, r7
 8001550:	2100      	movs	r1, #0
 8001552:	0018      	movs	r0, r3
 8001554:	f001 fc2c 	bl	8002db0 <HAL_RCC_ClockConfig>
 8001558:	1e03      	subs	r3, r0, #0
 800155a:	d001      	beq.n	8001560 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800155c:	f000 f95e 	bl	800181c <Error_Handler>
  }
}
 8001560:	46c0      	nop			; (mov r8, r8)
 8001562:	46bd      	mov	sp, r7
 8001564:	b013      	add	sp, #76	; 0x4c
 8001566:	bd90      	pop	{r4, r7, pc}
 8001568:	40007000 	.word	0x40007000
 800156c:	ffffe7ff 	.word	0xffffe7ff

08001570 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001576:	003b      	movs	r3, r7
 8001578:	0018      	movs	r0, r3
 800157a:	2308      	movs	r3, #8
 800157c:	001a      	movs	r2, r3
 800157e:	2100      	movs	r1, #0
 8001580:	f002 fc31 	bl	8003de6 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001584:	4b2a      	ldr	r3, [pc, #168]	; (8001630 <MX_ADC_Init+0xc0>)
 8001586:	4a2b      	ldr	r2, [pc, #172]	; (8001634 <MX_ADC_Init+0xc4>)
 8001588:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800158a:	4b29      	ldr	r3, [pc, #164]	; (8001630 <MX_ADC_Init+0xc0>)
 800158c:	2200      	movs	r2, #0
 800158e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001590:	4b27      	ldr	r3, [pc, #156]	; (8001630 <MX_ADC_Init+0xc0>)
 8001592:	22c0      	movs	r2, #192	; 0xc0
 8001594:	0612      	lsls	r2, r2, #24
 8001596:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001598:	4b25      	ldr	r3, [pc, #148]	; (8001630 <MX_ADC_Init+0xc0>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800159e:	4b24      	ldr	r3, [pc, #144]	; (8001630 <MX_ADC_Init+0xc0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80015a4:	4b22      	ldr	r3, [pc, #136]	; (8001630 <MX_ADC_Init+0xc0>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015aa:	4b21      	ldr	r3, [pc, #132]	; (8001630 <MX_ADC_Init+0xc0>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80015b0:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <MX_ADC_Init+0xc0>)
 80015b2:	2220      	movs	r2, #32
 80015b4:	2100      	movs	r1, #0
 80015b6:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80015b8:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <MX_ADC_Init+0xc0>)
 80015ba:	2221      	movs	r2, #33	; 0x21
 80015bc:	2100      	movs	r1, #0
 80015be:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015c0:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <MX_ADC_Init+0xc0>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015c6:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <MX_ADC_Init+0xc0>)
 80015c8:	22c2      	movs	r2, #194	; 0xc2
 80015ca:	32ff      	adds	r2, #255	; 0xff
 80015cc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80015ce:	4b18      	ldr	r3, [pc, #96]	; (8001630 <MX_ADC_Init+0xc0>)
 80015d0:	222c      	movs	r2, #44	; 0x2c
 80015d2:	2100      	movs	r1, #0
 80015d4:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <MX_ADC_Init+0xc0>)
 80015d8:	2204      	movs	r2, #4
 80015da:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <MX_ADC_Init+0xc0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80015e2:	4b13      	ldr	r3, [pc, #76]	; (8001630 <MX_ADC_Init+0xc0>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <MX_ADC_Init+0xc0>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <MX_ADC_Init+0xc0>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80015f4:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <MX_ADC_Init+0xc0>)
 80015f6:	0018      	movs	r0, r3
 80015f8:	f000 fa9c 	bl	8001b34 <HAL_ADC_Init>
 80015fc:	1e03      	subs	r3, r0, #0
 80015fe:	d001      	beq.n	8001604 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8001600:	f000 f90c 	bl	800181c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001604:	003b      	movs	r3, r7
 8001606:	2201      	movs	r2, #1
 8001608:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800160a:	003b      	movs	r3, r7
 800160c:	2280      	movs	r2, #128	; 0x80
 800160e:	0152      	lsls	r2, r2, #5
 8001610:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001612:	003a      	movs	r2, r7
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <MX_ADC_Init+0xc0>)
 8001616:	0011      	movs	r1, r2
 8001618:	0018      	movs	r0, r3
 800161a:	f000 fcf5 	bl	8002008 <HAL_ADC_ConfigChannel>
 800161e:	1e03      	subs	r3, r0, #0
 8001620:	d001      	beq.n	8001626 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8001622:	f000 f8fb 	bl	800181c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001626:	46c0      	nop			; (mov r8, r8)
 8001628:	46bd      	mov	sp, r7
 800162a:	b002      	add	sp, #8
 800162c:	bd80      	pop	{r7, pc}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	200000e8 	.word	0x200000e8
 8001634:	40012400 	.word	0x40012400

08001638 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800163c:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <MX_SPI1_Init+0x68>)
 800163e:	4a19      	ldr	r2, [pc, #100]	; (80016a4 <MX_SPI1_Init+0x6c>)
 8001640:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <MX_SPI1_Init+0x68>)
 8001644:	2282      	movs	r2, #130	; 0x82
 8001646:	0052      	lsls	r2, r2, #1
 8001648:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <MX_SPI1_Init+0x68>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <MX_SPI1_Init+0x68>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <MX_SPI1_Init+0x68>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800165c:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <MX_SPI1_Init+0x68>)
 800165e:	2200      	movs	r2, #0
 8001660:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <MX_SPI1_Init+0x68>)
 8001664:	2280      	movs	r2, #128	; 0x80
 8001666:	0092      	lsls	r2, r2, #2
 8001668:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <MX_SPI1_Init+0x68>)
 800166c:	2238      	movs	r2, #56	; 0x38
 800166e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <MX_SPI1_Init+0x68>)
 8001672:	2200      	movs	r2, #0
 8001674:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001676:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <MX_SPI1_Init+0x68>)
 8001678:	2200      	movs	r2, #0
 800167a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <MX_SPI1_Init+0x68>)
 800167e:	2200      	movs	r2, #0
 8001680:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001682:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <MX_SPI1_Init+0x68>)
 8001684:	2207      	movs	r2, #7
 8001686:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <MX_SPI1_Init+0x68>)
 800168a:	0018      	movs	r0, r3
 800168c:	f001 fd7e 	bl	800318c <HAL_SPI_Init>
 8001690:	1e03      	subs	r3, r0, #0
 8001692:	d001      	beq.n	8001698 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001694:	f000 f8c2 	bl	800181c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001698:	46c0      	nop			; (mov r8, r8)
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	20000090 	.word	0x20000090
 80016a4:	40013000 	.word	0x40013000

080016a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a8:	b590      	push	{r4, r7, lr}
 80016aa:	b089      	sub	sp, #36	; 0x24
 80016ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ae:	240c      	movs	r4, #12
 80016b0:	193b      	adds	r3, r7, r4
 80016b2:	0018      	movs	r0, r3
 80016b4:	2314      	movs	r3, #20
 80016b6:	001a      	movs	r2, r3
 80016b8:	2100      	movs	r1, #0
 80016ba:	f002 fb94 	bl	8003de6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016be:	4b53      	ldr	r3, [pc, #332]	; (800180c <MX_GPIO_Init+0x164>)
 80016c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c2:	4b52      	ldr	r3, [pc, #328]	; (800180c <MX_GPIO_Init+0x164>)
 80016c4:	2104      	movs	r1, #4
 80016c6:	430a      	orrs	r2, r1
 80016c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80016ca:	4b50      	ldr	r3, [pc, #320]	; (800180c <MX_GPIO_Init+0x164>)
 80016cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ce:	2204      	movs	r2, #4
 80016d0:	4013      	ands	r3, r2
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d6:	4b4d      	ldr	r3, [pc, #308]	; (800180c <MX_GPIO_Init+0x164>)
 80016d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016da:	4b4c      	ldr	r3, [pc, #304]	; (800180c <MX_GPIO_Init+0x164>)
 80016dc:	2101      	movs	r1, #1
 80016de:	430a      	orrs	r2, r1
 80016e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80016e2:	4b4a      	ldr	r3, [pc, #296]	; (800180c <MX_GPIO_Init+0x164>)
 80016e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e6:	2201      	movs	r2, #1
 80016e8:	4013      	ands	r3, r2
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ee:	4b47      	ldr	r3, [pc, #284]	; (800180c <MX_GPIO_Init+0x164>)
 80016f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016f2:	4b46      	ldr	r3, [pc, #280]	; (800180c <MX_GPIO_Init+0x164>)
 80016f4:	2102      	movs	r1, #2
 80016f6:	430a      	orrs	r2, r1
 80016f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80016fa:	4b44      	ldr	r3, [pc, #272]	; (800180c <MX_GPIO_Init+0x164>)
 80016fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fe:	2202      	movs	r2, #2
 8001700:	4013      	ands	r3, r2
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001706:	2380      	movs	r3, #128	; 0x80
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	4841      	ldr	r0, [pc, #260]	; (8001810 <MX_GPIO_Init+0x168>)
 800170c:	2200      	movs	r2, #0
 800170e:	0019      	movs	r1, r3
 8001710:	f000 ff99 	bl	8002646 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10
 8001714:	493f      	ldr	r1, [pc, #252]	; (8001814 <MX_GPIO_Init+0x16c>)
 8001716:	23a0      	movs	r3, #160	; 0xa0
 8001718:	05db      	lsls	r3, r3, #23
 800171a:	2200      	movs	r2, #0
 800171c:	0018      	movs	r0, r3
 800171e:	f000 ff92 	bl	8002646 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001722:	4b3d      	ldr	r3, [pc, #244]	; (8001818 <MX_GPIO_Init+0x170>)
 8001724:	2200      	movs	r2, #0
 8001726:	2101      	movs	r1, #1
 8001728:	0018      	movs	r0, r3
 800172a:	f000 ff8c 	bl	8002646 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800172e:	193b      	adds	r3, r7, r4
 8001730:	2280      	movs	r2, #128	; 0x80
 8001732:	01d2      	lsls	r2, r2, #7
 8001734:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001736:	193b      	adds	r3, r7, r4
 8001738:	2200      	movs	r2, #0
 800173a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	193b      	adds	r3, r7, r4
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001742:	193b      	adds	r3, r7, r4
 8001744:	4a32      	ldr	r2, [pc, #200]	; (8001810 <MX_GPIO_Init+0x168>)
 8001746:	0019      	movs	r1, r3
 8001748:	0010      	movs	r0, r2
 800174a:	f000 fdf9 	bl	8002340 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800174e:	0021      	movs	r1, r4
 8001750:	187b      	adds	r3, r7, r1
 8001752:	2280      	movs	r2, #128	; 0x80
 8001754:	0212      	lsls	r2, r2, #8
 8001756:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001758:	000c      	movs	r4, r1
 800175a:	193b      	adds	r3, r7, r4
 800175c:	2201      	movs	r2, #1
 800175e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	193b      	adds	r3, r7, r4
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	193b      	adds	r3, r7, r4
 8001768:	2200      	movs	r2, #0
 800176a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176c:	193b      	adds	r3, r7, r4
 800176e:	4a28      	ldr	r2, [pc, #160]	; (8001810 <MX_GPIO_Init+0x168>)
 8001770:	0019      	movs	r1, r3
 8001772:	0010      	movs	r0, r2
 8001774:	f000 fde4 	bl	8002340 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 PA9 PA10
                           PA11 PA12 CSN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10
 8001778:	193b      	adds	r3, r7, r4
 800177a:	4a26      	ldr	r2, [pc, #152]	; (8001814 <MX_GPIO_Init+0x16c>)
 800177c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12|CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177e:	193b      	adds	r3, r7, r4
 8001780:	2201      	movs	r2, #1
 8001782:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	193b      	adds	r3, r7, r4
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	193b      	adds	r3, r7, r4
 800178c:	2200      	movs	r2, #0
 800178e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	193a      	adds	r2, r7, r4
 8001792:	23a0      	movs	r3, #160	; 0xa0
 8001794:	05db      	lsls	r3, r3, #23
 8001796:	0011      	movs	r1, r2
 8001798:	0018      	movs	r0, r3
 800179a:	f000 fdd1 	bl	8002340 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800179e:	193b      	adds	r3, r7, r4
 80017a0:	22f4      	movs	r2, #244	; 0xf4
 80017a2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a4:	193b      	adds	r3, r7, r4
 80017a6:	2200      	movs	r2, #0
 80017a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	193b      	adds	r3, r7, r4
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b0:	193a      	adds	r2, r7, r4
 80017b2:	23a0      	movs	r3, #160	; 0xa0
 80017b4:	05db      	lsls	r3, r3, #23
 80017b6:	0011      	movs	r1, r2
 80017b8:	0018      	movs	r0, r3
 80017ba:	f000 fdc1 	bl	8002340 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017be:	193b      	adds	r3, r7, r4
 80017c0:	2201      	movs	r2, #1
 80017c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c4:	193b      	adds	r3, r7, r4
 80017c6:	2201      	movs	r2, #1
 80017c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	193b      	adds	r3, r7, r4
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d0:	193b      	adds	r3, r7, r4
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d6:	193b      	adds	r3, r7, r4
 80017d8:	4a0f      	ldr	r2, [pc, #60]	; (8001818 <MX_GPIO_Init+0x170>)
 80017da:	0019      	movs	r1, r3
 80017dc:	0010      	movs	r0, r2
 80017de:	f000 fdaf 	bl	8002340 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80017e2:	0021      	movs	r1, r4
 80017e4:	187b      	adds	r3, r7, r1
 80017e6:	22c2      	movs	r2, #194	; 0xc2
 80017e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ea:	187b      	adds	r3, r7, r1
 80017ec:	2200      	movs	r2, #0
 80017ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	187b      	adds	r3, r7, r1
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f6:	187b      	adds	r3, r7, r1
 80017f8:	4a07      	ldr	r2, [pc, #28]	; (8001818 <MX_GPIO_Init+0x170>)
 80017fa:	0019      	movs	r1, r3
 80017fc:	0010      	movs	r0, r2
 80017fe:	f000 fd9f 	bl	8002340 <HAL_GPIO_Init>

}
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	46bd      	mov	sp, r7
 8001806:	b009      	add	sp, #36	; 0x24
 8001808:	bd90      	pop	{r4, r7, pc}
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	40021000 	.word	0x40021000
 8001810:	50000800 	.word	0x50000800
 8001814:	00009e0a 	.word	0x00009e0a
 8001818:	50000400 	.word	0x50000400

0800181c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001820:	b672      	cpsid	i
}
 8001822:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001824:	e7fe      	b.n	8001824 <Error_Handler+0x8>
	...

08001828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182c:	4b07      	ldr	r3, [pc, #28]	; (800184c <HAL_MspInit+0x24>)
 800182e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_MspInit+0x24>)
 8001832:	2101      	movs	r1, #1
 8001834:	430a      	orrs	r2, r1
 8001836:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <HAL_MspInit+0x24>)
 800183a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800183c:	4b03      	ldr	r3, [pc, #12]	; (800184c <HAL_MspInit+0x24>)
 800183e:	2180      	movs	r1, #128	; 0x80
 8001840:	0549      	lsls	r1, r1, #21
 8001842:	430a      	orrs	r2, r1
 8001844:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40021000 	.word	0x40021000

08001850 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	240c      	movs	r4, #12
 800185a:	193b      	adds	r3, r7, r4
 800185c:	0018      	movs	r0, r3
 800185e:	2314      	movs	r3, #20
 8001860:	001a      	movs	r2, r3
 8001862:	2100      	movs	r1, #0
 8001864:	f002 fabf 	bl	8003de6 <memset>
  if(hadc->Instance==ADC1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a14      	ldr	r2, [pc, #80]	; (80018c0 <HAL_ADC_MspInit+0x70>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d122      	bne.n	80018b8 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001872:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <HAL_ADC_MspInit+0x74>)
 8001874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001876:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <HAL_ADC_MspInit+0x74>)
 8001878:	2180      	movs	r1, #128	; 0x80
 800187a:	0089      	lsls	r1, r1, #2
 800187c:	430a      	orrs	r2, r1
 800187e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001880:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <HAL_ADC_MspInit+0x74>)
 8001882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <HAL_ADC_MspInit+0x74>)
 8001886:	2101      	movs	r1, #1
 8001888:	430a      	orrs	r2, r1
 800188a:	62da      	str	r2, [r3, #44]	; 0x2c
 800188c:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <HAL_ADC_MspInit+0x74>)
 800188e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001890:	2201      	movs	r2, #1
 8001892:	4013      	ands	r3, r2
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0-CK_IN     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001898:	193b      	adds	r3, r7, r4
 800189a:	2201      	movs	r2, #1
 800189c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800189e:	193b      	adds	r3, r7, r4
 80018a0:	2203      	movs	r2, #3
 80018a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	193b      	adds	r3, r7, r4
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018aa:	193a      	adds	r2, r7, r4
 80018ac:	23a0      	movs	r3, #160	; 0xa0
 80018ae:	05db      	lsls	r3, r3, #23
 80018b0:	0011      	movs	r1, r2
 80018b2:	0018      	movs	r0, r3
 80018b4:	f000 fd44 	bl	8002340 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018b8:	46c0      	nop			; (mov r8, r8)
 80018ba:	46bd      	mov	sp, r7
 80018bc:	b009      	add	sp, #36	; 0x24
 80018be:	bd90      	pop	{r4, r7, pc}
 80018c0:	40012400 	.word	0x40012400
 80018c4:	40021000 	.word	0x40021000

080018c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	240c      	movs	r4, #12
 80018d2:	193b      	adds	r3, r7, r4
 80018d4:	0018      	movs	r0, r3
 80018d6:	2314      	movs	r3, #20
 80018d8:	001a      	movs	r2, r3
 80018da:	2100      	movs	r1, #0
 80018dc:	f002 fa83 	bl	8003de6 <memset>
  if(hspi->Instance==SPI1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a17      	ldr	r2, [pc, #92]	; (8001944 <HAL_SPI_MspInit+0x7c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d128      	bne.n	800193c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018ea:	4b17      	ldr	r3, [pc, #92]	; (8001948 <HAL_SPI_MspInit+0x80>)
 80018ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ee:	4b16      	ldr	r3, [pc, #88]	; (8001948 <HAL_SPI_MspInit+0x80>)
 80018f0:	2180      	movs	r1, #128	; 0x80
 80018f2:	0149      	lsls	r1, r1, #5
 80018f4:	430a      	orrs	r2, r1
 80018f6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f8:	4b13      	ldr	r3, [pc, #76]	; (8001948 <HAL_SPI_MspInit+0x80>)
 80018fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_SPI_MspInit+0x80>)
 80018fe:	2102      	movs	r1, #2
 8001900:	430a      	orrs	r2, r1
 8001902:	62da      	str	r2, [r3, #44]	; 0x2c
 8001904:	4b10      	ldr	r3, [pc, #64]	; (8001948 <HAL_SPI_MspInit+0x80>)
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	2202      	movs	r2, #2
 800190a:	4013      	ands	r3, r2
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001910:	0021      	movs	r1, r4
 8001912:	187b      	adds	r3, r7, r1
 8001914:	2238      	movs	r2, #56	; 0x38
 8001916:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	187b      	adds	r3, r7, r1
 800191a:	2202      	movs	r2, #2
 800191c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	187b      	adds	r3, r7, r1
 8001920:	2200      	movs	r2, #0
 8001922:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001924:	187b      	adds	r3, r7, r1
 8001926:	2203      	movs	r2, #3
 8001928:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800192a:	187b      	adds	r3, r7, r1
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001930:	187b      	adds	r3, r7, r1
 8001932:	4a06      	ldr	r2, [pc, #24]	; (800194c <HAL_SPI_MspInit+0x84>)
 8001934:	0019      	movs	r1, r3
 8001936:	0010      	movs	r0, r2
 8001938:	f000 fd02 	bl	8002340 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800193c:	46c0      	nop			; (mov r8, r8)
 800193e:	46bd      	mov	sp, r7
 8001940:	b009      	add	sp, #36	; 0x24
 8001942:	bd90      	pop	{r4, r7, pc}
 8001944:	40013000 	.word	0x40013000
 8001948:	40021000 	.word	0x40021000
 800194c:	50000400 	.word	0x50000400

08001950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <NMI_Handler+0x4>

08001956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <HardFault_Handler+0x4>

0800195c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001960:	46c0      	nop			; (mov r8, r8)
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001974:	f000 f89e 	bl	8001ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001978:	46c0      	nop			; (mov r8, r8)
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001988:	4813      	ldr	r0, [pc, #76]	; (80019d8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800198a:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 800198c:	4813      	ldr	r0, [pc, #76]	; (80019dc <LoopForever+0x6>)
    LDR R1, [R0]
 800198e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001990:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001992:	4a13      	ldr	r2, [pc, #76]	; (80019e0 <LoopForever+0xa>)
    CMP R1, R2
 8001994:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001996:	d105      	bne.n	80019a4 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001998:	4812      	ldr	r0, [pc, #72]	; (80019e4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800199a:	4913      	ldr	r1, [pc, #76]	; (80019e8 <LoopForever+0x12>)
    STR R1, [R0]
 800199c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800199e:	4813      	ldr	r0, [pc, #76]	; (80019ec <LoopForever+0x16>)
    LDR R1,=0x00000000
 80019a0:	4913      	ldr	r1, [pc, #76]	; (80019f0 <LoopForever+0x1a>)
    STR R1, [R0]
 80019a2:	6001      	str	r1, [r0, #0]

080019a4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a4:	4813      	ldr	r0, [pc, #76]	; (80019f4 <LoopForever+0x1e>)
  ldr r1, =_edata
 80019a6:	4914      	ldr	r1, [pc, #80]	; (80019f8 <LoopForever+0x22>)
  ldr r2, =_sidata
 80019a8:	4a14      	ldr	r2, [pc, #80]	; (80019fc <LoopForever+0x26>)
  movs r3, #0
 80019aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019ac:	e002      	b.n	80019b4 <LoopCopyDataInit>

080019ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b2:	3304      	adds	r3, #4

080019b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b8:	d3f9      	bcc.n	80019ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ba:	4a11      	ldr	r2, [pc, #68]	; (8001a00 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80019bc:	4c11      	ldr	r4, [pc, #68]	; (8001a04 <LoopForever+0x2e>)
  movs r3, #0
 80019be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c0:	e001      	b.n	80019c6 <LoopFillZerobss>

080019c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c4:	3204      	adds	r2, #4

080019c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c8:	d3fb      	bcc.n	80019c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80019ca:	f7ff ffd8 	bl	800197e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ce:	f002 f9dd 	bl	8003d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019d2:	f7ff fc01 	bl	80011d8 <main>

080019d6 <LoopForever>:

LoopForever:
    b LoopForever
 80019d6:	e7fe      	b.n	80019d6 <LoopForever>
   ldr   r0, =_estack
 80019d8:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 80019dc:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80019e0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80019e4:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80019e8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80019ec:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80019f0:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80019f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80019fc:	08003e3c 	.word	0x08003e3c
  ldr r2, =_sbss
 8001a00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a04:	20000148 	.word	0x20000148

08001a08 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a08:	e7fe      	b.n	8001a08 <ADC1_IRQHandler>
	...

08001a0c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a12:	1dfb      	adds	r3, r7, #7
 8001a14:	2200      	movs	r2, #0
 8001a16:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_Init+0x3c>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <HAL_Init+0x3c>)
 8001a1e:	2140      	movs	r1, #64	; 0x40
 8001a20:	430a      	orrs	r2, r1
 8001a22:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a24:	2000      	movs	r0, #0
 8001a26:	f000 f811 	bl	8001a4c <HAL_InitTick>
 8001a2a:	1e03      	subs	r3, r0, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001a2e:	1dfb      	adds	r3, r7, #7
 8001a30:	2201      	movs	r2, #1
 8001a32:	701a      	strb	r2, [r3, #0]
 8001a34:	e001      	b.n	8001a3a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a36:	f7ff fef7 	bl	8001828 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a3a:	1dfb      	adds	r3, r7, #7
 8001a3c:	781b      	ldrb	r3, [r3, #0]
}
 8001a3e:	0018      	movs	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	b002      	add	sp, #8
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	40022000 	.word	0x40022000

08001a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a4c:	b590      	push	{r4, r7, lr}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <HAL_InitTick+0x5c>)
 8001a56:	681c      	ldr	r4, [r3, #0]
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <HAL_InitTick+0x60>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	0019      	movs	r1, r3
 8001a5e:	23fa      	movs	r3, #250	; 0xfa
 8001a60:	0098      	lsls	r0, r3, #2
 8001a62:	f7fe fb51 	bl	8000108 <__udivsi3>
 8001a66:	0003      	movs	r3, r0
 8001a68:	0019      	movs	r1, r3
 8001a6a:	0020      	movs	r0, r4
 8001a6c:	f7fe fb4c 	bl	8000108 <__udivsi3>
 8001a70:	0003      	movs	r3, r0
 8001a72:	0018      	movs	r0, r3
 8001a74:	f000 fc57 	bl	8002326 <HAL_SYSTICK_Config>
 8001a78:	1e03      	subs	r3, r0, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e00f      	b.n	8001aa0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d80b      	bhi.n	8001a9e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	2301      	movs	r3, #1
 8001a8a:	425b      	negs	r3, r3
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f000 fc34 	bl	80022fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_InitTick+0x64>)
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e000      	b.n	8001aa0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
}
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b003      	add	sp, #12
 8001aa6:	bd90      	pop	{r4, r7, pc}
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	20000008 	.word	0x20000008
 8001ab0:	20000004 	.word	0x20000004

08001ab4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <HAL_IncTick+0x1c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	001a      	movs	r2, r3
 8001abe:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <HAL_IncTick+0x20>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	18d2      	adds	r2, r2, r3
 8001ac4:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <HAL_IncTick+0x20>)
 8001ac6:	601a      	str	r2, [r3, #0]
}
 8001ac8:	46c0      	nop			; (mov r8, r8)
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	20000008 	.word	0x20000008
 8001ad4:	20000144 	.word	0x20000144

08001ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;
 8001adc:	4b02      	ldr	r3, [pc, #8]	; (8001ae8 <HAL_GetTick+0x10>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	20000144 	.word	0x20000144

08001aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af4:	f7ff fff0 	bl	8001ad8 <HAL_GetTick>
 8001af8:	0003      	movs	r3, r0
 8001afa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	3301      	adds	r3, #1
 8001b04:	d005      	beq.n	8001b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <HAL_Delay+0x44>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	001a      	movs	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	189b      	adds	r3, r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	f7ff ffe0 	bl	8001ad8 <HAL_GetTick>
 8001b18:	0002      	movs	r2, r0
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d8f7      	bhi.n	8001b14 <HAL_Delay+0x28>
  {
  }
}
 8001b24:	46c0      	nop			; (mov r8, r8)
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b004      	add	sp, #16
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	20000008 	.word	0x20000008

08001b34 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e159      	b.n	8001dfa <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10a      	bne.n	8001b64 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2250      	movs	r2, #80	; 0x50
 8001b58:	2100      	movs	r1, #0
 8001b5a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f7ff fe76 	bl	8001850 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b68:	2210      	movs	r2, #16
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	2b10      	cmp	r3, #16
 8001b6e:	d005      	beq.n	8001b7c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2204      	movs	r2, #4
 8001b78:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001b7a:	d00b      	beq.n	8001b94 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b80:	2210      	movs	r2, #16
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2250      	movs	r2, #80	; 0x50
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e132      	b.n	8001dfa <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b98:	4a9a      	ldr	r2, [pc, #616]	; (8001e04 <HAL_ADC_Init+0x2d0>)
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	2203      	movs	r2, #3
 8001bac:	4013      	ands	r3, r2
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d108      	bne.n	8001bc4 <HAL_ADC_Init+0x90>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_ADC_Init+0x90>
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e000      	b.n	8001bc6 <HAL_ADC_Init+0x92>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d149      	bne.n	8001c5e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	23c0      	movs	r3, #192	; 0xc0
 8001bd0:	061b      	lsls	r3, r3, #24
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d00b      	beq.n	8001bee <HAL_ADC_Init+0xba>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	2380      	movs	r3, #128	; 0x80
 8001bdc:	05db      	lsls	r3, r3, #23
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d005      	beq.n	8001bee <HAL_ADC_Init+0xba>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	2380      	movs	r3, #128	; 0x80
 8001be8:	061b      	lsls	r3, r3, #24
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d111      	bne.n	8001c12 <HAL_ADC_Init+0xde>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	0092      	lsls	r2, r2, #2
 8001bfa:	0892      	lsrs	r2, r2, #2
 8001bfc:	611a      	str	r2, [r3, #16]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6919      	ldr	r1, [r3, #16]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	611a      	str	r2, [r3, #16]
 8001c10:	e014      	b.n	8001c3c <HAL_ADC_Init+0x108>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	691a      	ldr	r2, [r3, #16]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	0092      	lsls	r2, r2, #2
 8001c1e:	0892      	lsrs	r2, r2, #2
 8001c20:	611a      	str	r2, [r3, #16]
 8001c22:	4b79      	ldr	r3, [pc, #484]	; (8001e08 <HAL_ADC_Init+0x2d4>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	4b78      	ldr	r3, [pc, #480]	; (8001e08 <HAL_ADC_Init+0x2d4>)
 8001c28:	4978      	ldr	r1, [pc, #480]	; (8001e0c <HAL_ADC_Init+0x2d8>)
 8001c2a:	400a      	ands	r2, r1
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	4b76      	ldr	r3, [pc, #472]	; (8001e08 <HAL_ADC_Init+0x2d4>)
 8001c30:	6819      	ldr	r1, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	4b74      	ldr	r3, [pc, #464]	; (8001e08 <HAL_ADC_Init+0x2d4>)
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2118      	movs	r1, #24
 8001c48:	438a      	bics	r2, r1
 8001c4a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68d9      	ldr	r1, [r3, #12]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001c5e:	4b6a      	ldr	r3, [pc, #424]	; (8001e08 <HAL_ADC_Init+0x2d4>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	4b69      	ldr	r3, [pc, #420]	; (8001e08 <HAL_ADC_Init+0x2d4>)
 8001c64:	496a      	ldr	r1, [pc, #424]	; (8001e10 <HAL_ADC_Init+0x2dc>)
 8001c66:	400a      	ands	r2, r1
 8001c68:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8001c6a:	4b67      	ldr	r3, [pc, #412]	; (8001e08 <HAL_ADC_Init+0x2d4>)
 8001c6c:	6819      	ldr	r1, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c72:	065a      	lsls	r2, r3, #25
 8001c74:	4b64      	ldr	r3, [pc, #400]	; (8001e08 <HAL_ADC_Init+0x2d4>)
 8001c76:	430a      	orrs	r2, r1
 8001c78:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	2380      	movs	r3, #128	; 0x80
 8001c82:	055b      	lsls	r3, r3, #21
 8001c84:	4013      	ands	r3, r2
 8001c86:	d108      	bne.n	8001c9a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2180      	movs	r1, #128	; 0x80
 8001c94:	0549      	lsls	r1, r1, #21
 8001c96:	430a      	orrs	r2, r1
 8001c98:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68da      	ldr	r2, [r3, #12]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	495b      	ldr	r1, [pc, #364]	; (8001e14 <HAL_ADC_Init+0x2e0>)
 8001ca6:	400a      	ands	r2, r1
 8001ca8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68d9      	ldr	r1, [r3, #12]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d101      	bne.n	8001cc0 <HAL_ADC_Init+0x18c>
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	e000      	b.n	8001cc2 <HAL_ADC_Init+0x18e>
 8001cc0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001cc2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2020      	movs	r0, #32
 8001cc8:	5c1b      	ldrb	r3, [r3, r0]
 8001cca:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001ccc:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	202c      	movs	r0, #44	; 0x2c
 8001cd2:	5c1b      	ldrb	r3, [r3, r0]
 8001cd4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001cd6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001cdc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001ce4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001cec:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cfa:	23c2      	movs	r3, #194	; 0xc2
 8001cfc:	33ff      	adds	r3, #255	; 0xff
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d00b      	beq.n	8001d1a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68d9      	ldr	r1, [r3, #12]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001d10:	431a      	orrs	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2221      	movs	r2, #33	; 0x21
 8001d1e:	5c9b      	ldrb	r3, [r3, r2]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d11a      	bne.n	8001d5a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2220      	movs	r2, #32
 8001d28:	5c9b      	ldrb	r3, [r3, r2]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d109      	bne.n	8001d42 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2180      	movs	r1, #128	; 0x80
 8001d3a:	0249      	lsls	r1, r1, #9
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	60da      	str	r2, [r3, #12]
 8001d40:	e00b      	b.n	8001d5a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d46:	2220      	movs	r2, #32
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d52:	2201      	movs	r2, #1
 8001d54:	431a      	orrs	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d11f      	bne.n	8001da2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	691a      	ldr	r2, [r3, #16]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	492a      	ldr	r1, [pc, #168]	; (8001e18 <HAL_ADC_Init+0x2e4>)
 8001d6e:	400a      	ands	r2, r1
 8001d70:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6919      	ldr	r1, [r3, #16]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001d80:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8001d86:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691a      	ldr	r2, [r3, #16]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	611a      	str	r2, [r3, #16]
 8001da0:	e00e      	b.n	8001dc0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	2201      	movs	r2, #1
 8001daa:	4013      	ands	r3, r2
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d107      	bne.n	8001dc0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	691a      	ldr	r2, [r3, #16]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2101      	movs	r1, #1
 8001dbc:	438a      	bics	r2, r1
 8001dbe:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	695a      	ldr	r2, [r3, #20]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2107      	movs	r1, #7
 8001dcc:	438a      	bics	r2, r1
 8001dce:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6959      	ldr	r1, [r3, #20]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dec:	2203      	movs	r2, #3
 8001dee:	4393      	bics	r3, r2
 8001df0:	2201      	movs	r2, #1
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	b002      	add	sp, #8
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	fffffefd 	.word	0xfffffefd
 8001e08:	40012708 	.word	0x40012708
 8001e0c:	ffc3ffff 	.word	0xffc3ffff
 8001e10:	fdffffff 	.word	0xfdffffff
 8001e14:	fffe0219 	.word	0xfffe0219
 8001e18:	fffffc03 	.word	0xfffffc03

08001e1c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e1c:	b590      	push	{r4, r7, lr}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e24:	230f      	movs	r3, #15
 8001e26:	18fb      	adds	r3, r7, r3
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2204      	movs	r2, #4
 8001e34:	4013      	ands	r3, r2
 8001e36:	d138      	bne.n	8001eaa <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2250      	movs	r2, #80	; 0x50
 8001e3c:	5c9b      	ldrb	r3, [r3, r2]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d101      	bne.n	8001e46 <HAL_ADC_Start+0x2a>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e038      	b.n	8001eb8 <HAL_ADC_Start+0x9c>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2250      	movs	r2, #80	; 0x50
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d007      	beq.n	8001e66 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001e56:	230f      	movs	r3, #15
 8001e58:	18fc      	adds	r4, r7, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f000 f93b 	bl	80020d8 <ADC_Enable>
 8001e62:	0003      	movs	r3, r0
 8001e64:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e66:	230f      	movs	r3, #15
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d120      	bne.n	8001eb2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e74:	4a12      	ldr	r2, [pc, #72]	; (8001ec0 <HAL_ADC_Start+0xa4>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	2280      	movs	r2, #128	; 0x80
 8001e7a:	0052      	lsls	r2, r2, #1
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2250      	movs	r2, #80	; 0x50
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	221c      	movs	r2, #28
 8001e96:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2104      	movs	r1, #4
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	e003      	b.n	8001eb2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001eaa:	230f      	movs	r3, #15
 8001eac:	18fb      	adds	r3, r7, r3
 8001eae:	2202      	movs	r2, #2
 8001eb0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001eb2:	230f      	movs	r3, #15
 8001eb4:	18fb      	adds	r3, r7, r3
 8001eb6:	781b      	ldrb	r3, [r3, #0]
}
 8001eb8:	0018      	movs	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	b005      	add	sp, #20
 8001ebe:	bd90      	pop	{r4, r7, pc}
 8001ec0:	fffff0fe 	.word	0xfffff0fe

08001ec4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d102      	bne.n	8001ee4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001ede:	2308      	movs	r3, #8
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	e014      	b.n	8001f0e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	2201      	movs	r2, #1
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d10b      	bne.n	8001f0a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2250      	movs	r2, #80	; 0x50
 8001f02:	2100      	movs	r1, #0
 8001f04:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e06c      	b.n	8001fe4 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001f0a:	230c      	movs	r3, #12
 8001f0c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f0e:	f7ff fde3 	bl	8001ad8 <HAL_GetTick>
 8001f12:	0003      	movs	r3, r0
 8001f14:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001f16:	e019      	b.n	8001f4c <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	d016      	beq.n	8001f4c <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d007      	beq.n	8001f34 <HAL_ADC_PollForConversion+0x70>
 8001f24:	f7ff fdd8 	bl	8001ad8 <HAL_GetTick>
 8001f28:	0002      	movs	r2, r0
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d20b      	bcs.n	8001f4c <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f38:	2204      	movs	r2, #4
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2250      	movs	r2, #80	; 0x50
 8001f44:	2100      	movs	r1, #0
 8001f46:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e04b      	b.n	8001fe4 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4013      	ands	r3, r2
 8001f56:	d0df      	beq.n	8001f18 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5c:	2280      	movs	r2, #128	; 0x80
 8001f5e:	0092      	lsls	r2, r2, #2
 8001f60:	431a      	orrs	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	23c0      	movs	r3, #192	; 0xc0
 8001f6e:	011b      	lsls	r3, r3, #4
 8001f70:	4013      	ands	r3, r2
 8001f72:	d12e      	bne.n	8001fd2 <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2220      	movs	r2, #32
 8001f78:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d129      	bne.n	8001fd2 <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2208      	movs	r2, #8
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d122      	bne.n	8001fd2 <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2204      	movs	r2, #4
 8001f94:	4013      	ands	r3, r2
 8001f96:	d110      	bne.n	8001fba <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	210c      	movs	r1, #12
 8001fa4:	438a      	bics	r2, r1
 8001fa6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fac:	4a0f      	ldr	r2, [pc, #60]	; (8001fec <HAL_ADC_PollForConversion+0x128>)
 8001fae:	4013      	ands	r3, r2
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	655a      	str	r2, [r3, #84]	; 0x54
 8001fb8:	e00b      	b.n	8001fd2 <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	2201      	movs	r2, #1
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d103      	bne.n	8001fe2 <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	220c      	movs	r2, #12
 8001fe0:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b004      	add	sp, #16
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	fffffefe 	.word	0xfffffefe

08001ff0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001ffe:	0018      	movs	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	b002      	add	sp, #8
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2250      	movs	r2, #80	; 0x50
 8002016:	5c9b      	ldrb	r3, [r3, r2]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x18>
 800201c:	2302      	movs	r3, #2
 800201e:	e050      	b.n	80020c2 <HAL_ADC_ConfigChannel+0xba>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2250      	movs	r2, #80	; 0x50
 8002024:	2101      	movs	r1, #1
 8002026:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2204      	movs	r2, #4
 8002030:	4013      	ands	r3, r2
 8002032:	d00b      	beq.n	800204c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002038:	2220      	movs	r2, #32
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2250      	movs	r2, #80	; 0x50
 8002044:	2100      	movs	r1, #0
 8002046:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e03a      	b.n	80020c2 <HAL_ADC_ConfigChannel+0xba>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	4a1e      	ldr	r2, [pc, #120]	; (80020cc <HAL_ADC_ConfigChannel+0xc4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d018      	beq.n	8002088 <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	035b      	lsls	r3, r3, #13
 8002062:	0b5a      	lsrs	r2, r3, #13
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	629a      	str	r2, [r3, #40]	; 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	2380      	movs	r3, #128	; 0x80
 8002072:	029b      	lsls	r3, r3, #10
 8002074:	4013      	ands	r3, r2
 8002076:	d01f      	beq.n	80020b8 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8002078:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <HAL_ADC_ConfigChannel+0xc8>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <HAL_ADC_ConfigChannel+0xc8>)
 800207e:	2180      	movs	r1, #128	; 0x80
 8002080:	03c9      	lsls	r1, r1, #15
 8002082:	430a      	orrs	r2, r1
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	e017      	b.n	80020b8 <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	035b      	lsls	r3, r3, #13
 8002094:	0b5b      	lsrs	r3, r3, #13
 8002096:	43d9      	mvns	r1, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	400a      	ands	r2, r1
 800209e:	629a      	str	r2, [r3, #40]	; 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;   
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	2380      	movs	r3, #128	; 0x80
 80020a6:	029b      	lsls	r3, r3, #10
 80020a8:	4013      	ands	r3, r2
 80020aa:	d005      	beq.n	80020b8 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80020ac:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <HAL_ADC_ConfigChannel+0xc8>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <HAL_ADC_ConfigChannel+0xc8>)
 80020b2:	4908      	ldr	r1, [pc, #32]	; (80020d4 <HAL_ADC_ConfigChannel+0xcc>)
 80020b4:	400a      	ands	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2250      	movs	r2, #80	; 0x50
 80020bc:	2100      	movs	r1, #0
 80020be:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	0018      	movs	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	b002      	add	sp, #8
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	00001001 	.word	0x00001001
 80020d0:	40012708 	.word	0x40012708
 80020d4:	ffbfffff 	.word	0xffbfffff

080020d8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2203      	movs	r2, #3
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d108      	bne.n	8002104 <ADC_Enable+0x2c>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2201      	movs	r2, #1
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <ADC_Enable+0x2c>
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <ADC_Enable+0x2e>
 8002104:	2300      	movs	r3, #0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d13f      	bne.n	800218a <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	4a20      	ldr	r2, [pc, #128]	; (8002194 <ADC_Enable+0xbc>)
 8002112:	4013      	ands	r3, r2
 8002114:	d00d      	beq.n	8002132 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211a:	2210      	movs	r2, #16
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002126:	2201      	movs	r2, #1
 8002128:	431a      	orrs	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e02c      	b.n	800218c <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2101      	movs	r1, #1
 800213e:	430a      	orrs	r2, r1
 8002140:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002142:	2001      	movs	r0, #1
 8002144:	f000 f828 	bl	8002198 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002148:	f7ff fcc6 	bl	8001ad8 <HAL_GetTick>
 800214c:	0003      	movs	r3, r0
 800214e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002150:	e014      	b.n	800217c <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002152:	f7ff fcc1 	bl	8001ad8 <HAL_GetTick>
 8002156:	0002      	movs	r2, r0
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b0a      	cmp	r3, #10
 800215e:	d90d      	bls.n	800217c <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002164:	2210      	movs	r2, #16
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002170:	2201      	movs	r2, #1
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e007      	b.n	800218c <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2201      	movs	r2, #1
 8002184:	4013      	ands	r3, r2
 8002186:	2b01      	cmp	r3, #1
 8002188:	d1e3      	bne.n	8002152 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	0018      	movs	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	b004      	add	sp, #16
 8002192:	bd80      	pop	{r7, pc}
 8002194:	80000017 	.word	0x80000017

08002198 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <ADC_DelayMicroSecond+0x38>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	490b      	ldr	r1, [pc, #44]	; (80021d4 <ADC_DelayMicroSecond+0x3c>)
 80021a6:	0018      	movs	r0, r3
 80021a8:	f7fd ffae 	bl	8000108 <__udivsi3>
 80021ac:	0003      	movs	r3, r0
 80021ae:	001a      	movs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4353      	muls	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80021b6:	e002      	b.n	80021be <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f9      	bne.n	80021b8 <ADC_DelayMicroSecond+0x20>
  } 
}
 80021c4:	46c0      	nop			; (mov r8, r8)
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	46bd      	mov	sp, r7
 80021ca:	b004      	add	sp, #16
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	20000000 	.word	0x20000000
 80021d4:	000f4240 	.word	0x000f4240

080021d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021d8:	b590      	push	{r4, r7, lr}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	0002      	movs	r2, r0
 80021e0:	6039      	str	r1, [r7, #0]
 80021e2:	1dfb      	adds	r3, r7, #7
 80021e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021e6:	1dfb      	adds	r3, r7, #7
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b7f      	cmp	r3, #127	; 0x7f
 80021ec:	d828      	bhi.n	8002240 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021ee:	4a2f      	ldr	r2, [pc, #188]	; (80022ac <__NVIC_SetPriority+0xd4>)
 80021f0:	1dfb      	adds	r3, r7, #7
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	b25b      	sxtb	r3, r3
 80021f6:	089b      	lsrs	r3, r3, #2
 80021f8:	33c0      	adds	r3, #192	; 0xc0
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	589b      	ldr	r3, [r3, r2]
 80021fe:	1dfa      	adds	r2, r7, #7
 8002200:	7812      	ldrb	r2, [r2, #0]
 8002202:	0011      	movs	r1, r2
 8002204:	2203      	movs	r2, #3
 8002206:	400a      	ands	r2, r1
 8002208:	00d2      	lsls	r2, r2, #3
 800220a:	21ff      	movs	r1, #255	; 0xff
 800220c:	4091      	lsls	r1, r2
 800220e:	000a      	movs	r2, r1
 8002210:	43d2      	mvns	r2, r2
 8002212:	401a      	ands	r2, r3
 8002214:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	019b      	lsls	r3, r3, #6
 800221a:	22ff      	movs	r2, #255	; 0xff
 800221c:	401a      	ands	r2, r3
 800221e:	1dfb      	adds	r3, r7, #7
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	0018      	movs	r0, r3
 8002224:	2303      	movs	r3, #3
 8002226:	4003      	ands	r3, r0
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800222c:	481f      	ldr	r0, [pc, #124]	; (80022ac <__NVIC_SetPriority+0xd4>)
 800222e:	1dfb      	adds	r3, r7, #7
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	b25b      	sxtb	r3, r3
 8002234:	089b      	lsrs	r3, r3, #2
 8002236:	430a      	orrs	r2, r1
 8002238:	33c0      	adds	r3, #192	; 0xc0
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800223e:	e031      	b.n	80022a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002240:	4a1b      	ldr	r2, [pc, #108]	; (80022b0 <__NVIC_SetPriority+0xd8>)
 8002242:	1dfb      	adds	r3, r7, #7
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	0019      	movs	r1, r3
 8002248:	230f      	movs	r3, #15
 800224a:	400b      	ands	r3, r1
 800224c:	3b08      	subs	r3, #8
 800224e:	089b      	lsrs	r3, r3, #2
 8002250:	3306      	adds	r3, #6
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	18d3      	adds	r3, r2, r3
 8002256:	3304      	adds	r3, #4
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	1dfa      	adds	r2, r7, #7
 800225c:	7812      	ldrb	r2, [r2, #0]
 800225e:	0011      	movs	r1, r2
 8002260:	2203      	movs	r2, #3
 8002262:	400a      	ands	r2, r1
 8002264:	00d2      	lsls	r2, r2, #3
 8002266:	21ff      	movs	r1, #255	; 0xff
 8002268:	4091      	lsls	r1, r2
 800226a:	000a      	movs	r2, r1
 800226c:	43d2      	mvns	r2, r2
 800226e:	401a      	ands	r2, r3
 8002270:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	019b      	lsls	r3, r3, #6
 8002276:	22ff      	movs	r2, #255	; 0xff
 8002278:	401a      	ands	r2, r3
 800227a:	1dfb      	adds	r3, r7, #7
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	0018      	movs	r0, r3
 8002280:	2303      	movs	r3, #3
 8002282:	4003      	ands	r3, r0
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002288:	4809      	ldr	r0, [pc, #36]	; (80022b0 <__NVIC_SetPriority+0xd8>)
 800228a:	1dfb      	adds	r3, r7, #7
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	001c      	movs	r4, r3
 8002290:	230f      	movs	r3, #15
 8002292:	4023      	ands	r3, r4
 8002294:	3b08      	subs	r3, #8
 8002296:	089b      	lsrs	r3, r3, #2
 8002298:	430a      	orrs	r2, r1
 800229a:	3306      	adds	r3, #6
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	18c3      	adds	r3, r0, r3
 80022a0:	3304      	adds	r3, #4
 80022a2:	601a      	str	r2, [r3, #0]
}
 80022a4:	46c0      	nop			; (mov r8, r8)
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b003      	add	sp, #12
 80022aa:	bd90      	pop	{r4, r7, pc}
 80022ac:	e000e100 	.word	0xe000e100
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	1e5a      	subs	r2, r3, #1
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	045b      	lsls	r3, r3, #17
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d301      	bcc.n	80022cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022c8:	2301      	movs	r3, #1
 80022ca:	e010      	b.n	80022ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022cc:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <SysTick_Config+0x44>)
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	3a01      	subs	r2, #1
 80022d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022d4:	2301      	movs	r3, #1
 80022d6:	425b      	negs	r3, r3
 80022d8:	2103      	movs	r1, #3
 80022da:	0018      	movs	r0, r3
 80022dc:	f7ff ff7c 	bl	80021d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e0:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <SysTick_Config+0x44>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022e6:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <SysTick_Config+0x44>)
 80022e8:	2207      	movs	r2, #7
 80022ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	0018      	movs	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	b002      	add	sp, #8
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	e000e010 	.word	0xe000e010

080022fc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
 8002306:	210f      	movs	r1, #15
 8002308:	187b      	adds	r3, r7, r1
 800230a:	1c02      	adds	r2, r0, #0
 800230c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	187b      	adds	r3, r7, r1
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	b25b      	sxtb	r3, r3
 8002316:	0011      	movs	r1, r2
 8002318:	0018      	movs	r0, r3
 800231a:	f7ff ff5d 	bl	80021d8 <__NVIC_SetPriority>
}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	46bd      	mov	sp, r7
 8002322:	b004      	add	sp, #16
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	0018      	movs	r0, r3
 8002332:	f7ff ffbf 	bl	80022b4 <SysTick_Config>
 8002336:	0003      	movs	r3, r0
}
 8002338:	0018      	movs	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	b002      	add	sp, #8
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002356:	e143      	b.n	80025e0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2101      	movs	r1, #1
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	4091      	lsls	r1, r2
 8002362:	000a      	movs	r2, r1
 8002364:	4013      	ands	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d100      	bne.n	8002370 <HAL_GPIO_Init+0x30>
 800236e:	e134      	b.n	80025da <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d00b      	beq.n	8002390 <HAL_GPIO_Init+0x50>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b02      	cmp	r3, #2
 800237e:	d007      	beq.n	8002390 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002384:	2b11      	cmp	r3, #17
 8002386:	d003      	beq.n	8002390 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b12      	cmp	r3, #18
 800238e:	d130      	bne.n	80023f2 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	2203      	movs	r2, #3
 800239c:	409a      	lsls	r2, r3
 800239e:	0013      	movs	r3, r2
 80023a0:	43da      	mvns	r2, r3
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	409a      	lsls	r2, r3
 80023b2:	0013      	movs	r3, r2
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023c6:	2201      	movs	r2, #1
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	409a      	lsls	r2, r3
 80023cc:	0013      	movs	r3, r2
 80023ce:	43da      	mvns	r2, r3
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	091b      	lsrs	r3, r3, #4
 80023dc:	2201      	movs	r2, #1
 80023de:	401a      	ands	r2, r3
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	409a      	lsls	r2, r3
 80023e4:	0013      	movs	r3, r2
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	2203      	movs	r2, #3
 80023fe:	409a      	lsls	r2, r3
 8002400:	0013      	movs	r3, r2
 8002402:	43da      	mvns	r2, r3
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4013      	ands	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	409a      	lsls	r2, r3
 8002414:	0013      	movs	r3, r2
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0xf2>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b12      	cmp	r3, #18
 8002430:	d123      	bne.n	800247a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	08da      	lsrs	r2, r3, #3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3208      	adds	r2, #8
 800243a:	0092      	lsls	r2, r2, #2
 800243c:	58d3      	ldr	r3, [r2, r3]
 800243e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	2207      	movs	r2, #7
 8002444:	4013      	ands	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	220f      	movs	r2, #15
 800244a:	409a      	lsls	r2, r3
 800244c:	0013      	movs	r3, r2
 800244e:	43da      	mvns	r2, r3
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4013      	ands	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	691a      	ldr	r2, [r3, #16]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2107      	movs	r1, #7
 800245e:	400b      	ands	r3, r1
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	409a      	lsls	r2, r3
 8002464:	0013      	movs	r3, r2
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	08da      	lsrs	r2, r3, #3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3208      	adds	r2, #8
 8002474:	0092      	lsls	r2, r2, #2
 8002476:	6939      	ldr	r1, [r7, #16]
 8002478:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	2203      	movs	r2, #3
 8002486:	409a      	lsls	r2, r3
 8002488:	0013      	movs	r3, r2
 800248a:	43da      	mvns	r2, r3
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4013      	ands	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2203      	movs	r2, #3
 8002498:	401a      	ands	r2, r3
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	409a      	lsls	r2, r3
 80024a0:	0013      	movs	r3, r2
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	055b      	lsls	r3, r3, #21
 80024b6:	4013      	ands	r3, r2
 80024b8:	d100      	bne.n	80024bc <HAL_GPIO_Init+0x17c>
 80024ba:	e08e      	b.n	80025da <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024bc:	4b4e      	ldr	r3, [pc, #312]	; (80025f8 <HAL_GPIO_Init+0x2b8>)
 80024be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024c0:	4b4d      	ldr	r3, [pc, #308]	; (80025f8 <HAL_GPIO_Init+0x2b8>)
 80024c2:	2101      	movs	r1, #1
 80024c4:	430a      	orrs	r2, r1
 80024c6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80024c8:	4a4c      	ldr	r2, [pc, #304]	; (80025fc <HAL_GPIO_Init+0x2bc>)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	3302      	adds	r3, #2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	589b      	ldr	r3, [r3, r2]
 80024d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2203      	movs	r2, #3
 80024da:	4013      	ands	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	220f      	movs	r2, #15
 80024e0:	409a      	lsls	r2, r3
 80024e2:	0013      	movs	r3, r2
 80024e4:	43da      	mvns	r2, r3
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4013      	ands	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	23a0      	movs	r3, #160	; 0xa0
 80024f0:	05db      	lsls	r3, r3, #23
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d00d      	beq.n	8002512 <HAL_GPIO_Init+0x1d2>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a41      	ldr	r2, [pc, #260]	; (8002600 <HAL_GPIO_Init+0x2c0>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d007      	beq.n	800250e <HAL_GPIO_Init+0x1ce>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a40      	ldr	r2, [pc, #256]	; (8002604 <HAL_GPIO_Init+0x2c4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d101      	bne.n	800250a <HAL_GPIO_Init+0x1ca>
 8002506:	2302      	movs	r3, #2
 8002508:	e004      	b.n	8002514 <HAL_GPIO_Init+0x1d4>
 800250a:	2306      	movs	r3, #6
 800250c:	e002      	b.n	8002514 <HAL_GPIO_Init+0x1d4>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <HAL_GPIO_Init+0x1d4>
 8002512:	2300      	movs	r3, #0
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	2103      	movs	r1, #3
 8002518:	400a      	ands	r2, r1
 800251a:	0092      	lsls	r2, r2, #2
 800251c:	4093      	lsls	r3, r2
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002524:	4935      	ldr	r1, [pc, #212]	; (80025fc <HAL_GPIO_Init+0x2bc>)
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	089b      	lsrs	r3, r3, #2
 800252a:	3302      	adds	r3, #2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002532:	4b35      	ldr	r3, [pc, #212]	; (8002608 <HAL_GPIO_Init+0x2c8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	43da      	mvns	r2, r3
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4013      	ands	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	2380      	movs	r3, #128	; 0x80
 8002548:	025b      	lsls	r3, r3, #9
 800254a:	4013      	ands	r3, r2
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4313      	orrs	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002556:	4b2c      	ldr	r3, [pc, #176]	; (8002608 <HAL_GPIO_Init+0x2c8>)
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800255c:	4b2a      	ldr	r3, [pc, #168]	; (8002608 <HAL_GPIO_Init+0x2c8>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	43da      	mvns	r2, r3
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4013      	ands	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	029b      	lsls	r3, r3, #10
 8002574:	4013      	ands	r3, r2
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4313      	orrs	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002580:	4b21      	ldr	r3, [pc, #132]	; (8002608 <HAL_GPIO_Init+0x2c8>)
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002586:	4b20      	ldr	r3, [pc, #128]	; (8002608 <HAL_GPIO_Init+0x2c8>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	43da      	mvns	r2, r3
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4013      	ands	r3, r2
 8002594:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	2380      	movs	r3, #128	; 0x80
 800259c:	035b      	lsls	r3, r3, #13
 800259e:	4013      	ands	r3, r2
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80025aa:	4b17      	ldr	r3, [pc, #92]	; (8002608 <HAL_GPIO_Init+0x2c8>)
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80025b0:	4b15      	ldr	r3, [pc, #84]	; (8002608 <HAL_GPIO_Init+0x2c8>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	43da      	mvns	r2, r3
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4013      	ands	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	039b      	lsls	r3, r3, #14
 80025c8:	4013      	ands	r3, r2
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <HAL_GPIO_Init+0x2c8>)
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	3301      	adds	r3, #1
 80025de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	40da      	lsrs	r2, r3
 80025e8:	1e13      	subs	r3, r2, #0
 80025ea:	d000      	beq.n	80025ee <HAL_GPIO_Init+0x2ae>
 80025ec:	e6b4      	b.n	8002358 <HAL_GPIO_Init+0x18>
  }
}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	46c0      	nop			; (mov r8, r8)
 80025f2:	46bd      	mov	sp, r7
 80025f4:	b006      	add	sp, #24
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40010000 	.word	0x40010000
 8002600:	50000400 	.word	0x50000400
 8002604:	50000800 	.word	0x50000800
 8002608:	40010400 	.word	0x40010400

0800260c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	000a      	movs	r2, r1
 8002616:	1cbb      	adds	r3, r7, #2
 8002618:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	1cba      	adds	r2, r7, #2
 8002620:	8812      	ldrh	r2, [r2, #0]
 8002622:	4013      	ands	r3, r2
 8002624:	d004      	beq.n	8002630 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002626:	230f      	movs	r3, #15
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	2201      	movs	r2, #1
 800262c:	701a      	strb	r2, [r3, #0]
 800262e:	e003      	b.n	8002638 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002630:	230f      	movs	r3, #15
 8002632:	18fb      	adds	r3, r7, r3
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002638:	230f      	movs	r3, #15
 800263a:	18fb      	adds	r3, r7, r3
 800263c:	781b      	ldrb	r3, [r3, #0]
}
 800263e:	0018      	movs	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	b004      	add	sp, #16
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	0008      	movs	r0, r1
 8002650:	0011      	movs	r1, r2
 8002652:	1cbb      	adds	r3, r7, #2
 8002654:	1c02      	adds	r2, r0, #0
 8002656:	801a      	strh	r2, [r3, #0]
 8002658:	1c7b      	adds	r3, r7, #1
 800265a:	1c0a      	adds	r2, r1, #0
 800265c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800265e:	1c7b      	adds	r3, r7, #1
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d004      	beq.n	8002670 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002666:	1cbb      	adds	r3, r7, #2
 8002668:	881a      	ldrh	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800266e:	e003      	b.n	8002678 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002670:	1cbb      	adds	r3, r7, #2
 8002672:	881a      	ldrh	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002678:	46c0      	nop			; (mov r8, r8)
 800267a:	46bd      	mov	sp, r7
 800267c:	b002      	add	sp, #8
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	000a      	movs	r2, r1
 800268a:	1cbb      	adds	r3, r7, #2
 800268c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002694:	1cbb      	adds	r3, r7, #2
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	4013      	ands	r3, r2
 800269c:	041a      	lsls	r2, r3, #16
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	1cb9      	adds	r1, r7, #2
 80026a4:	8809      	ldrh	r1, [r1, #0]
 80026a6:	400b      	ands	r3, r1
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	619a      	str	r2, [r3, #24]
}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	46bd      	mov	sp, r7
 80026b2:	b004      	add	sp, #16
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b8:	b5b0      	push	{r4, r5, r7, lr}
 80026ba:	b08a      	sub	sp, #40	; 0x28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d102      	bne.n	80026cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	f000 fb6c 	bl	8002da4 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026cc:	4bc8      	ldr	r3, [pc, #800]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	220c      	movs	r2, #12
 80026d2:	4013      	ands	r3, r2
 80026d4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026d6:	4bc6      	ldr	r3, [pc, #792]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	025b      	lsls	r3, r3, #9
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2201      	movs	r2, #1
 80026e8:	4013      	ands	r3, r2
 80026ea:	d100      	bne.n	80026ee <HAL_RCC_OscConfig+0x36>
 80026ec:	e07d      	b.n	80027ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d007      	beq.n	8002704 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	2b0c      	cmp	r3, #12
 80026f8:	d112      	bne.n	8002720 <HAL_RCC_OscConfig+0x68>
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	2380      	movs	r3, #128	; 0x80
 80026fe:	025b      	lsls	r3, r3, #9
 8002700:	429a      	cmp	r2, r3
 8002702:	d10d      	bne.n	8002720 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002704:	4bba      	ldr	r3, [pc, #744]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	2380      	movs	r3, #128	; 0x80
 800270a:	029b      	lsls	r3, r3, #10
 800270c:	4013      	ands	r3, r2
 800270e:	d100      	bne.n	8002712 <HAL_RCC_OscConfig+0x5a>
 8002710:	e06a      	b.n	80027e8 <HAL_RCC_OscConfig+0x130>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d166      	bne.n	80027e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	f000 fb42 	bl	8002da4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	2380      	movs	r3, #128	; 0x80
 8002726:	025b      	lsls	r3, r3, #9
 8002728:	429a      	cmp	r2, r3
 800272a:	d107      	bne.n	800273c <HAL_RCC_OscConfig+0x84>
 800272c:	4bb0      	ldr	r3, [pc, #704]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	4baf      	ldr	r3, [pc, #700]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 8002732:	2180      	movs	r1, #128	; 0x80
 8002734:	0249      	lsls	r1, r1, #9
 8002736:	430a      	orrs	r2, r1
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	e027      	b.n	800278c <HAL_RCC_OscConfig+0xd4>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	23a0      	movs	r3, #160	; 0xa0
 8002742:	02db      	lsls	r3, r3, #11
 8002744:	429a      	cmp	r2, r3
 8002746:	d10e      	bne.n	8002766 <HAL_RCC_OscConfig+0xae>
 8002748:	4ba9      	ldr	r3, [pc, #676]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4ba8      	ldr	r3, [pc, #672]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 800274e:	2180      	movs	r1, #128	; 0x80
 8002750:	02c9      	lsls	r1, r1, #11
 8002752:	430a      	orrs	r2, r1
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	4ba6      	ldr	r3, [pc, #664]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	4ba5      	ldr	r3, [pc, #660]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 800275c:	2180      	movs	r1, #128	; 0x80
 800275e:	0249      	lsls	r1, r1, #9
 8002760:	430a      	orrs	r2, r1
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	e012      	b.n	800278c <HAL_RCC_OscConfig+0xd4>
 8002766:	4ba2      	ldr	r3, [pc, #648]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	4ba1      	ldr	r3, [pc, #644]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 800276c:	49a1      	ldr	r1, [pc, #644]	; (80029f4 <HAL_RCC_OscConfig+0x33c>)
 800276e:	400a      	ands	r2, r1
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	4b9f      	ldr	r3, [pc, #636]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	2380      	movs	r3, #128	; 0x80
 8002778:	025b      	lsls	r3, r3, #9
 800277a:	4013      	ands	r3, r2
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4b9b      	ldr	r3, [pc, #620]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4b9a      	ldr	r3, [pc, #616]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 8002786:	499c      	ldr	r1, [pc, #624]	; (80029f8 <HAL_RCC_OscConfig+0x340>)
 8002788:	400a      	ands	r2, r1
 800278a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d014      	beq.n	80027be <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7ff f9a0 	bl	8001ad8 <HAL_GetTick>
 8002798:	0003      	movs	r3, r0
 800279a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800279e:	f7ff f99b 	bl	8001ad8 <HAL_GetTick>
 80027a2:	0002      	movs	r2, r0
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b64      	cmp	r3, #100	; 0x64
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e2f9      	b.n	8002da4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027b0:	4b8f      	ldr	r3, [pc, #572]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	2380      	movs	r3, #128	; 0x80
 80027b6:	029b      	lsls	r3, r3, #10
 80027b8:	4013      	ands	r3, r2
 80027ba:	d0f0      	beq.n	800279e <HAL_RCC_OscConfig+0xe6>
 80027bc:	e015      	b.n	80027ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027be:	f7ff f98b 	bl	8001ad8 <HAL_GetTick>
 80027c2:	0003      	movs	r3, r0
 80027c4:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027c8:	f7ff f986 	bl	8001ad8 <HAL_GetTick>
 80027cc:	0002      	movs	r2, r0
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b64      	cmp	r3, #100	; 0x64
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e2e4      	b.n	8002da4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027da:	4b85      	ldr	r3, [pc, #532]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	2380      	movs	r3, #128	; 0x80
 80027e0:	029b      	lsls	r3, r3, #10
 80027e2:	4013      	ands	r3, r2
 80027e4:	d1f0      	bne.n	80027c8 <HAL_RCC_OscConfig+0x110>
 80027e6:	e000      	b.n	80027ea <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2202      	movs	r2, #2
 80027f0:	4013      	ands	r3, r2
 80027f2:	d100      	bne.n	80027f6 <HAL_RCC_OscConfig+0x13e>
 80027f4:	e099      	b.n	800292a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	2220      	movs	r2, #32
 8002800:	4013      	ands	r3, r2
 8002802:	d009      	beq.n	8002818 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002804:	4b7a      	ldr	r3, [pc, #488]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4b79      	ldr	r3, [pc, #484]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 800280a:	2120      	movs	r1, #32
 800280c:	430a      	orrs	r2, r1
 800280e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	2220      	movs	r2, #32
 8002814:	4393      	bics	r3, r2
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	2b04      	cmp	r3, #4
 800281c:	d005      	beq.n	800282a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	2b0c      	cmp	r3, #12
 8002822:	d13e      	bne.n	80028a2 <HAL_RCC_OscConfig+0x1ea>
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d13b      	bne.n	80028a2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800282a:	4b71      	ldr	r3, [pc, #452]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2204      	movs	r2, #4
 8002830:	4013      	ands	r3, r2
 8002832:	d004      	beq.n	800283e <HAL_RCC_OscConfig+0x186>
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e2b2      	b.n	8002da4 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283e:	4b6c      	ldr	r3, [pc, #432]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4a6e      	ldr	r2, [pc, #440]	; (80029fc <HAL_RCC_OscConfig+0x344>)
 8002844:	4013      	ands	r3, r2
 8002846:	0019      	movs	r1, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	021a      	lsls	r2, r3, #8
 800284e:	4b68      	ldr	r3, [pc, #416]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 8002850:	430a      	orrs	r2, r1
 8002852:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002854:	4b66      	ldr	r3, [pc, #408]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2209      	movs	r2, #9
 800285a:	4393      	bics	r3, r2
 800285c:	0019      	movs	r1, r3
 800285e:	4b64      	ldr	r3, [pc, #400]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 8002860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002862:	430a      	orrs	r2, r1
 8002864:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002866:	f000 fbeb 	bl	8003040 <HAL_RCC_GetSysClockFreq>
 800286a:	0001      	movs	r1, r0
 800286c:	4b60      	ldr	r3, [pc, #384]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	091b      	lsrs	r3, r3, #4
 8002872:	220f      	movs	r2, #15
 8002874:	4013      	ands	r3, r2
 8002876:	4a62      	ldr	r2, [pc, #392]	; (8002a00 <HAL_RCC_OscConfig+0x348>)
 8002878:	5cd3      	ldrb	r3, [r2, r3]
 800287a:	000a      	movs	r2, r1
 800287c:	40da      	lsrs	r2, r3
 800287e:	4b61      	ldr	r3, [pc, #388]	; (8002a04 <HAL_RCC_OscConfig+0x34c>)
 8002880:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002882:	4b61      	ldr	r3, [pc, #388]	; (8002a08 <HAL_RCC_OscConfig+0x350>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2513      	movs	r5, #19
 8002888:	197c      	adds	r4, r7, r5
 800288a:	0018      	movs	r0, r3
 800288c:	f7ff f8de 	bl	8001a4c <HAL_InitTick>
 8002890:	0003      	movs	r3, r0
 8002892:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002894:	197b      	adds	r3, r7, r5
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d046      	beq.n	800292a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 800289c:	197b      	adds	r3, r7, r5
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	e280      	b.n	8002da4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d027      	beq.n	80028f8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80028a8:	4b51      	ldr	r3, [pc, #324]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2209      	movs	r2, #9
 80028ae:	4393      	bics	r3, r2
 80028b0:	0019      	movs	r1, r3
 80028b2:	4b4f      	ldr	r3, [pc, #316]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 80028b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b6:	430a      	orrs	r2, r1
 80028b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ba:	f7ff f90d 	bl	8001ad8 <HAL_GetTick>
 80028be:	0003      	movs	r3, r0
 80028c0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028c4:	f7ff f908 	bl	8001ad8 <HAL_GetTick>
 80028c8:	0002      	movs	r2, r0
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e266      	b.n	8002da4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028d6:	4b46      	ldr	r3, [pc, #280]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2204      	movs	r2, #4
 80028dc:	4013      	ands	r3, r2
 80028de:	d0f1      	beq.n	80028c4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e0:	4b43      	ldr	r3, [pc, #268]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	4a45      	ldr	r2, [pc, #276]	; (80029fc <HAL_RCC_OscConfig+0x344>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	0019      	movs	r1, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	021a      	lsls	r2, r3, #8
 80028f0:	4b3f      	ldr	r3, [pc, #252]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 80028f2:	430a      	orrs	r2, r1
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	e018      	b.n	800292a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028f8:	4b3d      	ldr	r3, [pc, #244]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4b3c      	ldr	r3, [pc, #240]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 80028fe:	2101      	movs	r1, #1
 8002900:	438a      	bics	r2, r1
 8002902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7ff f8e8 	bl	8001ad8 <HAL_GetTick>
 8002908:	0003      	movs	r3, r0
 800290a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800290e:	f7ff f8e3 	bl	8001ad8 <HAL_GetTick>
 8002912:	0002      	movs	r2, r0
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e241      	b.n	8002da4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002920:	4b33      	ldr	r3, [pc, #204]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2204      	movs	r2, #4
 8002926:	4013      	ands	r3, r2
 8002928:	d1f1      	bne.n	800290e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2210      	movs	r2, #16
 8002930:	4013      	ands	r3, r2
 8002932:	d100      	bne.n	8002936 <HAL_RCC_OscConfig+0x27e>
 8002934:	e0a1      	b.n	8002a7a <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d140      	bne.n	80029be <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800293c:	4b2c      	ldr	r3, [pc, #176]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	2380      	movs	r3, #128	; 0x80
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4013      	ands	r3, r2
 8002946:	d005      	beq.n	8002954 <HAL_RCC_OscConfig+0x29c>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e227      	b.n	8002da4 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002954:	4b26      	ldr	r3, [pc, #152]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	4a2c      	ldr	r2, [pc, #176]	; (8002a0c <HAL_RCC_OscConfig+0x354>)
 800295a:	4013      	ands	r3, r2
 800295c:	0019      	movs	r1, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1a      	ldr	r2, [r3, #32]
 8002962:	4b23      	ldr	r3, [pc, #140]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 8002964:	430a      	orrs	r2, r1
 8002966:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002968:	4b21      	ldr	r3, [pc, #132]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	021b      	lsls	r3, r3, #8
 800296e:	0a19      	lsrs	r1, r3, #8
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	061a      	lsls	r2, r3, #24
 8002976:	4b1e      	ldr	r3, [pc, #120]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 8002978:	430a      	orrs	r2, r1
 800297a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	0b5b      	lsrs	r3, r3, #13
 8002982:	3301      	adds	r3, #1
 8002984:	2280      	movs	r2, #128	; 0x80
 8002986:	0212      	lsls	r2, r2, #8
 8002988:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800298a:	4b19      	ldr	r3, [pc, #100]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	091b      	lsrs	r3, r3, #4
 8002990:	210f      	movs	r1, #15
 8002992:	400b      	ands	r3, r1
 8002994:	491a      	ldr	r1, [pc, #104]	; (8002a00 <HAL_RCC_OscConfig+0x348>)
 8002996:	5ccb      	ldrb	r3, [r1, r3]
 8002998:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800299a:	4b1a      	ldr	r3, [pc, #104]	; (8002a04 <HAL_RCC_OscConfig+0x34c>)
 800299c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800299e:	4b1a      	ldr	r3, [pc, #104]	; (8002a08 <HAL_RCC_OscConfig+0x350>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2513      	movs	r5, #19
 80029a4:	197c      	adds	r4, r7, r5
 80029a6:	0018      	movs	r0, r3
 80029a8:	f7ff f850 	bl	8001a4c <HAL_InitTick>
 80029ac:	0003      	movs	r3, r0
 80029ae:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80029b0:	197b      	adds	r3, r7, r5
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d060      	beq.n	8002a7a <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80029b8:	197b      	adds	r3, r7, r5
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	e1f2      	b.n	8002da4 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d03f      	beq.n	8002a46 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029c6:	4b0a      	ldr	r3, [pc, #40]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <HAL_RCC_OscConfig+0x338>)
 80029cc:	2180      	movs	r1, #128	; 0x80
 80029ce:	0049      	lsls	r1, r1, #1
 80029d0:	430a      	orrs	r2, r1
 80029d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7ff f880 	bl	8001ad8 <HAL_GetTick>
 80029d8:	0003      	movs	r3, r0
 80029da:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80029dc:	e018      	b.n	8002a10 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029de:	f7ff f87b 	bl	8001ad8 <HAL_GetTick>
 80029e2:	0002      	movs	r2, r0
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d911      	bls.n	8002a10 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e1d9      	b.n	8002da4 <HAL_RCC_OscConfig+0x6ec>
 80029f0:	40021000 	.word	0x40021000
 80029f4:	fffeffff 	.word	0xfffeffff
 80029f8:	fffbffff 	.word	0xfffbffff
 80029fc:	ffffe0ff 	.word	0xffffe0ff
 8002a00:	08003e10 	.word	0x08003e10
 8002a04:	20000000 	.word	0x20000000
 8002a08:	20000004 	.word	0x20000004
 8002a0c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a10:	4bc9      	ldr	r3, [pc, #804]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d0e0      	beq.n	80029de <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a1c:	4bc6      	ldr	r3, [pc, #792]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	4ac6      	ldr	r2, [pc, #792]	; (8002d3c <HAL_RCC_OscConfig+0x684>)
 8002a22:	4013      	ands	r3, r2
 8002a24:	0019      	movs	r1, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a1a      	ldr	r2, [r3, #32]
 8002a2a:	4bc3      	ldr	r3, [pc, #780]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a30:	4bc1      	ldr	r3, [pc, #772]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	021b      	lsls	r3, r3, #8
 8002a36:	0a19      	lsrs	r1, r3, #8
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	061a      	lsls	r2, r3, #24
 8002a3e:	4bbe      	ldr	r3, [pc, #760]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002a40:	430a      	orrs	r2, r1
 8002a42:	605a      	str	r2, [r3, #4]
 8002a44:	e019      	b.n	8002a7a <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a46:	4bbc      	ldr	r3, [pc, #752]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	4bbb      	ldr	r3, [pc, #748]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002a4c:	49bc      	ldr	r1, [pc, #752]	; (8002d40 <HAL_RCC_OscConfig+0x688>)
 8002a4e:	400a      	ands	r2, r1
 8002a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a52:	f7ff f841 	bl	8001ad8 <HAL_GetTick>
 8002a56:	0003      	movs	r3, r0
 8002a58:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a5c:	f7ff f83c 	bl	8001ad8 <HAL_GetTick>
 8002a60:	0002      	movs	r2, r0
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e19a      	b.n	8002da4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002a6e:	4bb2      	ldr	r3, [pc, #712]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	2380      	movs	r3, #128	; 0x80
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4013      	ands	r3, r2
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2208      	movs	r2, #8
 8002a80:	4013      	ands	r3, r2
 8002a82:	d036      	beq.n	8002af2 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d019      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a8c:	4baa      	ldr	r3, [pc, #680]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002a8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a90:	4ba9      	ldr	r3, [pc, #676]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002a92:	2101      	movs	r1, #1
 8002a94:	430a      	orrs	r2, r1
 8002a96:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a98:	f7ff f81e 	bl	8001ad8 <HAL_GetTick>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa2:	f7ff f819 	bl	8001ad8 <HAL_GetTick>
 8002aa6:	0002      	movs	r2, r0
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e177      	b.n	8002da4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ab4:	4ba0      	ldr	r3, [pc, #640]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab8:	2202      	movs	r2, #2
 8002aba:	4013      	ands	r3, r2
 8002abc:	d0f1      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x3ea>
 8002abe:	e018      	b.n	8002af2 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ac0:	4b9d      	ldr	r3, [pc, #628]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002ac2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ac4:	4b9c      	ldr	r3, [pc, #624]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	438a      	bics	r2, r1
 8002aca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002acc:	f7ff f804 	bl	8001ad8 <HAL_GetTick>
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ad6:	f7fe ffff 	bl	8001ad8 <HAL_GetTick>
 8002ada:	0002      	movs	r2, r0
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e15d      	b.n	8002da4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ae8:	4b93      	ldr	r3, [pc, #588]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aec:	2202      	movs	r2, #2
 8002aee:	4013      	ands	r3, r2
 8002af0:	d1f1      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2204      	movs	r2, #4
 8002af8:	4013      	ands	r3, r2
 8002afa:	d100      	bne.n	8002afe <HAL_RCC_OscConfig+0x446>
 8002afc:	e0ae      	b.n	8002c5c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002afe:	2023      	movs	r0, #35	; 0x23
 8002b00:	183b      	adds	r3, r7, r0
 8002b02:	2200      	movs	r2, #0
 8002b04:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b06:	4b8c      	ldr	r3, [pc, #560]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002b08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b0a:	2380      	movs	r3, #128	; 0x80
 8002b0c:	055b      	lsls	r3, r3, #21
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d109      	bne.n	8002b26 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b12:	4b89      	ldr	r3, [pc, #548]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002b14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b16:	4b88      	ldr	r3, [pc, #544]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002b18:	2180      	movs	r1, #128	; 0x80
 8002b1a:	0549      	lsls	r1, r1, #21
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002b20:	183b      	adds	r3, r7, r0
 8002b22:	2201      	movs	r2, #1
 8002b24:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b26:	4b87      	ldr	r3, [pc, #540]	; (8002d44 <HAL_RCC_OscConfig+0x68c>)
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	2380      	movs	r3, #128	; 0x80
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d11a      	bne.n	8002b68 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b32:	4b84      	ldr	r3, [pc, #528]	; (8002d44 <HAL_RCC_OscConfig+0x68c>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	4b83      	ldr	r3, [pc, #524]	; (8002d44 <HAL_RCC_OscConfig+0x68c>)
 8002b38:	2180      	movs	r1, #128	; 0x80
 8002b3a:	0049      	lsls	r1, r1, #1
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b40:	f7fe ffca 	bl	8001ad8 <HAL_GetTick>
 8002b44:	0003      	movs	r3, r0
 8002b46:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4a:	f7fe ffc5 	bl	8001ad8 <HAL_GetTick>
 8002b4e:	0002      	movs	r2, r0
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b64      	cmp	r3, #100	; 0x64
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e123      	b.n	8002da4 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5c:	4b79      	ldr	r3, [pc, #484]	; (8002d44 <HAL_RCC_OscConfig+0x68c>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	2380      	movs	r3, #128	; 0x80
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4013      	ands	r3, r2
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	2380      	movs	r3, #128	; 0x80
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d107      	bne.n	8002b84 <HAL_RCC_OscConfig+0x4cc>
 8002b74:	4b70      	ldr	r3, [pc, #448]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002b76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b78:	4b6f      	ldr	r3, [pc, #444]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002b7a:	2180      	movs	r1, #128	; 0x80
 8002b7c:	0049      	lsls	r1, r1, #1
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	651a      	str	r2, [r3, #80]	; 0x50
 8002b82:	e031      	b.n	8002be8 <HAL_RCC_OscConfig+0x530>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10c      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x4ee>
 8002b8c:	4b6a      	ldr	r3, [pc, #424]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002b8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b90:	4b69      	ldr	r3, [pc, #420]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002b92:	496b      	ldr	r1, [pc, #428]	; (8002d40 <HAL_RCC_OscConfig+0x688>)
 8002b94:	400a      	ands	r2, r1
 8002b96:	651a      	str	r2, [r3, #80]	; 0x50
 8002b98:	4b67      	ldr	r3, [pc, #412]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002b9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b9c:	4b66      	ldr	r3, [pc, #408]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002b9e:	496a      	ldr	r1, [pc, #424]	; (8002d48 <HAL_RCC_OscConfig+0x690>)
 8002ba0:	400a      	ands	r2, r1
 8002ba2:	651a      	str	r2, [r3, #80]	; 0x50
 8002ba4:	e020      	b.n	8002be8 <HAL_RCC_OscConfig+0x530>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	23a0      	movs	r3, #160	; 0xa0
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d10e      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x518>
 8002bb2:	4b61      	ldr	r3, [pc, #388]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002bb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bb6:	4b60      	ldr	r3, [pc, #384]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002bb8:	2180      	movs	r1, #128	; 0x80
 8002bba:	00c9      	lsls	r1, r1, #3
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	651a      	str	r2, [r3, #80]	; 0x50
 8002bc0:	4b5d      	ldr	r3, [pc, #372]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002bc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bc4:	4b5c      	ldr	r3, [pc, #368]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002bc6:	2180      	movs	r1, #128	; 0x80
 8002bc8:	0049      	lsls	r1, r1, #1
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	651a      	str	r2, [r3, #80]	; 0x50
 8002bce:	e00b      	b.n	8002be8 <HAL_RCC_OscConfig+0x530>
 8002bd0:	4b59      	ldr	r3, [pc, #356]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002bd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bd4:	4b58      	ldr	r3, [pc, #352]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002bd6:	495a      	ldr	r1, [pc, #360]	; (8002d40 <HAL_RCC_OscConfig+0x688>)
 8002bd8:	400a      	ands	r2, r1
 8002bda:	651a      	str	r2, [r3, #80]	; 0x50
 8002bdc:	4b56      	ldr	r3, [pc, #344]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002bde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002be0:	4b55      	ldr	r3, [pc, #340]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002be2:	4959      	ldr	r1, [pc, #356]	; (8002d48 <HAL_RCC_OscConfig+0x690>)
 8002be4:	400a      	ands	r2, r1
 8002be6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d015      	beq.n	8002c1c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf0:	f7fe ff72 	bl	8001ad8 <HAL_GetTick>
 8002bf4:	0003      	movs	r3, r0
 8002bf6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bf8:	e009      	b.n	8002c0e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bfa:	f7fe ff6d 	bl	8001ad8 <HAL_GetTick>
 8002bfe:	0002      	movs	r2, r0
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	4a51      	ldr	r2, [pc, #324]	; (8002d4c <HAL_RCC_OscConfig+0x694>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e0ca      	b.n	8002da4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c0e:	4b4a      	ldr	r3, [pc, #296]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002c10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c12:	2380      	movs	r3, #128	; 0x80
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4013      	ands	r3, r2
 8002c18:	d0ef      	beq.n	8002bfa <HAL_RCC_OscConfig+0x542>
 8002c1a:	e014      	b.n	8002c46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c1c:	f7fe ff5c 	bl	8001ad8 <HAL_GetTick>
 8002c20:	0003      	movs	r3, r0
 8002c22:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c24:	e009      	b.n	8002c3a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c26:	f7fe ff57 	bl	8001ad8 <HAL_GetTick>
 8002c2a:	0002      	movs	r2, r0
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	4a46      	ldr	r2, [pc, #280]	; (8002d4c <HAL_RCC_OscConfig+0x694>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e0b4      	b.n	8002da4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c3a:	4b3f      	ldr	r3, [pc, #252]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002c3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4013      	ands	r3, r2
 8002c44:	d1ef      	bne.n	8002c26 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c46:	2323      	movs	r3, #35	; 0x23
 8002c48:	18fb      	adds	r3, r7, r3
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d105      	bne.n	8002c5c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c50:	4b39      	ldr	r3, [pc, #228]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c54:	4b38      	ldr	r3, [pc, #224]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002c56:	493e      	ldr	r1, [pc, #248]	; (8002d50 <HAL_RCC_OscConfig+0x698>)
 8002c58:	400a      	ands	r2, r1
 8002c5a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d100      	bne.n	8002c66 <HAL_RCC_OscConfig+0x5ae>
 8002c64:	e09d      	b.n	8002da2 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	2b0c      	cmp	r3, #12
 8002c6a:	d100      	bne.n	8002c6e <HAL_RCC_OscConfig+0x5b6>
 8002c6c:	e076      	b.n	8002d5c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d145      	bne.n	8002d02 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c76:	4b30      	ldr	r3, [pc, #192]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	4b2f      	ldr	r3, [pc, #188]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002c7c:	4935      	ldr	r1, [pc, #212]	; (8002d54 <HAL_RCC_OscConfig+0x69c>)
 8002c7e:	400a      	ands	r2, r1
 8002c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c82:	f7fe ff29 	bl	8001ad8 <HAL_GetTick>
 8002c86:	0003      	movs	r3, r0
 8002c88:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c8c:	f7fe ff24 	bl	8001ad8 <HAL_GetTick>
 8002c90:	0002      	movs	r2, r0
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e082      	b.n	8002da4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002c9e:	4b26      	ldr	r3, [pc, #152]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	2380      	movs	r3, #128	; 0x80
 8002ca4:	049b      	lsls	r3, r3, #18
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d1f0      	bne.n	8002c8c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002caa:	4b23      	ldr	r3, [pc, #140]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	4a2a      	ldr	r2, [pc, #168]	; (8002d58 <HAL_RCC_OscConfig+0x6a0>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	0019      	movs	r1, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	4b1c      	ldr	r3, [pc, #112]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cca:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	4b1a      	ldr	r3, [pc, #104]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002cd0:	2180      	movs	r1, #128	; 0x80
 8002cd2:	0449      	lsls	r1, r1, #17
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd8:	f7fe fefe 	bl	8001ad8 <HAL_GetTick>
 8002cdc:	0003      	movs	r3, r0
 8002cde:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce2:	f7fe fef9 	bl	8001ad8 <HAL_GetTick>
 8002ce6:	0002      	movs	r2, r0
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e057      	b.n	8002da4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002cf4:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	2380      	movs	r3, #128	; 0x80
 8002cfa:	049b      	lsls	r3, r3, #18
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	d0f0      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x62a>
 8002d00:	e04f      	b.n	8002da2 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d02:	4b0d      	ldr	r3, [pc, #52]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002d08:	4912      	ldr	r1, [pc, #72]	; (8002d54 <HAL_RCC_OscConfig+0x69c>)
 8002d0a:	400a      	ands	r2, r1
 8002d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0e:	f7fe fee3 	bl	8001ad8 <HAL_GetTick>
 8002d12:	0003      	movs	r3, r0
 8002d14:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d18:	f7fe fede 	bl	8001ad8 <HAL_GetTick>
 8002d1c:	0002      	movs	r2, r0
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e03c      	b.n	8002da4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d2a:	4b03      	ldr	r3, [pc, #12]	; (8002d38 <HAL_RCC_OscConfig+0x680>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	2380      	movs	r3, #128	; 0x80
 8002d30:	049b      	lsls	r3, r3, #18
 8002d32:	4013      	ands	r3, r2
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCC_OscConfig+0x660>
 8002d36:	e034      	b.n	8002da2 <HAL_RCC_OscConfig+0x6ea>
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	ffff1fff 	.word	0xffff1fff
 8002d40:	fffffeff 	.word	0xfffffeff
 8002d44:	40007000 	.word	0x40007000
 8002d48:	fffffbff 	.word	0xfffffbff
 8002d4c:	00001388 	.word	0x00001388
 8002d50:	efffffff 	.word	0xefffffff
 8002d54:	feffffff 	.word	0xfeffffff
 8002d58:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e01d      	b.n	8002da4 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d68:	4b10      	ldr	r3, [pc, #64]	; (8002dac <HAL_RCC_OscConfig+0x6f4>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	2380      	movs	r3, #128	; 0x80
 8002d72:	025b      	lsls	r3, r3, #9
 8002d74:	401a      	ands	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d10f      	bne.n	8002d9e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	23f0      	movs	r3, #240	; 0xf0
 8002d82:	039b      	lsls	r3, r3, #14
 8002d84:	401a      	ands	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d107      	bne.n	8002d9e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	23c0      	movs	r3, #192	; 0xc0
 8002d92:	041b      	lsls	r3, r3, #16
 8002d94:	401a      	ands	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d001      	beq.n	8002da2 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	0018      	movs	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b00a      	add	sp, #40	; 0x28
 8002daa:	bdb0      	pop	{r4, r5, r7, pc}
 8002dac:	40021000 	.word	0x40021000

08002db0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db0:	b5b0      	push	{r4, r5, r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e128      	b.n	8003016 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dc4:	4b96      	ldr	r3, [pc, #600]	; (8003020 <HAL_RCC_ClockConfig+0x270>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	4013      	ands	r3, r2
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d91e      	bls.n	8002e10 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd2:	4b93      	ldr	r3, [pc, #588]	; (8003020 <HAL_RCC_ClockConfig+0x270>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	4393      	bics	r3, r2
 8002dda:	0019      	movs	r1, r3
 8002ddc:	4b90      	ldr	r3, [pc, #576]	; (8003020 <HAL_RCC_ClockConfig+0x270>)
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002de4:	f7fe fe78 	bl	8001ad8 <HAL_GetTick>
 8002de8:	0003      	movs	r3, r0
 8002dea:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dec:	e009      	b.n	8002e02 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dee:	f7fe fe73 	bl	8001ad8 <HAL_GetTick>
 8002df2:	0002      	movs	r2, r0
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	4a8a      	ldr	r2, [pc, #552]	; (8003024 <HAL_RCC_ClockConfig+0x274>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e109      	b.n	8003016 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e02:	4b87      	ldr	r3, [pc, #540]	; (8003020 <HAL_RCC_ClockConfig+0x270>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2201      	movs	r2, #1
 8002e08:	4013      	ands	r3, r2
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d1ee      	bne.n	8002dee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2202      	movs	r2, #2
 8002e16:	4013      	ands	r3, r2
 8002e18:	d009      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e1a:	4b83      	ldr	r3, [pc, #524]	; (8003028 <HAL_RCC_ClockConfig+0x278>)
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	22f0      	movs	r2, #240	; 0xf0
 8002e20:	4393      	bics	r3, r2
 8002e22:	0019      	movs	r1, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	4b7f      	ldr	r3, [pc, #508]	; (8003028 <HAL_RCC_ClockConfig+0x278>)
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2201      	movs	r2, #1
 8002e34:	4013      	ands	r3, r2
 8002e36:	d100      	bne.n	8002e3a <HAL_RCC_ClockConfig+0x8a>
 8002e38:	e089      	b.n	8002f4e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d107      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e42:	4b79      	ldr	r3, [pc, #484]	; (8003028 <HAL_RCC_ClockConfig+0x278>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	2380      	movs	r3, #128	; 0x80
 8002e48:	029b      	lsls	r3, r3, #10
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d120      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e0e1      	b.n	8003016 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b03      	cmp	r3, #3
 8002e58:	d107      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e5a:	4b73      	ldr	r3, [pc, #460]	; (8003028 <HAL_RCC_ClockConfig+0x278>)
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	2380      	movs	r3, #128	; 0x80
 8002e60:	049b      	lsls	r3, r3, #18
 8002e62:	4013      	ands	r3, r2
 8002e64:	d114      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e0d5      	b.n	8003016 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d106      	bne.n	8002e80 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e72:	4b6d      	ldr	r3, [pc, #436]	; (8003028 <HAL_RCC_ClockConfig+0x278>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2204      	movs	r2, #4
 8002e78:	4013      	ands	r3, r2
 8002e7a:	d109      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0ca      	b.n	8003016 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e80:	4b69      	ldr	r3, [pc, #420]	; (8003028 <HAL_RCC_ClockConfig+0x278>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	2380      	movs	r3, #128	; 0x80
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d101      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0c2      	b.n	8003016 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e90:	4b65      	ldr	r3, [pc, #404]	; (8003028 <HAL_RCC_ClockConfig+0x278>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	2203      	movs	r2, #3
 8002e96:	4393      	bics	r3, r2
 8002e98:	0019      	movs	r1, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	4b62      	ldr	r3, [pc, #392]	; (8003028 <HAL_RCC_ClockConfig+0x278>)
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ea4:	f7fe fe18 	bl	8001ad8 <HAL_GetTick>
 8002ea8:	0003      	movs	r3, r0
 8002eaa:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d111      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002eb4:	e009      	b.n	8002eca <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eb6:	f7fe fe0f 	bl	8001ad8 <HAL_GetTick>
 8002eba:	0002      	movs	r2, r0
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	4a58      	ldr	r2, [pc, #352]	; (8003024 <HAL_RCC_ClockConfig+0x274>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e0a5      	b.n	8003016 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002eca:	4b57      	ldr	r3, [pc, #348]	; (8003028 <HAL_RCC_ClockConfig+0x278>)
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	220c      	movs	r2, #12
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d1ef      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0x106>
 8002ed6:	e03a      	b.n	8002f4e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	d111      	bne.n	8002f04 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ee0:	e009      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee2:	f7fe fdf9 	bl	8001ad8 <HAL_GetTick>
 8002ee6:	0002      	movs	r2, r0
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	4a4d      	ldr	r2, [pc, #308]	; (8003024 <HAL_RCC_ClockConfig+0x274>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e08f      	b.n	8003016 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ef6:	4b4c      	ldr	r3, [pc, #304]	; (8003028 <HAL_RCC_ClockConfig+0x278>)
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	220c      	movs	r2, #12
 8002efc:	4013      	ands	r3, r2
 8002efe:	2b0c      	cmp	r3, #12
 8002f00:	d1ef      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0x132>
 8002f02:	e024      	b.n	8002f4e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d11b      	bne.n	8002f44 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f0c:	e009      	b.n	8002f22 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f0e:	f7fe fde3 	bl	8001ad8 <HAL_GetTick>
 8002f12:	0002      	movs	r2, r0
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	4a42      	ldr	r2, [pc, #264]	; (8003024 <HAL_RCC_ClockConfig+0x274>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e079      	b.n	8003016 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f22:	4b41      	ldr	r3, [pc, #260]	; (8003028 <HAL_RCC_ClockConfig+0x278>)
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	220c      	movs	r2, #12
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d1ef      	bne.n	8002f0e <HAL_RCC_ClockConfig+0x15e>
 8002f2e:	e00e      	b.n	8002f4e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f30:	f7fe fdd2 	bl	8001ad8 <HAL_GetTick>
 8002f34:	0002      	movs	r2, r0
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	4a3a      	ldr	r2, [pc, #232]	; (8003024 <HAL_RCC_ClockConfig+0x274>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e068      	b.n	8003016 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f44:	4b38      	ldr	r3, [pc, #224]	; (8003028 <HAL_RCC_ClockConfig+0x278>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	220c      	movs	r2, #12
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f4e:	4b34      	ldr	r3, [pc, #208]	; (8003020 <HAL_RCC_ClockConfig+0x270>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2201      	movs	r2, #1
 8002f54:	4013      	ands	r3, r2
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d21e      	bcs.n	8002f9a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5c:	4b30      	ldr	r3, [pc, #192]	; (8003020 <HAL_RCC_ClockConfig+0x270>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2201      	movs	r2, #1
 8002f62:	4393      	bics	r3, r2
 8002f64:	0019      	movs	r1, r3
 8002f66:	4b2e      	ldr	r3, [pc, #184]	; (8003020 <HAL_RCC_ClockConfig+0x270>)
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f6e:	f7fe fdb3 	bl	8001ad8 <HAL_GetTick>
 8002f72:	0003      	movs	r3, r0
 8002f74:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f76:	e009      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f78:	f7fe fdae 	bl	8001ad8 <HAL_GetTick>
 8002f7c:	0002      	movs	r2, r0
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	4a28      	ldr	r2, [pc, #160]	; (8003024 <HAL_RCC_ClockConfig+0x274>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e044      	b.n	8003016 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8c:	4b24      	ldr	r3, [pc, #144]	; (8003020 <HAL_RCC_ClockConfig+0x270>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2201      	movs	r2, #1
 8002f92:	4013      	ands	r3, r2
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d1ee      	bne.n	8002f78 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2204      	movs	r2, #4
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d009      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fa4:	4b20      	ldr	r3, [pc, #128]	; (8003028 <HAL_RCC_ClockConfig+0x278>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	4a20      	ldr	r2, [pc, #128]	; (800302c <HAL_RCC_ClockConfig+0x27c>)
 8002faa:	4013      	ands	r3, r2
 8002fac:	0019      	movs	r1, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	4b1d      	ldr	r3, [pc, #116]	; (8003028 <HAL_RCC_ClockConfig+0x278>)
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2208      	movs	r2, #8
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d00a      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fc2:	4b19      	ldr	r3, [pc, #100]	; (8003028 <HAL_RCC_ClockConfig+0x278>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	4a1a      	ldr	r2, [pc, #104]	; (8003030 <HAL_RCC_ClockConfig+0x280>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	0019      	movs	r1, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	00da      	lsls	r2, r3, #3
 8002fd2:	4b15      	ldr	r3, [pc, #84]	; (8003028 <HAL_RCC_ClockConfig+0x278>)
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fd8:	f000 f832 	bl	8003040 <HAL_RCC_GetSysClockFreq>
 8002fdc:	0001      	movs	r1, r0
 8002fde:	4b12      	ldr	r3, [pc, #72]	; (8003028 <HAL_RCC_ClockConfig+0x278>)
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	091b      	lsrs	r3, r3, #4
 8002fe4:	220f      	movs	r2, #15
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	4a12      	ldr	r2, [pc, #72]	; (8003034 <HAL_RCC_ClockConfig+0x284>)
 8002fea:	5cd3      	ldrb	r3, [r2, r3]
 8002fec:	000a      	movs	r2, r1
 8002fee:	40da      	lsrs	r2, r3
 8002ff0:	4b11      	ldr	r3, [pc, #68]	; (8003038 <HAL_RCC_ClockConfig+0x288>)
 8002ff2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ff4:	4b11      	ldr	r3, [pc, #68]	; (800303c <HAL_RCC_ClockConfig+0x28c>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	250b      	movs	r5, #11
 8002ffa:	197c      	adds	r4, r7, r5
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	f7fe fd25 	bl	8001a4c <HAL_InitTick>
 8003002:	0003      	movs	r3, r0
 8003004:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003006:	197b      	adds	r3, r7, r5
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800300e:	197b      	adds	r3, r7, r5
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	e000      	b.n	8003016 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	0018      	movs	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	b004      	add	sp, #16
 800301c:	bdb0      	pop	{r4, r5, r7, pc}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	40022000 	.word	0x40022000
 8003024:	00001388 	.word	0x00001388
 8003028:	40021000 	.word	0x40021000
 800302c:	fffff8ff 	.word	0xfffff8ff
 8003030:	ffffc7ff 	.word	0xffffc7ff
 8003034:	08003e10 	.word	0x08003e10
 8003038:	20000000 	.word	0x20000000
 800303c:	20000004 	.word	0x20000004

08003040 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003040:	b5b0      	push	{r4, r5, r7, lr}
 8003042:	b08e      	sub	sp, #56	; 0x38
 8003044:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003046:	4b4c      	ldr	r3, [pc, #304]	; (8003178 <HAL_RCC_GetSysClockFreq+0x138>)
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800304c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800304e:	230c      	movs	r3, #12
 8003050:	4013      	ands	r3, r2
 8003052:	2b0c      	cmp	r3, #12
 8003054:	d014      	beq.n	8003080 <HAL_RCC_GetSysClockFreq+0x40>
 8003056:	d900      	bls.n	800305a <HAL_RCC_GetSysClockFreq+0x1a>
 8003058:	e07b      	b.n	8003152 <HAL_RCC_GetSysClockFreq+0x112>
 800305a:	2b04      	cmp	r3, #4
 800305c:	d002      	beq.n	8003064 <HAL_RCC_GetSysClockFreq+0x24>
 800305e:	2b08      	cmp	r3, #8
 8003060:	d00b      	beq.n	800307a <HAL_RCC_GetSysClockFreq+0x3a>
 8003062:	e076      	b.n	8003152 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003064:	4b44      	ldr	r3, [pc, #272]	; (8003178 <HAL_RCC_GetSysClockFreq+0x138>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2210      	movs	r2, #16
 800306a:	4013      	ands	r3, r2
 800306c:	d002      	beq.n	8003074 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800306e:	4b43      	ldr	r3, [pc, #268]	; (800317c <HAL_RCC_GetSysClockFreq+0x13c>)
 8003070:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003072:	e07c      	b.n	800316e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003074:	4b42      	ldr	r3, [pc, #264]	; (8003180 <HAL_RCC_GetSysClockFreq+0x140>)
 8003076:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003078:	e079      	b.n	800316e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800307a:	4b42      	ldr	r3, [pc, #264]	; (8003184 <HAL_RCC_GetSysClockFreq+0x144>)
 800307c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800307e:	e076      	b.n	800316e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003082:	0c9a      	lsrs	r2, r3, #18
 8003084:	230f      	movs	r3, #15
 8003086:	401a      	ands	r2, r3
 8003088:	4b3f      	ldr	r3, [pc, #252]	; (8003188 <HAL_RCC_GetSysClockFreq+0x148>)
 800308a:	5c9b      	ldrb	r3, [r3, r2]
 800308c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800308e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003090:	0d9a      	lsrs	r2, r3, #22
 8003092:	2303      	movs	r3, #3
 8003094:	4013      	ands	r3, r2
 8003096:	3301      	adds	r3, #1
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800309a:	4b37      	ldr	r3, [pc, #220]	; (8003178 <HAL_RCC_GetSysClockFreq+0x138>)
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	025b      	lsls	r3, r3, #9
 80030a2:	4013      	ands	r3, r2
 80030a4:	d01a      	beq.n	80030dc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80030a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a8:	61bb      	str	r3, [r7, #24]
 80030aa:	2300      	movs	r3, #0
 80030ac:	61fb      	str	r3, [r7, #28]
 80030ae:	4a35      	ldr	r2, [pc, #212]	; (8003184 <HAL_RCC_GetSysClockFreq+0x144>)
 80030b0:	2300      	movs	r3, #0
 80030b2:	69b8      	ldr	r0, [r7, #24]
 80030b4:	69f9      	ldr	r1, [r7, #28]
 80030b6:	f7fd f8d3 	bl	8000260 <__aeabi_lmul>
 80030ba:	0002      	movs	r2, r0
 80030bc:	000b      	movs	r3, r1
 80030be:	0010      	movs	r0, r2
 80030c0:	0019      	movs	r1, r3
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f7fd f8a7 	bl	8000220 <__aeabi_uldivmod>
 80030d2:	0002      	movs	r2, r0
 80030d4:	000b      	movs	r3, r1
 80030d6:	0013      	movs	r3, r2
 80030d8:	637b      	str	r3, [r7, #52]	; 0x34
 80030da:	e037      	b.n	800314c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80030dc:	4b26      	ldr	r3, [pc, #152]	; (8003178 <HAL_RCC_GetSysClockFreq+0x138>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2210      	movs	r2, #16
 80030e2:	4013      	ands	r3, r2
 80030e4:	d01a      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80030e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	2300      	movs	r3, #0
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	4a23      	ldr	r2, [pc, #140]	; (800317c <HAL_RCC_GetSysClockFreq+0x13c>)
 80030f0:	2300      	movs	r3, #0
 80030f2:	68b8      	ldr	r0, [r7, #8]
 80030f4:	68f9      	ldr	r1, [r7, #12]
 80030f6:	f7fd f8b3 	bl	8000260 <__aeabi_lmul>
 80030fa:	0002      	movs	r2, r0
 80030fc:	000b      	movs	r3, r1
 80030fe:	0010      	movs	r0, r2
 8003100:	0019      	movs	r1, r3
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	603b      	str	r3, [r7, #0]
 8003106:	2300      	movs	r3, #0
 8003108:	607b      	str	r3, [r7, #4]
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f7fd f887 	bl	8000220 <__aeabi_uldivmod>
 8003112:	0002      	movs	r2, r0
 8003114:	000b      	movs	r3, r1
 8003116:	0013      	movs	r3, r2
 8003118:	637b      	str	r3, [r7, #52]	; 0x34
 800311a:	e017      	b.n	800314c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800311c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311e:	0018      	movs	r0, r3
 8003120:	2300      	movs	r3, #0
 8003122:	0019      	movs	r1, r3
 8003124:	4a16      	ldr	r2, [pc, #88]	; (8003180 <HAL_RCC_GetSysClockFreq+0x140>)
 8003126:	2300      	movs	r3, #0
 8003128:	f7fd f89a 	bl	8000260 <__aeabi_lmul>
 800312c:	0002      	movs	r2, r0
 800312e:	000b      	movs	r3, r1
 8003130:	0010      	movs	r0, r2
 8003132:	0019      	movs	r1, r3
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	001c      	movs	r4, r3
 8003138:	2300      	movs	r3, #0
 800313a:	001d      	movs	r5, r3
 800313c:	0022      	movs	r2, r4
 800313e:	002b      	movs	r3, r5
 8003140:	f7fd f86e 	bl	8000220 <__aeabi_uldivmod>
 8003144:	0002      	movs	r2, r0
 8003146:	000b      	movs	r3, r1
 8003148:	0013      	movs	r3, r2
 800314a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800314c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800314e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003150:	e00d      	b.n	800316e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003152:	4b09      	ldr	r3, [pc, #36]	; (8003178 <HAL_RCC_GetSysClockFreq+0x138>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	0b5b      	lsrs	r3, r3, #13
 8003158:	2207      	movs	r2, #7
 800315a:	4013      	ands	r3, r2
 800315c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	3301      	adds	r3, #1
 8003162:	2280      	movs	r2, #128	; 0x80
 8003164:	0212      	lsls	r2, r2, #8
 8003166:	409a      	lsls	r2, r3
 8003168:	0013      	movs	r3, r2
 800316a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800316c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800316e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003170:	0018      	movs	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	b00e      	add	sp, #56	; 0x38
 8003176:	bdb0      	pop	{r4, r5, r7, pc}
 8003178:	40021000 	.word	0x40021000
 800317c:	003d0900 	.word	0x003d0900
 8003180:	00f42400 	.word	0x00f42400
 8003184:	007a1200 	.word	0x007a1200
 8003188:	08003e20 	.word	0x08003e20

0800318c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e07b      	b.n	8003296 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d109      	bne.n	80031ba <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	2382      	movs	r3, #130	; 0x82
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d009      	beq.n	80031c6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	61da      	str	r2, [r3, #28]
 80031b8:	e005      	b.n	80031c6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2251      	movs	r2, #81	; 0x51
 80031d0:	5c9b      	ldrb	r3, [r3, r2]
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d107      	bne.n	80031e8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2250      	movs	r2, #80	; 0x50
 80031dc:	2100      	movs	r1, #0
 80031de:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	0018      	movs	r0, r3
 80031e4:	f7fe fb70 	bl	80018c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2251      	movs	r2, #81	; 0x51
 80031ec:	2102      	movs	r1, #2
 80031ee:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2140      	movs	r1, #64	; 0x40
 80031fc:	438a      	bics	r2, r1
 80031fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	2382      	movs	r3, #130	; 0x82
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	401a      	ands	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6899      	ldr	r1, [r3, #8]
 800320e:	2384      	movs	r3, #132	; 0x84
 8003210:	021b      	lsls	r3, r3, #8
 8003212:	400b      	ands	r3, r1
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68d9      	ldr	r1, [r3, #12]
 800321a:	2380      	movs	r3, #128	; 0x80
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	400b      	ands	r3, r1
 8003220:	431a      	orrs	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	2102      	movs	r1, #2
 8003228:	400b      	ands	r3, r1
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	2101      	movs	r1, #1
 8003232:	400b      	ands	r3, r1
 8003234:	431a      	orrs	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6999      	ldr	r1, [r3, #24]
 800323a:	2380      	movs	r3, #128	; 0x80
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	400b      	ands	r3, r1
 8003240:	431a      	orrs	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	2138      	movs	r1, #56	; 0x38
 8003248:	400b      	ands	r3, r1
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	2180      	movs	r1, #128	; 0x80
 8003252:	400b      	ands	r3, r1
 8003254:	431a      	orrs	r2, r3
 8003256:	0011      	movs	r1, r2
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800325c:	2380      	movs	r3, #128	; 0x80
 800325e:	019b      	lsls	r3, r3, #6
 8003260:	401a      	ands	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	0c1b      	lsrs	r3, r3, #16
 8003270:	2204      	movs	r2, #4
 8003272:	4013      	ands	r3, r2
 8003274:	0019      	movs	r1, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	2210      	movs	r2, #16
 800327c:	401a      	ands	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2251      	movs	r2, #81	; 0x51
 8003290:	2101      	movs	r1, #1
 8003292:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	0018      	movs	r0, r3
 8003298:	46bd      	mov	sp, r7
 800329a:	b002      	add	sp, #8
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b088      	sub	sp, #32
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	60f8      	str	r0, [r7, #12]
 80032a6:	60b9      	str	r1, [r7, #8]
 80032a8:	603b      	str	r3, [r7, #0]
 80032aa:	1dbb      	adds	r3, r7, #6
 80032ac:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032ae:	231f      	movs	r3, #31
 80032b0:	18fb      	adds	r3, r7, r3
 80032b2:	2200      	movs	r2, #0
 80032b4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2250      	movs	r2, #80	; 0x50
 80032ba:	5c9b      	ldrb	r3, [r3, r2]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d101      	bne.n	80032c4 <HAL_SPI_Transmit+0x26>
 80032c0:	2302      	movs	r3, #2
 80032c2:	e13e      	b.n	8003542 <HAL_SPI_Transmit+0x2a4>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2250      	movs	r2, #80	; 0x50
 80032c8:	2101      	movs	r1, #1
 80032ca:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032cc:	f7fe fc04 	bl	8001ad8 <HAL_GetTick>
 80032d0:	0003      	movs	r3, r0
 80032d2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80032d4:	2316      	movs	r3, #22
 80032d6:	18fb      	adds	r3, r7, r3
 80032d8:	1dba      	adds	r2, r7, #6
 80032da:	8812      	ldrh	r2, [r2, #0]
 80032dc:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2251      	movs	r2, #81	; 0x51
 80032e2:	5c9b      	ldrb	r3, [r3, r2]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d004      	beq.n	80032f4 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80032ea:	231f      	movs	r3, #31
 80032ec:	18fb      	adds	r3, r7, r3
 80032ee:	2202      	movs	r2, #2
 80032f0:	701a      	strb	r2, [r3, #0]
    goto error;
 80032f2:	e11b      	b.n	800352c <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_SPI_Transmit+0x64>
 80032fa:	1dbb      	adds	r3, r7, #6
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d104      	bne.n	800330c <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003302:	231f      	movs	r3, #31
 8003304:	18fb      	adds	r3, r7, r3
 8003306:	2201      	movs	r2, #1
 8003308:	701a      	strb	r2, [r3, #0]
    goto error;
 800330a:	e10f      	b.n	800352c <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2251      	movs	r2, #81	; 0x51
 8003310:	2103      	movs	r1, #3
 8003312:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	1dba      	adds	r2, r7, #6
 8003324:	8812      	ldrh	r2, [r2, #0]
 8003326:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	1dba      	adds	r2, r7, #6
 800332c:	8812      	ldrh	r2, [r2, #0]
 800332e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	2380      	movs	r3, #128	; 0x80
 8003354:	021b      	lsls	r3, r3, #8
 8003356:	429a      	cmp	r2, r3
 8003358:	d110      	bne.n	800337c <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2140      	movs	r1, #64	; 0x40
 8003366:	438a      	bics	r2, r1
 8003368:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2180      	movs	r1, #128	; 0x80
 8003376:	01c9      	lsls	r1, r1, #7
 8003378:	430a      	orrs	r2, r1
 800337a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2240      	movs	r2, #64	; 0x40
 8003384:	4013      	ands	r3, r2
 8003386:	2b40      	cmp	r3, #64	; 0x40
 8003388:	d007      	beq.n	800339a <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2140      	movs	r1, #64	; 0x40
 8003396:	430a      	orrs	r2, r1
 8003398:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	2380      	movs	r3, #128	; 0x80
 80033a0:	011b      	lsls	r3, r3, #4
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d14e      	bne.n	8003444 <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d004      	beq.n	80033b8 <HAL_SPI_Transmit+0x11a>
 80033ae:	2316      	movs	r3, #22
 80033b0:	18fb      	adds	r3, r7, r3
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d13f      	bne.n	8003438 <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033bc:	881a      	ldrh	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	1c9a      	adds	r2, r3, #2
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033dc:	e02c      	b.n	8003438 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	2202      	movs	r2, #2
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d112      	bne.n	8003412 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	881a      	ldrh	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fc:	1c9a      	adds	r2, r3, #2
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003406:	b29b      	uxth	r3, r3
 8003408:	3b01      	subs	r3, #1
 800340a:	b29a      	uxth	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003410:	e012      	b.n	8003438 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003412:	f7fe fb61 	bl	8001ad8 <HAL_GetTick>
 8003416:	0002      	movs	r2, r0
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d802      	bhi.n	8003428 <HAL_SPI_Transmit+0x18a>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	3301      	adds	r3, #1
 8003426:	d102      	bne.n	800342e <HAL_SPI_Transmit+0x190>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d104      	bne.n	8003438 <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 800342e:	231f      	movs	r3, #31
 8003430:	18fb      	adds	r3, r7, r3
 8003432:	2203      	movs	r2, #3
 8003434:	701a      	strb	r2, [r3, #0]
          goto error;
 8003436:	e079      	b.n	800352c <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800343c:	b29b      	uxth	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1cd      	bne.n	80033de <HAL_SPI_Transmit+0x140>
 8003442:	e04f      	b.n	80034e4 <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d004      	beq.n	8003456 <HAL_SPI_Transmit+0x1b8>
 800344c:	2316      	movs	r3, #22
 800344e:	18fb      	adds	r3, r7, r3
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d141      	bne.n	80034da <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	330c      	adds	r3, #12
 8003460:	7812      	ldrb	r2, [r2, #0]
 8003462:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003472:	b29b      	uxth	r3, r3
 8003474:	3b01      	subs	r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800347c:	e02d      	b.n	80034da <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2202      	movs	r2, #2
 8003486:	4013      	ands	r3, r2
 8003488:	2b02      	cmp	r3, #2
 800348a:	d113      	bne.n	80034b4 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	330c      	adds	r3, #12
 8003496:	7812      	ldrb	r2, [r2, #0]
 8003498:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	3b01      	subs	r3, #1
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	86da      	strh	r2, [r3, #54]	; 0x36
 80034b2:	e012      	b.n	80034da <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034b4:	f7fe fb10 	bl	8001ad8 <HAL_GetTick>
 80034b8:	0002      	movs	r2, r0
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d802      	bhi.n	80034ca <HAL_SPI_Transmit+0x22c>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	3301      	adds	r3, #1
 80034c8:	d102      	bne.n	80034d0 <HAL_SPI_Transmit+0x232>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d104      	bne.n	80034da <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 80034d0:	231f      	movs	r3, #31
 80034d2:	18fb      	adds	r3, r7, r3
 80034d4:	2203      	movs	r2, #3
 80034d6:	701a      	strb	r2, [r3, #0]
          goto error;
 80034d8:	e028      	b.n	800352c <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034de:	b29b      	uxth	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1cc      	bne.n	800347e <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	6839      	ldr	r1, [r7, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	0018      	movs	r0, r3
 80034ec:	f000 fc08 	bl	8003d00 <SPI_EndRxTxTransaction>
 80034f0:	1e03      	subs	r3, r0, #0
 80034f2:	d002      	beq.n	80034fa <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2220      	movs	r2, #32
 80034f8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10a      	bne.n	8003518 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003502:	2300      	movs	r3, #0
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351c:	2b00      	cmp	r3, #0
 800351e:	d004      	beq.n	800352a <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 8003520:	231f      	movs	r3, #31
 8003522:	18fb      	adds	r3, r7, r3
 8003524:	2201      	movs	r2, #1
 8003526:	701a      	strb	r2, [r3, #0]
 8003528:	e000      	b.n	800352c <HAL_SPI_Transmit+0x28e>
  }

error:
 800352a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2251      	movs	r2, #81	; 0x51
 8003530:	2101      	movs	r1, #1
 8003532:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2250      	movs	r2, #80	; 0x50
 8003538:	2100      	movs	r1, #0
 800353a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800353c:	231f      	movs	r3, #31
 800353e:	18fb      	adds	r3, r7, r3
 8003540:	781b      	ldrb	r3, [r3, #0]
}
 8003542:	0018      	movs	r0, r3
 8003544:	46bd      	mov	sp, r7
 8003546:	b008      	add	sp, #32
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800354c:	b590      	push	{r4, r7, lr}
 800354e:	b089      	sub	sp, #36	; 0x24
 8003550:	af02      	add	r7, sp, #8
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	603b      	str	r3, [r7, #0]
 8003558:	1dbb      	adds	r3, r7, #6
 800355a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800355c:	2317      	movs	r3, #23
 800355e:	18fb      	adds	r3, r7, r3
 8003560:	2200      	movs	r2, #0
 8003562:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	2382      	movs	r3, #130	; 0x82
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	429a      	cmp	r2, r3
 800356e:	d113      	bne.n	8003598 <HAL_SPI_Receive+0x4c>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10f      	bne.n	8003598 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2251      	movs	r2, #81	; 0x51
 800357c:	2104      	movs	r1, #4
 800357e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003580:	1dbb      	adds	r3, r7, #6
 8003582:	881c      	ldrh	r4, [r3, #0]
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	68b9      	ldr	r1, [r7, #8]
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	0023      	movs	r3, r4
 8003590:	f000 f902 	bl	8003798 <HAL_SPI_TransmitReceive>
 8003594:	0003      	movs	r3, r0
 8003596:	e0f9      	b.n	800378c <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2250      	movs	r2, #80	; 0x50
 800359c:	5c9b      	ldrb	r3, [r3, r2]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <HAL_SPI_Receive+0x5a>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e0f2      	b.n	800378c <HAL_SPI_Receive+0x240>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2250      	movs	r2, #80	; 0x50
 80035aa:	2101      	movs	r1, #1
 80035ac:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035ae:	f7fe fa93 	bl	8001ad8 <HAL_GetTick>
 80035b2:	0003      	movs	r3, r0
 80035b4:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2251      	movs	r2, #81	; 0x51
 80035ba:	5c9b      	ldrb	r3, [r3, r2]
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d004      	beq.n	80035cc <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80035c2:	2317      	movs	r3, #23
 80035c4:	18fb      	adds	r3, r7, r3
 80035c6:	2202      	movs	r2, #2
 80035c8:	701a      	strb	r2, [r3, #0]
    goto error;
 80035ca:	e0d4      	b.n	8003776 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_SPI_Receive+0x8e>
 80035d2:	1dbb      	adds	r3, r7, #6
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d104      	bne.n	80035e4 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80035da:	2317      	movs	r3, #23
 80035dc:	18fb      	adds	r3, r7, r3
 80035de:	2201      	movs	r2, #1
 80035e0:	701a      	strb	r2, [r3, #0]
    goto error;
 80035e2:	e0c8      	b.n	8003776 <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2251      	movs	r2, #81	; 0x51
 80035e8:	2104      	movs	r1, #4
 80035ea:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	1dba      	adds	r2, r7, #6
 80035fc:	8812      	ldrh	r2, [r2, #0]
 80035fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	1dba      	adds	r2, r7, #6
 8003604:	8812      	ldrh	r2, [r2, #0]
 8003606:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	689a      	ldr	r2, [r3, #8]
 800362a:	2380      	movs	r3, #128	; 0x80
 800362c:	021b      	lsls	r3, r3, #8
 800362e:	429a      	cmp	r2, r3
 8003630:	d10f      	bne.n	8003652 <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2140      	movs	r1, #64	; 0x40
 800363e:	438a      	bics	r2, r1
 8003640:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4951      	ldr	r1, [pc, #324]	; (8003794 <HAL_SPI_Receive+0x248>)
 800364e:	400a      	ands	r2, r1
 8003650:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2240      	movs	r2, #64	; 0x40
 800365a:	4013      	ands	r3, r2
 800365c:	2b40      	cmp	r3, #64	; 0x40
 800365e:	d007      	beq.n	8003670 <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2140      	movs	r1, #64	; 0x40
 800366c:	430a      	orrs	r2, r1
 800366e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d164      	bne.n	8003742 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003678:	e02f      	b.n	80036da <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2201      	movs	r2, #1
 8003682:	4013      	ands	r3, r2
 8003684:	2b01      	cmp	r3, #1
 8003686:	d115      	bne.n	80036b4 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	330c      	adds	r3, #12
 800368e:	001a      	movs	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003694:	7812      	ldrb	r2, [r2, #0]
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036b2:	e012      	b.n	80036da <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036b4:	f7fe fa10 	bl	8001ad8 <HAL_GetTick>
 80036b8:	0002      	movs	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d802      	bhi.n	80036ca <HAL_SPI_Receive+0x17e>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	3301      	adds	r3, #1
 80036c8:	d102      	bne.n	80036d0 <HAL_SPI_Receive+0x184>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d104      	bne.n	80036da <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 80036d0:	2317      	movs	r3, #23
 80036d2:	18fb      	adds	r3, r7, r3
 80036d4:	2203      	movs	r2, #3
 80036d6:	701a      	strb	r2, [r3, #0]
          goto error;
 80036d8:	e04d      	b.n	8003776 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036de:	b29b      	uxth	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1ca      	bne.n	800367a <HAL_SPI_Receive+0x12e>
 80036e4:	e032      	b.n	800374c <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	2201      	movs	r2, #1
 80036ee:	4013      	ands	r3, r2
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d113      	bne.n	800371c <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68da      	ldr	r2, [r3, #12]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fe:	b292      	uxth	r2, r2
 8003700:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003706:	1c9a      	adds	r2, r3, #2
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003710:	b29b      	uxth	r3, r3
 8003712:	3b01      	subs	r3, #1
 8003714:	b29a      	uxth	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	87da      	strh	r2, [r3, #62]	; 0x3e
 800371a:	e012      	b.n	8003742 <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800371c:	f7fe f9dc 	bl	8001ad8 <HAL_GetTick>
 8003720:	0002      	movs	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d802      	bhi.n	8003732 <HAL_SPI_Receive+0x1e6>
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	3301      	adds	r3, #1
 8003730:	d102      	bne.n	8003738 <HAL_SPI_Receive+0x1ec>
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d104      	bne.n	8003742 <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 8003738:	2317      	movs	r3, #23
 800373a:	18fb      	adds	r3, r7, r3
 800373c:	2203      	movs	r2, #3
 800373e:	701a      	strb	r2, [r3, #0]
          goto error;
 8003740:	e019      	b.n	8003776 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003746:	b29b      	uxth	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1cc      	bne.n	80036e6 <HAL_SPI_Receive+0x19a>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	6839      	ldr	r1, [r7, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	0018      	movs	r0, r3
 8003754:	f000 fa6a 	bl	8003c2c <SPI_EndRxTransaction>
 8003758:	1e03      	subs	r3, r0, #0
 800375a:	d002      	beq.n	8003762 <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2220      	movs	r2, #32
 8003760:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003766:	2b00      	cmp	r3, #0
 8003768:	d004      	beq.n	8003774 <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 800376a:	2317      	movs	r3, #23
 800376c:	18fb      	adds	r3, r7, r3
 800376e:	2201      	movs	r2, #1
 8003770:	701a      	strb	r2, [r3, #0]
 8003772:	e000      	b.n	8003776 <HAL_SPI_Receive+0x22a>
  }

error :
 8003774:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2251      	movs	r2, #81	; 0x51
 800377a:	2101      	movs	r1, #1
 800377c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2250      	movs	r2, #80	; 0x50
 8003782:	2100      	movs	r1, #0
 8003784:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003786:	2317      	movs	r3, #23
 8003788:	18fb      	adds	r3, r7, r3
 800378a:	781b      	ldrb	r3, [r3, #0]
}
 800378c:	0018      	movs	r0, r3
 800378e:	46bd      	mov	sp, r7
 8003790:	b007      	add	sp, #28
 8003792:	bd90      	pop	{r4, r7, pc}
 8003794:	ffffbfff 	.word	0xffffbfff

08003798 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b08c      	sub	sp, #48	; 0x30
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	001a      	movs	r2, r3
 80037a6:	1cbb      	adds	r3, r7, #2
 80037a8:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80037aa:	2301      	movs	r3, #1
 80037ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80037ae:	232b      	movs	r3, #43	; 0x2b
 80037b0:	18fb      	adds	r3, r7, r3
 80037b2:	2200      	movs	r2, #0
 80037b4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2250      	movs	r2, #80	; 0x50
 80037ba:	5c9b      	ldrb	r3, [r3, r2]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_SPI_TransmitReceive+0x2c>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e1a0      	b.n	8003b06 <HAL_SPI_TransmitReceive+0x36e>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2250      	movs	r2, #80	; 0x50
 80037c8:	2101      	movs	r1, #1
 80037ca:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037cc:	f7fe f984 	bl	8001ad8 <HAL_GetTick>
 80037d0:	0003      	movs	r3, r0
 80037d2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037d4:	2023      	movs	r0, #35	; 0x23
 80037d6:	183b      	adds	r3, r7, r0
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	2151      	movs	r1, #81	; 0x51
 80037dc:	5c52      	ldrb	r2, [r2, r1]
 80037de:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80037e6:	231a      	movs	r3, #26
 80037e8:	18fb      	adds	r3, r7, r3
 80037ea:	1cba      	adds	r2, r7, #2
 80037ec:	8812      	ldrh	r2, [r2, #0]
 80037ee:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037f0:	183b      	adds	r3, r7, r0
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d011      	beq.n	800381c <HAL_SPI_TransmitReceive+0x84>
 80037f8:	69fa      	ldr	r2, [r7, #28]
 80037fa:	2382      	movs	r3, #130	; 0x82
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	429a      	cmp	r2, r3
 8003800:	d107      	bne.n	8003812 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d103      	bne.n	8003812 <HAL_SPI_TransmitReceive+0x7a>
 800380a:	183b      	adds	r3, r7, r0
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	2b04      	cmp	r3, #4
 8003810:	d004      	beq.n	800381c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003812:	232b      	movs	r3, #43	; 0x2b
 8003814:	18fb      	adds	r3, r7, r3
 8003816:	2202      	movs	r2, #2
 8003818:	701a      	strb	r2, [r3, #0]
    goto error;
 800381a:	e169      	b.n	8003af0 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d006      	beq.n	8003830 <HAL_SPI_TransmitReceive+0x98>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_SPI_TransmitReceive+0x98>
 8003828:	1cbb      	adds	r3, r7, #2
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d104      	bne.n	800383a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003830:	232b      	movs	r3, #43	; 0x2b
 8003832:	18fb      	adds	r3, r7, r3
 8003834:	2201      	movs	r2, #1
 8003836:	701a      	strb	r2, [r3, #0]
    goto error;
 8003838:	e15a      	b.n	8003af0 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2251      	movs	r2, #81	; 0x51
 800383e:	5c9b      	ldrb	r3, [r3, r2]
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b04      	cmp	r3, #4
 8003844:	d003      	beq.n	800384e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2251      	movs	r2, #81	; 0x51
 800384a:	2105      	movs	r1, #5
 800384c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	1cba      	adds	r2, r7, #2
 800385e:	8812      	ldrh	r2, [r2, #0]
 8003860:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	1cba      	adds	r2, r7, #2
 8003866:	8812      	ldrh	r2, [r2, #0]
 8003868:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	1cba      	adds	r2, r7, #2
 8003874:	8812      	ldrh	r2, [r2, #0]
 8003876:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	1cba      	adds	r2, r7, #2
 800387c:	8812      	ldrh	r2, [r2, #0]
 800387e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2240      	movs	r2, #64	; 0x40
 8003894:	4013      	ands	r3, r2
 8003896:	2b40      	cmp	r3, #64	; 0x40
 8003898:	d007      	beq.n	80038aa <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2140      	movs	r1, #64	; 0x40
 80038a6:	430a      	orrs	r2, r1
 80038a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	2380      	movs	r3, #128	; 0x80
 80038b0:	011b      	lsls	r3, r3, #4
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d000      	beq.n	80038b8 <HAL_SPI_TransmitReceive+0x120>
 80038b6:	e07a      	b.n	80039ae <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d004      	beq.n	80038ca <HAL_SPI_TransmitReceive+0x132>
 80038c0:	231a      	movs	r3, #26
 80038c2:	18fb      	adds	r3, r7, r3
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d166      	bne.n	8003998 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	881a      	ldrh	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	1c9a      	adds	r2, r3, #2
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038ee:	e053      	b.n	8003998 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2202      	movs	r2, #2
 80038f8:	4013      	ands	r3, r2
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d11b      	bne.n	8003936 <HAL_SPI_TransmitReceive+0x19e>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003902:	b29b      	uxth	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d016      	beq.n	8003936 <HAL_SPI_TransmitReceive+0x19e>
 8003908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390a:	2b01      	cmp	r3, #1
 800390c:	d113      	bne.n	8003936 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	881a      	ldrh	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	1c9a      	adds	r2, r3, #2
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	2201      	movs	r2, #1
 800393e:	4013      	ands	r3, r2
 8003940:	2b01      	cmp	r3, #1
 8003942:	d119      	bne.n	8003978 <HAL_SPI_TransmitReceive+0x1e0>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d014      	beq.n	8003978 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003958:	b292      	uxth	r2, r2
 800395a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003960:	1c9a      	adds	r2, r3, #2
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800396a:	b29b      	uxth	r3, r3
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003974:	2301      	movs	r3, #1
 8003976:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003978:	f7fe f8ae 	bl	8001ad8 <HAL_GetTick>
 800397c:	0002      	movs	r2, r0
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003984:	429a      	cmp	r2, r3
 8003986:	d807      	bhi.n	8003998 <HAL_SPI_TransmitReceive+0x200>
 8003988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398a:	3301      	adds	r3, #1
 800398c:	d004      	beq.n	8003998 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 800398e:	232b      	movs	r3, #43	; 0x2b
 8003990:	18fb      	adds	r3, r7, r3
 8003992:	2203      	movs	r2, #3
 8003994:	701a      	strb	r2, [r3, #0]
        goto error;
 8003996:	e0ab      	b.n	8003af0 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800399c:	b29b      	uxth	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1a6      	bne.n	80038f0 <HAL_SPI_TransmitReceive+0x158>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1a1      	bne.n	80038f0 <HAL_SPI_TransmitReceive+0x158>
 80039ac:	e07f      	b.n	8003aae <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d005      	beq.n	80039c2 <HAL_SPI_TransmitReceive+0x22a>
 80039b6:	231a      	movs	r3, #26
 80039b8:	18fb      	adds	r3, r7, r3
 80039ba:	881b      	ldrh	r3, [r3, #0]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d000      	beq.n	80039c2 <HAL_SPI_TransmitReceive+0x22a>
 80039c0:	e06b      	b.n	8003a9a <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	330c      	adds	r3, #12
 80039cc:	7812      	ldrb	r2, [r2, #0]
 80039ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039de:	b29b      	uxth	r3, r3
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039e8:	e057      	b.n	8003a9a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2202      	movs	r2, #2
 80039f2:	4013      	ands	r3, r2
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d11c      	bne.n	8003a32 <HAL_SPI_TransmitReceive+0x29a>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d017      	beq.n	8003a32 <HAL_SPI_TransmitReceive+0x29a>
 8003a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d114      	bne.n	8003a32 <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	330c      	adds	r3, #12
 8003a12:	7812      	ldrb	r2, [r2, #0]
 8003a14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1a:	1c5a      	adds	r2, r3, #1
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d119      	bne.n	8003a74 <HAL_SPI_TransmitReceive+0x2dc>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d014      	beq.n	8003a74 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5c:	1c5a      	adds	r2, r3, #1
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a70:	2301      	movs	r3, #1
 8003a72:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a74:	f7fe f830 	bl	8001ad8 <HAL_GetTick>
 8003a78:	0002      	movs	r2, r0
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d802      	bhi.n	8003a8a <HAL_SPI_TransmitReceive+0x2f2>
 8003a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a86:	3301      	adds	r3, #1
 8003a88:	d102      	bne.n	8003a90 <HAL_SPI_TransmitReceive+0x2f8>
 8003a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d104      	bne.n	8003a9a <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 8003a90:	232b      	movs	r3, #43	; 0x2b
 8003a92:	18fb      	adds	r3, r7, r3
 8003a94:	2203      	movs	r2, #3
 8003a96:	701a      	strb	r2, [r3, #0]
        goto error;
 8003a98:	e02a      	b.n	8003af0 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1a2      	bne.n	80039ea <HAL_SPI_TransmitReceive+0x252>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d19d      	bne.n	80039ea <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	f000 f923 	bl	8003d00 <SPI_EndRxTxTransaction>
 8003aba:	1e03      	subs	r3, r0, #0
 8003abc:	d007      	beq.n	8003ace <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 8003abe:	232b      	movs	r3, #43	; 0x2b
 8003ac0:	18fb      	adds	r3, r7, r3
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003acc:	e010      	b.n	8003af0 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10b      	bne.n	8003aee <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	617b      	str	r3, [r7, #20]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	617b      	str	r3, [r7, #20]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	617b      	str	r3, [r7, #20]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	e000      	b.n	8003af0 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 8003aee:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2251      	movs	r2, #81	; 0x51
 8003af4:	2101      	movs	r1, #1
 8003af6:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2250      	movs	r2, #80	; 0x50
 8003afc:	2100      	movs	r1, #0
 8003afe:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003b00:	232b      	movs	r3, #43	; 0x2b
 8003b02:	18fb      	adds	r3, r7, r3
 8003b04:	781b      	ldrb	r3, [r3, #0]
}
 8003b06:	0018      	movs	r0, r3
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	b00c      	add	sp, #48	; 0x30
 8003b0c:	bd80      	pop	{r7, pc}
	...

08003b10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b088      	sub	sp, #32
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	1dfb      	adds	r3, r7, #7
 8003b1e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b20:	f7fd ffda 	bl	8001ad8 <HAL_GetTick>
 8003b24:	0002      	movs	r2, r0
 8003b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b28:	1a9b      	subs	r3, r3, r2
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	18d3      	adds	r3, r2, r3
 8003b2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b30:	f7fd ffd2 	bl	8001ad8 <HAL_GetTick>
 8003b34:	0003      	movs	r3, r0
 8003b36:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b38:	4b3a      	ldr	r3, [pc, #232]	; (8003c24 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	015b      	lsls	r3, r3, #5
 8003b3e:	0d1b      	lsrs	r3, r3, #20
 8003b40:	69fa      	ldr	r2, [r7, #28]
 8003b42:	4353      	muls	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b46:	e058      	b.n	8003bfa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	d055      	beq.n	8003bfa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b4e:	f7fd ffc3 	bl	8001ad8 <HAL_GetTick>
 8003b52:	0002      	movs	r2, r0
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	69fa      	ldr	r2, [r7, #28]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d902      	bls.n	8003b64 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d142      	bne.n	8003bea <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	21e0      	movs	r1, #224	; 0xe0
 8003b70:	438a      	bics	r2, r1
 8003b72:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	2382      	movs	r3, #130	; 0x82
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d113      	bne.n	8003ba8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	2380      	movs	r3, #128	; 0x80
 8003b86:	021b      	lsls	r3, r3, #8
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d005      	beq.n	8003b98 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	2380      	movs	r3, #128	; 0x80
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d107      	bne.n	8003ba8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2140      	movs	r1, #64	; 0x40
 8003ba4:	438a      	bics	r2, r1
 8003ba6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bac:	2380      	movs	r3, #128	; 0x80
 8003bae:	019b      	lsls	r3, r3, #6
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d110      	bne.n	8003bd6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	491a      	ldr	r1, [pc, #104]	; (8003c28 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003bc0:	400a      	ands	r2, r1
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2180      	movs	r1, #128	; 0x80
 8003bd0:	0189      	lsls	r1, r1, #6
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2251      	movs	r2, #81	; 0x51
 8003bda:	2101      	movs	r1, #1
 8003bdc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2250      	movs	r2, #80	; 0x50
 8003be2:	2100      	movs	r1, #0
 8003be4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e017      	b.n	8003c1a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	4013      	ands	r3, r2
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	425a      	negs	r2, r3
 8003c0a:	4153      	adcs	r3, r2
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	001a      	movs	r2, r3
 8003c10:	1dfb      	adds	r3, r7, #7
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d197      	bne.n	8003b48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	b008      	add	sp, #32
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	20000000 	.word	0x20000000
 8003c28:	ffffdfff 	.word	0xffffdfff

08003c2c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af02      	add	r7, sp, #8
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	2382      	movs	r3, #130	; 0x82
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d113      	bne.n	8003c6c <SPI_EndRxTransaction+0x40>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	2380      	movs	r3, #128	; 0x80
 8003c4a:	021b      	lsls	r3, r3, #8
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d005      	beq.n	8003c5c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	2380      	movs	r3, #128	; 0x80
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d107      	bne.n	8003c6c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2140      	movs	r1, #64	; 0x40
 8003c68:	438a      	bics	r2, r1
 8003c6a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	2382      	movs	r3, #130	; 0x82
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d12b      	bne.n	8003cd0 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	2380      	movs	r3, #128	; 0x80
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d012      	beq.n	8003caa <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	0013      	movs	r3, r2
 8003c8e:	2200      	movs	r2, #0
 8003c90:	2180      	movs	r1, #128	; 0x80
 8003c92:	f7ff ff3d 	bl	8003b10 <SPI_WaitFlagStateUntilTimeout>
 8003c96:	1e03      	subs	r3, r0, #0
 8003c98:	d02d      	beq.n	8003cf6 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e026      	b.n	8003cf8 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	0013      	movs	r3, r2
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	f7ff ff2a 	bl	8003b10 <SPI_WaitFlagStateUntilTimeout>
 8003cbc:	1e03      	subs	r3, r0, #0
 8003cbe:	d01a      	beq.n	8003cf6 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e013      	b.n	8003cf8 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	0013      	movs	r3, r2
 8003cda:	2200      	movs	r2, #0
 8003cdc:	2101      	movs	r1, #1
 8003cde:	f7ff ff17 	bl	8003b10 <SPI_WaitFlagStateUntilTimeout>
 8003ce2:	1e03      	subs	r3, r0, #0
 8003ce4:	d007      	beq.n	8003cf6 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cea:	2220      	movs	r2, #32
 8003cec:	431a      	orrs	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e000      	b.n	8003cf8 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	b004      	add	sp, #16
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b088      	sub	sp, #32
 8003d04:	af02      	add	r7, sp, #8
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d0c:	4b1d      	ldr	r3, [pc, #116]	; (8003d84 <SPI_EndRxTxTransaction+0x84>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	491d      	ldr	r1, [pc, #116]	; (8003d88 <SPI_EndRxTxTransaction+0x88>)
 8003d12:	0018      	movs	r0, r3
 8003d14:	f7fc f9f8 	bl	8000108 <__udivsi3>
 8003d18:	0003      	movs	r3, r0
 8003d1a:	001a      	movs	r2, r3
 8003d1c:	0013      	movs	r3, r2
 8003d1e:	015b      	lsls	r3, r3, #5
 8003d20:	1a9b      	subs	r3, r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	189b      	adds	r3, r3, r2
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	2382      	movs	r3, #130	; 0x82
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d112      	bne.n	8003d5c <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	0013      	movs	r3, r2
 8003d40:	2200      	movs	r2, #0
 8003d42:	2180      	movs	r1, #128	; 0x80
 8003d44:	f7ff fee4 	bl	8003b10 <SPI_WaitFlagStateUntilTimeout>
 8003d48:	1e03      	subs	r3, r0, #0
 8003d4a:	d016      	beq.n	8003d7a <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d50:	2220      	movs	r2, #32
 8003d52:	431a      	orrs	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e00f      	b.n	8003d7c <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00a      	beq.n	8003d78 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	3b01      	subs	r3, #1
 8003d66:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2280      	movs	r2, #128	; 0x80
 8003d70:	4013      	ands	r3, r2
 8003d72:	2b80      	cmp	r3, #128	; 0x80
 8003d74:	d0f2      	beq.n	8003d5c <SPI_EndRxTxTransaction+0x5c>
 8003d76:	e000      	b.n	8003d7a <SPI_EndRxTxTransaction+0x7a>
        break;
 8003d78:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b006      	add	sp, #24
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	20000000 	.word	0x20000000
 8003d88:	016e3600 	.word	0x016e3600

08003d8c <__libc_init_array>:
 8003d8c:	b570      	push	{r4, r5, r6, lr}
 8003d8e:	2600      	movs	r6, #0
 8003d90:	4d0c      	ldr	r5, [pc, #48]	; (8003dc4 <__libc_init_array+0x38>)
 8003d92:	4c0d      	ldr	r4, [pc, #52]	; (8003dc8 <__libc_init_array+0x3c>)
 8003d94:	1b64      	subs	r4, r4, r5
 8003d96:	10a4      	asrs	r4, r4, #2
 8003d98:	42a6      	cmp	r6, r4
 8003d9a:	d109      	bne.n	8003db0 <__libc_init_array+0x24>
 8003d9c:	2600      	movs	r6, #0
 8003d9e:	f000 f82b 	bl	8003df8 <_init>
 8003da2:	4d0a      	ldr	r5, [pc, #40]	; (8003dcc <__libc_init_array+0x40>)
 8003da4:	4c0a      	ldr	r4, [pc, #40]	; (8003dd0 <__libc_init_array+0x44>)
 8003da6:	1b64      	subs	r4, r4, r5
 8003da8:	10a4      	asrs	r4, r4, #2
 8003daa:	42a6      	cmp	r6, r4
 8003dac:	d105      	bne.n	8003dba <__libc_init_array+0x2e>
 8003dae:	bd70      	pop	{r4, r5, r6, pc}
 8003db0:	00b3      	lsls	r3, r6, #2
 8003db2:	58eb      	ldr	r3, [r5, r3]
 8003db4:	4798      	blx	r3
 8003db6:	3601      	adds	r6, #1
 8003db8:	e7ee      	b.n	8003d98 <__libc_init_array+0xc>
 8003dba:	00b3      	lsls	r3, r6, #2
 8003dbc:	58eb      	ldr	r3, [r5, r3]
 8003dbe:	4798      	blx	r3
 8003dc0:	3601      	adds	r6, #1
 8003dc2:	e7f2      	b.n	8003daa <__libc_init_array+0x1e>
 8003dc4:	08003e34 	.word	0x08003e34
 8003dc8:	08003e34 	.word	0x08003e34
 8003dcc:	08003e34 	.word	0x08003e34
 8003dd0:	08003e38 	.word	0x08003e38

08003dd4 <memcpy>:
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	b510      	push	{r4, lr}
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d100      	bne.n	8003dde <memcpy+0xa>
 8003ddc:	bd10      	pop	{r4, pc}
 8003dde:	5ccc      	ldrb	r4, [r1, r3]
 8003de0:	54c4      	strb	r4, [r0, r3]
 8003de2:	3301      	adds	r3, #1
 8003de4:	e7f8      	b.n	8003dd8 <memcpy+0x4>

08003de6 <memset>:
 8003de6:	0003      	movs	r3, r0
 8003de8:	1882      	adds	r2, r0, r2
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d100      	bne.n	8003df0 <memset+0xa>
 8003dee:	4770      	bx	lr
 8003df0:	7019      	strb	r1, [r3, #0]
 8003df2:	3301      	adds	r3, #1
 8003df4:	e7f9      	b.n	8003dea <memset+0x4>
	...

08003df8 <_init>:
 8003df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfa:	46c0      	nop			; (mov r8, r8)
 8003dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dfe:	bc08      	pop	{r3}
 8003e00:	469e      	mov	lr, r3
 8003e02:	4770      	bx	lr

08003e04 <_fini>:
 8003e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e0a:	bc08      	pop	{r3}
 8003e0c:	469e      	mov	lr, r3
 8003e0e:	4770      	bx	lr
