
RFModuleTesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000301c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080030dc  080030dc  000130dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003100  08003100  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003100  08003100  00013100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003108  08003108  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003108  08003108  00013108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800310c  0800310c  0001310c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000000c  0800311c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  0800311c  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007828  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001553  00000000  00000000  0002785c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000710  00000000  00000000  00028db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000668  00000000  00000000  000294c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fee5  00000000  00000000  00029b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007778  00000000  00000000  00039a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005f18b  00000000  00000000  00041185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a0310  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018e0  00000000  00000000  000a0364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080030c4 	.word	0x080030c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080030c4 	.word	0x080030c4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <NRF24_DelayMicroSeconds>:
//static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80004a8:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <NRF24_DelayMicroSeconds+0x38>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	490a      	ldr	r1, [pc, #40]	; (80004d8 <NRF24_DelayMicroSeconds+0x3c>)
 80004ae:	0018      	movs	r0, r3
 80004b0:	f7ff fe2a 	bl	8000108 <__udivsi3>
 80004b4:	0003      	movs	r3, r0
 80004b6:	001a      	movs	r2, r3
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	4353      	muls	r3, r2
 80004bc:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	1e5a      	subs	r2, r3, #1
 80004c4:	60fa      	str	r2, [r7, #12]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d1fa      	bne.n	80004c0 <NRF24_DelayMicroSeconds+0x24>
}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	46c0      	nop			; (mov r8, r8)
 80004ce:	46bd      	mov	sp, r7
 80004d0:	b004      	add	sp, #16
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000000 	.word	0x20000000
 80004d8:	002dc6c0 	.word	0x002dc6c0

080004dc <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d008      	beq.n	80004fc <NRF24_csn+0x20>
 80004ea:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <NRF24_csn+0x38>)
 80004ec:	6818      	ldr	r0, [r3, #0]
 80004ee:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <NRF24_csn+0x3c>)
 80004f0:	881b      	ldrh	r3, [r3, #0]
 80004f2:	2201      	movs	r2, #1
 80004f4:	0019      	movs	r1, r3
 80004f6:	f001 fa0d 	bl	8001914 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80004fa:	e007      	b.n	800050c <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <NRF24_csn+0x38>)
 80004fe:	6818      	ldr	r0, [r3, #0]
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <NRF24_csn+0x3c>)
 8000502:	881b      	ldrh	r3, [r3, #0]
 8000504:	2200      	movs	r2, #0
 8000506:	0019      	movs	r1, r3
 8000508:	f001 fa04 	bl	8001914 <HAL_GPIO_WritePin>
}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	b002      	add	sp, #8
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000030 	.word	0x20000030
 8000518:	20000034 	.word	0x20000034

0800051c <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d008      	beq.n	800053c <NRF24_ce+0x20>
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <NRF24_ce+0x38>)
 800052c:	6818      	ldr	r0, [r3, #0]
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <NRF24_ce+0x3c>)
 8000530:	881b      	ldrh	r3, [r3, #0]
 8000532:	2201      	movs	r2, #1
 8000534:	0019      	movs	r1, r3
 8000536:	f001 f9ed 	bl	8001914 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 800053a:	e007      	b.n	800054c <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 800053c:	4b05      	ldr	r3, [pc, #20]	; (8000554 <NRF24_ce+0x38>)
 800053e:	6818      	ldr	r0, [r3, #0]
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <NRF24_ce+0x3c>)
 8000542:	881b      	ldrh	r3, [r3, #0]
 8000544:	2200      	movs	r2, #0
 8000546:	0019      	movs	r1, r3
 8000548:	f001 f9e4 	bl	8001914 <HAL_GPIO_WritePin>
}
 800054c:	46c0      	nop			; (mov r8, r8)
 800054e:	46bd      	mov	sp, r7
 8000550:	b002      	add	sp, #8
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000030 	.word	0x20000030
 8000558:	20000036 	.word	0x20000036

0800055c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 800055c:	b5b0      	push	{r4, r5, r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	0002      	movs	r2, r0
 8000564:	1dfb      	adds	r3, r7, #7
 8000566:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000568:	2000      	movs	r0, #0
 800056a:	f7ff ffb7 	bl	80004dc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800056e:	1dfb      	adds	r3, r7, #7
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	221f      	movs	r2, #31
 8000574:	4013      	ands	r3, r2
 8000576:	b2da      	uxtb	r2, r3
 8000578:	240c      	movs	r4, #12
 800057a:	193b      	adds	r3, r7, r4
 800057c:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800057e:	1939      	adds	r1, r7, r4
 8000580:	480c      	ldr	r0, [pc, #48]	; (80005b4 <NRF24_read_register+0x58>)
 8000582:	2364      	movs	r3, #100	; 0x64
 8000584:	2201      	movs	r2, #1
 8000586:	f001 fff0 	bl	800256a <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 800058a:	193b      	adds	r3, r7, r4
 800058c:	1c59      	adds	r1, r3, #1
 800058e:	4809      	ldr	r0, [pc, #36]	; (80005b4 <NRF24_read_register+0x58>)
 8000590:	2364      	movs	r3, #100	; 0x64
 8000592:	2201      	movs	r2, #1
 8000594:	f002 f940 	bl	8002818 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000598:	250f      	movs	r5, #15
 800059a:	197b      	adds	r3, r7, r5
 800059c:	193a      	adds	r2, r7, r4
 800059e:	7852      	ldrb	r2, [r2, #1]
 80005a0:	701a      	strb	r2, [r3, #0]
	//Bring CSN high
	NRF24_csn(1);
 80005a2:	2001      	movs	r0, #1
 80005a4:	f7ff ff9a 	bl	80004dc <NRF24_csn>
	return retData;
 80005a8:	197b      	adds	r3, r7, r5
 80005aa:	781b      	ldrb	r3, [r3, #0]
}
 80005ac:	0018      	movs	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	b004      	add	sp, #16
 80005b2:	bdb0      	pop	{r4, r5, r7, pc}
 80005b4:	20000038 	.word	0x20000038

080005b8 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6039      	str	r1, [r7, #0]
 80005c0:	0011      	movs	r1, r2
 80005c2:	1dfb      	adds	r3, r7, #7
 80005c4:	1c02      	adds	r2, r0, #0
 80005c6:	701a      	strb	r2, [r3, #0]
 80005c8:	1dbb      	adds	r3, r7, #6
 80005ca:	1c0a      	adds	r2, r1, #0
 80005cc:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f7ff ff84 	bl	80004dc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80005d4:	1dfb      	adds	r3, r7, #7
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	221f      	movs	r2, #31
 80005da:	4013      	ands	r3, r2
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	210c      	movs	r1, #12
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	701a      	strb	r2, [r3, #0]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80005e4:	1879      	adds	r1, r7, r1
 80005e6:	480a      	ldr	r0, [pc, #40]	; (8000610 <NRF24_read_registerN+0x58>)
 80005e8:	2364      	movs	r3, #100	; 0x64
 80005ea:	2201      	movs	r2, #1
 80005ec:	f001 ffbd 	bl	800256a <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80005f0:	1dbb      	adds	r3, r7, #6
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	6839      	ldr	r1, [r7, #0]
 80005f8:	4805      	ldr	r0, [pc, #20]	; (8000610 <NRF24_read_registerN+0x58>)
 80005fa:	2364      	movs	r3, #100	; 0x64
 80005fc:	f002 f90c 	bl	8002818 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000600:	2001      	movs	r0, #1
 8000602:	f7ff ff6b 	bl	80004dc <NRF24_csn>
}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	b004      	add	sp, #16
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	20000038 	.word	0x20000038

08000614 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	0002      	movs	r2, r0
 800061c:	1dfb      	adds	r3, r7, #7
 800061e:	701a      	strb	r2, [r3, #0]
 8000620:	1dbb      	adds	r3, r7, #6
 8000622:	1c0a      	adds	r2, r1, #0
 8000624:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000626:	2000      	movs	r0, #0
 8000628:	f7ff ff58 	bl	80004dc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800062c:	1dfb      	adds	r3, r7, #7
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2220      	movs	r2, #32
 8000632:	4313      	orrs	r3, r2
 8000634:	b2da      	uxtb	r2, r3
 8000636:	210c      	movs	r1, #12
 8000638:	187b      	adds	r3, r7, r1
 800063a:	701a      	strb	r2, [r3, #0]
	spiBuf[1] = value;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	1dba      	adds	r2, r7, #6
 8000640:	7812      	ldrb	r2, [r2, #0]
 8000642:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000644:	1879      	adds	r1, r7, r1
 8000646:	4806      	ldr	r0, [pc, #24]	; (8000660 <NRF24_write_register+0x4c>)
 8000648:	2364      	movs	r3, #100	; 0x64
 800064a:	2202      	movs	r2, #2
 800064c:	f001 ff8d 	bl	800256a <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000650:	2001      	movs	r0, #1
 8000652:	f7ff ff43 	bl	80004dc <NRF24_csn>
}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b004      	add	sp, #16
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	20000038 	.word	0x20000038

08000664 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6039      	str	r1, [r7, #0]
 800066c:	0011      	movs	r1, r2
 800066e:	1dfb      	adds	r3, r7, #7
 8000670:	1c02      	adds	r2, r0, #0
 8000672:	701a      	strb	r2, [r3, #0]
 8000674:	1dbb      	adds	r3, r7, #6
 8000676:	1c0a      	adds	r2, r1, #0
 8000678:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800067a:	2000      	movs	r0, #0
 800067c:	f7ff ff2e 	bl	80004dc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000680:	1dfb      	adds	r3, r7, #7
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2220      	movs	r2, #32
 8000686:	4313      	orrs	r3, r2
 8000688:	b2da      	uxtb	r2, r3
 800068a:	210c      	movs	r1, #12
 800068c:	187b      	adds	r3, r7, r1
 800068e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000690:	1879      	adds	r1, r7, r1
 8000692:	480a      	ldr	r0, [pc, #40]	; (80006bc <NRF24_write_registerN+0x58>)
 8000694:	2364      	movs	r3, #100	; 0x64
 8000696:	2201      	movs	r2, #1
 8000698:	f001 ff67 	bl	800256a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800069c:	1dbb      	adds	r3, r7, #6
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	6839      	ldr	r1, [r7, #0]
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <NRF24_write_registerN+0x58>)
 80006a6:	2364      	movs	r3, #100	; 0x64
 80006a8:	f001 ff5f 	bl	800256a <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80006ac:	2001      	movs	r0, #1
 80006ae:	f7ff ff15 	bl	80004dc <NRF24_csn>
}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b004      	add	sp, #16
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	20000038 	.word	0x20000038

080006c0 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	000a      	movs	r2, r1
 80006ca:	1cfb      	adds	r3, r7, #3
 80006cc:	701a      	strb	r2, [r3, #0]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 80006ce:	2000      	movs	r0, #0
 80006d0:	f7ff ff04 	bl	80004dc <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 80006d4:	210f      	movs	r1, #15
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	22a0      	movs	r2, #160	; 0xa0
 80006da:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 80006dc:	1879      	adds	r1, r7, r1
 80006de:	480a      	ldr	r0, [pc, #40]	; (8000708 <NRF24_write_payload+0x48>)
 80006e0:	2364      	movs	r3, #100	; 0x64
 80006e2:	2201      	movs	r2, #1
 80006e4:	f001 ff41 	bl	800256a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 80006e8:	1cfb      	adds	r3, r7, #3
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	6879      	ldr	r1, [r7, #4]
 80006f0:	4805      	ldr	r0, [pc, #20]	; (8000708 <NRF24_write_payload+0x48>)
 80006f2:	2364      	movs	r3, #100	; 0x64
 80006f4:	f001 ff39 	bl	800256a <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80006f8:	2001      	movs	r0, #1
 80006fa:	f7ff feef 	bl	80004dc <NRF24_csn>
}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	b004      	add	sp, #16
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	20000038 	.word	0x20000038

0800070c <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000710:	21ff      	movs	r1, #255	; 0xff
 8000712:	20e1      	movs	r0, #225	; 0xe1
 8000714:	f7ff ff7e 	bl	8000614 <NRF24_write_register>
}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000722:	21ff      	movs	r1, #255	; 0xff
 8000724:	20e2      	movs	r0, #226	; 0xe2
 8000726:	f7ff ff75 	bl	8000614 <NRF24_write_register>
}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000736:	1dfc      	adds	r4, r7, #7
 8000738:	2007      	movs	r0, #7
 800073a:	f7ff ff0f 	bl	800055c <NRF24_read_register>
 800073e:	0003      	movs	r3, r0
 8000740:	7023      	strb	r3, [r4, #0]
	return statReg;
 8000742:	1dfb      	adds	r3, r7, #7
 8000744:	781b      	ldrb	r3, [r3, #0]
}
 8000746:	0018      	movs	r0, r3
 8000748:	46bd      	mov	sp, r7
 800074a:	b003      	add	sp, #12
 800074c:	bd90      	pop	{r4, r7, pc}
	...

08000750 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000750:	b082      	sub	sp, #8
 8000752:	b590      	push	{r4, r7, lr}
 8000754:	46c6      	mov	lr, r8
 8000756:	b500      	push	{lr}
 8000758:	b084      	sub	sp, #16
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
 800075e:	0008      	movs	r0, r1
 8000760:	0011      	movs	r1, r2
 8000762:	2204      	movs	r2, #4
 8000764:	2418      	movs	r4, #24
 8000766:	46a4      	mov	ip, r4
 8000768:	2408      	movs	r4, #8
 800076a:	46a0      	mov	r8, r4
 800076c:	44b8      	add	r8, r7
 800076e:	44c4      	add	ip, r8
 8000770:	4462      	add	r2, ip
 8000772:	6013      	str	r3, [r2, #0]
 8000774:	1cbb      	adds	r3, r7, #2
 8000776:	1c02      	adds	r2, r0, #0
 8000778:	801a      	strh	r2, [r3, #0]
 800077a:	003b      	movs	r3, r7
 800077c:	1c0a      	adds	r2, r1, #0
 800077e:	801a      	strh	r2, [r3, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000780:	4a73      	ldr	r2, [pc, #460]	; (8000950 <NRF24_begin+0x200>)
 8000782:	2304      	movs	r3, #4
 8000784:	2118      	movs	r1, #24
 8000786:	468c      	mov	ip, r1
 8000788:	2108      	movs	r1, #8
 800078a:	4688      	mov	r8, r1
 800078c:	44b8      	add	r8, r7
 800078e:	44c4      	add	ip, r8
 8000790:	4463      	add	r3, ip
 8000792:	0010      	movs	r0, r2
 8000794:	0019      	movs	r1, r3
 8000796:	2358      	movs	r3, #88	; 0x58
 8000798:	001a      	movs	r2, r3
 800079a:	f002 fc81 	bl	80030a0 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 800079e:	4b6d      	ldr	r3, [pc, #436]	; (8000954 <NRF24_begin+0x204>)
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	601a      	str	r2, [r3, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 80007a4:	4b6c      	ldr	r3, [pc, #432]	; (8000958 <NRF24_begin+0x208>)
 80007a6:	1cba      	adds	r2, r7, #2
 80007a8:	8812      	ldrh	r2, [r2, #0]
 80007aa:	801a      	strh	r2, [r3, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 80007ac:	4b6b      	ldr	r3, [pc, #428]	; (800095c <NRF24_begin+0x20c>)
 80007ae:	003a      	movs	r2, r7
 80007b0:	8812      	ldrh	r2, [r2, #0]
 80007b2:	801a      	strh	r2, [r3, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 80007b4:	2001      	movs	r0, #1
 80007b6:	f7ff fe91 	bl	80004dc <NRF24_csn>
	NRF24_ce(0);
 80007ba:	2000      	movs	r0, #0
 80007bc:	f7ff feae 	bl	800051c <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 80007c0:	2005      	movs	r0, #5
 80007c2:	f000 fe69 	bl	8001498 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 80007c6:	2108      	movs	r1, #8
 80007c8:	2000      	movs	r0, #0
 80007ca:	f7ff ff23 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80007ce:	213f      	movs	r1, #63	; 0x3f
 80007d0:	2001      	movs	r0, #1
 80007d2:	f7ff ff1f 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 80007d6:	2103      	movs	r1, #3
 80007d8:	2002      	movs	r0, #2
 80007da:	f7ff ff1b 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80007de:	2103      	movs	r1, #3
 80007e0:	2003      	movs	r0, #3
 80007e2:	f7ff ff17 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80007e6:	2103      	movs	r1, #3
 80007e8:	2004      	movs	r0, #4
 80007ea:	f7ff ff13 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80007ee:	2102      	movs	r1, #2
 80007f0:	2005      	movs	r0, #5
 80007f2:	f7ff ff0f 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80007f6:	210f      	movs	r1, #15
 80007f8:	2006      	movs	r0, #6
 80007fa:	f7ff ff0b 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80007fe:	210e      	movs	r1, #14
 8000800:	2007      	movs	r0, #7
 8000802:	f7ff ff07 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000806:	2100      	movs	r1, #0
 8000808:	2008      	movs	r0, #8
 800080a:	f7ff ff03 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 800080e:	2100      	movs	r1, #0
 8000810:	2009      	movs	r0, #9
 8000812:	f7ff feff 	bl	8000614 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000816:	2108      	movs	r1, #8
 8000818:	187b      	adds	r3, r7, r1
 800081a:	22e7      	movs	r2, #231	; 0xe7
 800081c:	711a      	strb	r2, [r3, #4]
 800081e:	187b      	adds	r3, r7, r1
 8000820:	22e7      	movs	r2, #231	; 0xe7
 8000822:	70da      	strb	r2, [r3, #3]
 8000824:	187b      	adds	r3, r7, r1
 8000826:	22e7      	movs	r2, #231	; 0xe7
 8000828:	709a      	strb	r2, [r3, #2]
 800082a:	187b      	adds	r3, r7, r1
 800082c:	22e7      	movs	r2, #231	; 0xe7
 800082e:	705a      	strb	r2, [r3, #1]
 8000830:	187b      	adds	r3, r7, r1
 8000832:	22e7      	movs	r2, #231	; 0xe7
 8000834:	701a      	strb	r2, [r3, #0]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000836:	000c      	movs	r4, r1
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2205      	movs	r2, #5
 800083c:	0019      	movs	r1, r3
 800083e:	200a      	movs	r0, #10
 8000840:	f7ff ff10 	bl	8000664 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8000844:	0021      	movs	r1, r4
 8000846:	187b      	adds	r3, r7, r1
 8000848:	22c2      	movs	r2, #194	; 0xc2
 800084a:	711a      	strb	r2, [r3, #4]
 800084c:	187b      	adds	r3, r7, r1
 800084e:	22c2      	movs	r2, #194	; 0xc2
 8000850:	70da      	strb	r2, [r3, #3]
 8000852:	187b      	adds	r3, r7, r1
 8000854:	22c2      	movs	r2, #194	; 0xc2
 8000856:	709a      	strb	r2, [r3, #2]
 8000858:	187b      	adds	r3, r7, r1
 800085a:	22c2      	movs	r2, #194	; 0xc2
 800085c:	705a      	strb	r2, [r3, #1]
 800085e:	187b      	adds	r3, r7, r1
 8000860:	22c2      	movs	r2, #194	; 0xc2
 8000862:	701a      	strb	r2, [r3, #0]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000864:	000c      	movs	r4, r1
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2205      	movs	r2, #5
 800086a:	0019      	movs	r1, r3
 800086c:	200b      	movs	r0, #11
 800086e:	f7ff fef9 	bl	8000664 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000872:	21c3      	movs	r1, #195	; 0xc3
 8000874:	200c      	movs	r0, #12
 8000876:	f7ff fecd 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 800087a:	21c4      	movs	r1, #196	; 0xc4
 800087c:	200d      	movs	r0, #13
 800087e:	f7ff fec9 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000882:	21c5      	movs	r1, #197	; 0xc5
 8000884:	200e      	movs	r0, #14
 8000886:	f7ff fec5 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 800088a:	21c6      	movs	r1, #198	; 0xc6
 800088c:	200f      	movs	r0, #15
 800088e:	f7ff fec1 	bl	8000614 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000892:	0021      	movs	r1, r4
 8000894:	187b      	adds	r3, r7, r1
 8000896:	22e7      	movs	r2, #231	; 0xe7
 8000898:	711a      	strb	r2, [r3, #4]
 800089a:	187b      	adds	r3, r7, r1
 800089c:	22e7      	movs	r2, #231	; 0xe7
 800089e:	70da      	strb	r2, [r3, #3]
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	22e7      	movs	r2, #231	; 0xe7
 80008a4:	709a      	strb	r2, [r3, #2]
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	22e7      	movs	r2, #231	; 0xe7
 80008aa:	705a      	strb	r2, [r3, #1]
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	22e7      	movs	r2, #231	; 0xe7
 80008b0:	701a      	strb	r2, [r3, #0]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	2205      	movs	r2, #5
 80008b6:	0019      	movs	r1, r3
 80008b8:	2010      	movs	r0, #16
 80008ba:	f7ff fed3 	bl	8000664 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80008be:	2100      	movs	r1, #0
 80008c0:	2011      	movs	r0, #17
 80008c2:	f7ff fea7 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 80008c6:	2100      	movs	r1, #0
 80008c8:	2012      	movs	r0, #18
 80008ca:	f7ff fea3 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80008ce:	2100      	movs	r1, #0
 80008d0:	2013      	movs	r0, #19
 80008d2:	f7ff fe9f 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 80008d6:	2100      	movs	r1, #0
 80008d8:	2014      	movs	r0, #20
 80008da:	f7ff fe9b 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 80008de:	2100      	movs	r1, #0
 80008e0:	2015      	movs	r0, #21
 80008e2:	f7ff fe97 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80008e6:	2100      	movs	r1, #0
 80008e8:	2016      	movs	r0, #22
 80008ea:	f7ff fe93 	bl	8000614 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 80008ee:	f000 faff 	bl	8000ef0 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80008f2:	2100      	movs	r1, #0
 80008f4:	201c      	movs	r0, #28
 80008f6:	f7ff fe8d 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80008fa:	2100      	movs	r1, #0
 80008fc:	201d      	movs	r0, #29
 80008fe:	f7ff fe89 	bl	8000614 <NRF24_write_register>
//	printRadioSettings();
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000902:	210f      	movs	r1, #15
 8000904:	200f      	movs	r0, #15
 8000906:	f000 f8c1 	bl	8000a8c <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800090a:	2003      	movs	r0, #3
 800090c:	f000 f951 	bl	8000bb2 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000910:	2001      	movs	r0, #1
 8000912:	f000 f99f 	bl	8000c54 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000916:	2002      	movs	r0, #2
 8000918:	f000 f9f8 	bl	8000d0c <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 800091c:	f000 f916 	bl	8000b4c <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000920:	2020      	movs	r0, #32
 8000922:	f000 f8ed 	bl	8000b00 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000926:	f000 fada 	bl	8000ede <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 800092a:	204c      	movs	r0, #76	; 0x4c
 800092c:	f000 f8cc 	bl	8000ac8 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000930:	f7ff feec 	bl	800070c <NRF24_flush_tx>
	NRF24_flush_rx();
 8000934:	f7ff fef3 	bl	800071e <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000938:	f000 fa20 	bl	8000d7c <NRF24_powerDown>
	
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	b004      	add	sp, #16
 8000942:	bc80      	pop	{r7}
 8000944:	46b8      	mov	r8, r7
 8000946:	bc90      	pop	{r4, r7}
 8000948:	bc08      	pop	{r3}
 800094a:	b002      	add	sp, #8
 800094c:	4718      	bx	r3
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	20000038 	.word	0x20000038
 8000954:	20000030 	.word	0x20000030
 8000958:	20000034 	.word	0x20000034
 800095c:	20000036 	.word	0x20000036

08000960 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000964:	2000      	movs	r0, #0
 8000966:	f7ff fdd9 	bl	800051c <NRF24_ce>
	NRF24_flush_tx();
 800096a:	f7ff fecf 	bl	800070c <NRF24_flush_tx>
	NRF24_flush_rx();
 800096e:	f7ff fed6 	bl	800071e <NRF24_flush_rx>
}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8000978:	b5b0      	push	{r4, r5, r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	000a      	movs	r2, r1
 8000982:	1cfb      	adds	r3, r7, #3
 8000984:	701a      	strb	r2, [r3, #0]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8000986:	f000 faaa 	bl	8000ede <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 800098a:	1cfb      	adds	r3, r7, #3
 800098c:	781a      	ldrb	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	0011      	movs	r1, r2
 8000992:	0018      	movs	r0, r3
 8000994:	f000 fa3d 	bl	8000e12 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8000998:	f000 fd74 	bl	8001484 <HAL_GetTick>
 800099c:	0003      	movs	r3, r0
 800099e:	617b      	str	r3, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 80009a0:	230a      	movs	r3, #10
 80009a2:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 80009a4:	230d      	movs	r3, #13
 80009a6:	18fb      	adds	r3, r7, r3
 80009a8:	2201      	movs	r2, #1
 80009aa:	0019      	movs	r1, r3
 80009ac:	2008      	movs	r0, #8
 80009ae:	f7ff fe03 	bl	80005b8 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 80009b2:	250f      	movs	r5, #15
 80009b4:	197c      	adds	r4, r7, r5
 80009b6:	f7ff febb 	bl	8000730 <NRF24_get_status>
 80009ba:	0003      	movs	r3, r0
 80009bc:	7023      	strb	r3, [r4, #0]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 80009be:	197b      	adds	r3, r7, r5
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2230      	movs	r2, #48	; 0x30
 80009c4:	4013      	ands	r3, r2
 80009c6:	d107      	bne.n	80009d8 <NRF24_write+0x60>
 80009c8:	f000 fd5c 	bl	8001484 <HAL_GetTick>
 80009cc:	0002      	movs	r2, r0
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d8e5      	bhi.n	80009a4 <NRF24_write+0x2c>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 80009d8:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <NRF24_write+0xa4>)
 80009da:	230b      	movs	r3, #11
 80009dc:	18f9      	adds	r1, r7, r3
 80009de:	240c      	movs	r4, #12
 80009e0:	193b      	adds	r3, r7, r4
 80009e2:	0018      	movs	r0, r3
 80009e4:	f000 fa48 	bl	8000e78 <NRF24_whatHappened>
	retStatus = tx_ok;
 80009e8:	230e      	movs	r3, #14
 80009ea:	18fb      	adds	r3, r7, r3
 80009ec:	193a      	adds	r2, r7, r4
 80009ee:	7812      	ldrb	r2, [r2, #0]
 80009f0:	701a      	strb	r2, [r3, #0]
	if ( ack_payload_available )
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <NRF24_write+0xa4>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d005      	beq.n	8000a06 <NRF24_write+0x8e>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 80009fa:	f000 f89d 	bl	8000b38 <NRF24_getDynamicPayloadSize>
 80009fe:	0003      	movs	r3, r0
 8000a00:	001a      	movs	r2, r3
 8000a02:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <NRF24_write+0xa8>)
 8000a04:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8000a06:	f000 f80d 	bl	8000a24 <NRF24_available>
	NRF24_flush_tx();
 8000a0a:	f7ff fe7f 	bl	800070c <NRF24_flush_tx>
	return retStatus;
 8000a0e:	230e      	movs	r3, #14
 8000a10:	18fb      	adds	r3, r7, r3
 8000a12:	781b      	ldrb	r3, [r3, #0]
}
 8000a14:	0018      	movs	r0, r3
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b006      	add	sp, #24
 8000a1a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a1c:	20000028 	.word	0x20000028
 8000a20:	20000029 	.word	0x20000029

08000a24 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f000 f9b9 	bl	8000da0 <NRF24_availablePipe>
 8000a2e:	0003      	movs	r3, r0
}
 8000a30:	0018      	movs	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6038      	str	r0, [r7, #0]
 8000a40:	6079      	str	r1, [r7, #4]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000a42:	003b      	movs	r3, r7
 8000a44:	2205      	movs	r2, #5
 8000a46:	0019      	movs	r1, r3
 8000a48:	200a      	movs	r0, #10
 8000a4a:	f7ff fe0b 	bl	8000664 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000a4e:	003b      	movs	r3, r7
 8000a50:	2205      	movs	r2, #5
 8000a52:	0019      	movs	r1, r3
 8000a54:	2010      	movs	r0, #16
 8000a56:	f7ff fe05 	bl	8000664 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8000a5a:	210f      	movs	r1, #15
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	2220      	movs	r2, #32
 8000a60:	701a      	strb	r2, [r3, #0]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <NRF24_openWritingPipe+0x50>)
 8000a64:	781a      	ldrb	r2, [r3, #0]
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	1c10      	adds	r0, r2, #0
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	b2d9      	uxtb	r1, r3
 8000a6e:	b2c2      	uxtb	r2, r0
 8000a70:	4291      	cmp	r1, r2
 8000a72:	d900      	bls.n	8000a76 <NRF24_openWritingPipe+0x3e>
 8000a74:	1c03      	adds	r3, r0, #0
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	0019      	movs	r1, r3
 8000a7a:	2011      	movs	r0, #17
 8000a7c:	f7ff fdca 	bl	8000614 <NRF24_write_register>
}
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b004      	add	sp, #16
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	2000002a 	.word	0x2000002a

08000a8c <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	0002      	movs	r2, r0
 8000a94:	1dfb      	adds	r3, r7, #7
 8000a96:	701a      	strb	r2, [r3, #0]
 8000a98:	1dbb      	adds	r3, r7, #6
 8000a9a:	1c0a      	adds	r2, r1, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	011b      	lsls	r3, r3, #4
 8000aa4:	b25a      	sxtb	r2, r3
 8000aa6:	1dbb      	adds	r3, r7, #6
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	b25b      	sxtb	r3, r3
 8000aac:	210f      	movs	r1, #15
 8000aae:	400b      	ands	r3, r1
 8000ab0:	b25b      	sxtb	r3, r3
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	b25b      	sxtb	r3, r3
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	0019      	movs	r1, r3
 8000aba:	2004      	movs	r0, #4
 8000abc:	f7ff fdaa 	bl	8000614 <NRF24_write_register>
}
 8000ac0:	46c0      	nop			; (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b002      	add	sp, #8
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	0002      	movs	r2, r0
 8000ad0:	1dfb      	adds	r3, r7, #7
 8000ad2:	701a      	strb	r2, [r3, #0]
	const uint8_t max_channel = 127;
 8000ad4:	210f      	movs	r1, #15
 8000ad6:	187b      	adds	r3, r7, r1
 8000ad8:	227f      	movs	r2, #127	; 0x7f
 8000ada:	701a      	strb	r2, [r3, #0]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	1dfa      	adds	r2, r7, #7
 8000ae0:	7810      	ldrb	r0, [r2, #0]
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	b2d9      	uxtb	r1, r3
 8000ae6:	b2c2      	uxtb	r2, r0
 8000ae8:	4291      	cmp	r1, r2
 8000aea:	d900      	bls.n	8000aee <NRF24_setChannel+0x26>
 8000aec:	1c03      	adds	r3, r0, #0
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	0019      	movs	r1, r3
 8000af2:	2005      	movs	r0, #5
 8000af4:	f7ff fd8e 	bl	8000614 <NRF24_write_register>
}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b004      	add	sp, #16
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	0002      	movs	r2, r0
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	701a      	strb	r2, [r3, #0]
	const uint8_t max_payload_size = 32;
 8000b0c:	210f      	movs	r1, #15
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2220      	movs	r2, #32
 8000b12:	701a      	strb	r2, [r3, #0]
  payload_size = MIN(size,max_payload_size);
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	1dfa      	adds	r2, r7, #7
 8000b18:	7810      	ldrb	r0, [r2, #0]
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b2d9      	uxtb	r1, r3
 8000b1e:	b2c2      	uxtb	r2, r0
 8000b20:	4291      	cmp	r1, r2
 8000b22:	d900      	bls.n	8000b26 <NRF24_setPayloadSize+0x26>
 8000b24:	1c03      	adds	r3, r0, #0
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	4b02      	ldr	r3, [pc, #8]	; (8000b34 <NRF24_setPayloadSize+0x34>)
 8000b2a:	701a      	strb	r2, [r3, #0]
}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b004      	add	sp, #16
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	2000002a 	.word	0x2000002a

08000b38 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000b3c:	2060      	movs	r0, #96	; 0x60
 8000b3e:	f7ff fd0d 	bl	800055c <NRF24_read_register>
 8000b42:	0003      	movs	r3, r0
}
 8000b44:	0018      	movs	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000b50:	201d      	movs	r0, #29
 8000b52:	f7ff fd03 	bl	800055c <NRF24_read_register>
 8000b56:	0003      	movs	r3, r0
 8000b58:	001a      	movs	r2, r3
 8000b5a:	2304      	movs	r3, #4
 8000b5c:	439a      	bics	r2, r3
 8000b5e:	0013      	movs	r3, r2
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	0019      	movs	r1, r3
 8000b64:	201d      	movs	r0, #29
 8000b66:	f7ff fd55 	bl	8000614 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	201c      	movs	r0, #28
 8000b6e:	f7ff fd51 	bl	8000614 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000b72:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <NRF24_disableDynamicPayloads+0x34>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]
}
 8000b78:	46c0      	nop			; (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	2000002b 	.word	0x2000002b

08000b84 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	0002      	movs	r2, r0
 8000b8c:	1dfb      	adds	r3, r7, #7
 8000b8e:	701a      	strb	r2, [r3, #0]
	if ( enable )
 8000b90:	1dfb      	adds	r3, r7, #7
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d004      	beq.n	8000ba2 <NRF24_setAutoAck+0x1e>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000b98:	213f      	movs	r1, #63	; 0x3f
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f7ff fd3a 	bl	8000614 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000ba0:	e003      	b.n	8000baa <NRF24_setAutoAck+0x26>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f7ff fd35 	bl	8000614 <NRF24_write_register>
}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b002      	add	sp, #8
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000bb2:	b5b0      	push	{r4, r5, r7, lr}
 8000bb4:	b084      	sub	sp, #16
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	0002      	movs	r2, r0
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	701a      	strb	r2, [r3, #0]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000bbe:	250f      	movs	r5, #15
 8000bc0:	197c      	adds	r4, r7, r5
 8000bc2:	2006      	movs	r0, #6
 8000bc4:	f7ff fcca 	bl	800055c <NRF24_read_register>
 8000bc8:	0003      	movs	r3, r0
 8000bca:	7023      	strb	r3, [r4, #0]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000bcc:	0028      	movs	r0, r5
 8000bce:	183b      	adds	r3, r7, r0
 8000bd0:	183a      	adds	r2, r7, r0
 8000bd2:	7812      	ldrb	r2, [r2, #0]
 8000bd4:	2106      	movs	r1, #6
 8000bd6:	438a      	bics	r2, r1
 8000bd8:	701a      	strb	r2, [r3, #0]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b03      	cmp	r3, #3
 8000be0:	d106      	bne.n	8000bf0 <NRF24_setPALevel+0x3e>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000be2:	183b      	adds	r3, r7, r0
 8000be4:	183a      	adds	r2, r7, r0
 8000be6:	7812      	ldrb	r2, [r2, #0]
 8000be8:	2106      	movs	r1, #6
 8000bea:	430a      	orrs	r2, r1
 8000bec:	701a      	strb	r2, [r3, #0]
 8000bee:	e026      	b.n	8000c3e <NRF24_setPALevel+0x8c>
  }
  else if ( level == RF24_PA_m6dB )
 8000bf0:	1dfb      	adds	r3, r7, #7
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d107      	bne.n	8000c08 <NRF24_setPALevel+0x56>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000bf8:	220f      	movs	r2, #15
 8000bfa:	18bb      	adds	r3, r7, r2
 8000bfc:	18ba      	adds	r2, r7, r2
 8000bfe:	7812      	ldrb	r2, [r2, #0]
 8000c00:	2104      	movs	r1, #4
 8000c02:	430a      	orrs	r2, r1
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	e01a      	b.n	8000c3e <NRF24_setPALevel+0x8c>
  }
  else if ( level == RF24_PA_m12dB )
 8000c08:	1dfb      	adds	r3, r7, #7
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d107      	bne.n	8000c20 <NRF24_setPALevel+0x6e>
  {
    setup |= _BV(RF_PWR_LOW);
 8000c10:	220f      	movs	r2, #15
 8000c12:	18bb      	adds	r3, r7, r2
 8000c14:	18ba      	adds	r2, r7, r2
 8000c16:	7812      	ldrb	r2, [r2, #0]
 8000c18:	2102      	movs	r1, #2
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	701a      	strb	r2, [r3, #0]
 8000c1e:	e00e      	b.n	8000c3e <NRF24_setPALevel+0x8c>
  }
  else if ( level == RF24_PA_m18dB )
 8000c20:	1dfb      	adds	r3, r7, #7
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d00a      	beq.n	8000c3e <NRF24_setPALevel+0x8c>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000c28:	1dfb      	adds	r3, r7, #7
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b04      	cmp	r3, #4
 8000c2e:	d106      	bne.n	8000c3e <NRF24_setPALevel+0x8c>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000c30:	220f      	movs	r2, #15
 8000c32:	18bb      	adds	r3, r7, r2
 8000c34:	18ba      	adds	r2, r7, r2
 8000c36:	7812      	ldrb	r2, [r2, #0]
 8000c38:	2106      	movs	r1, #6
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	701a      	strb	r2, [r3, #0]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000c3e:	230f      	movs	r3, #15
 8000c40:	18fb      	adds	r3, r7, r3
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	0019      	movs	r1, r3
 8000c46:	2006      	movs	r0, #6
 8000c48:	f7ff fce4 	bl	8000614 <NRF24_write_register>
}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b004      	add	sp, #16
 8000c52:	bdb0      	pop	{r4, r5, r7, pc}

08000c54 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000c54:	b5b0      	push	{r4, r5, r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	0002      	movs	r2, r0
 8000c5c:	1dfb      	adds	r3, r7, #7
 8000c5e:	701a      	strb	r2, [r3, #0]
	bool result = false;
 8000c60:	230f      	movs	r3, #15
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000c68:	250e      	movs	r5, #14
 8000c6a:	197c      	adds	r4, r7, r5
 8000c6c:	2006      	movs	r0, #6
 8000c6e:	f7ff fc75 	bl	800055c <NRF24_read_register>
 8000c72:	0003      	movs	r3, r0
 8000c74:	7023      	strb	r3, [r4, #0]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000c76:	4b24      	ldr	r3, [pc, #144]	; (8000d08 <NRF24_setDataRate+0xb4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000c7c:	0028      	movs	r0, r5
 8000c7e:	183b      	adds	r3, r7, r0
 8000c80:	183a      	adds	r2, r7, r0
 8000c82:	7812      	ldrb	r2, [r2, #0]
 8000c84:	2128      	movs	r1, #40	; 0x28
 8000c86:	438a      	bics	r2, r1
 8000c88:	701a      	strb	r2, [r3, #0]
  if( speed == RF24_250KBPS )
 8000c8a:	1dfb      	adds	r3, r7, #7
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d109      	bne.n	8000ca6 <NRF24_setDataRate+0x52>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000c92:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <NRF24_setDataRate+0xb4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000c98:	183b      	adds	r3, r7, r0
 8000c9a:	183a      	adds	r2, r7, r0
 8000c9c:	7812      	ldrb	r2, [r2, #0]
 8000c9e:	2120      	movs	r1, #32
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	701a      	strb	r2, [r3, #0]
 8000ca4:	e011      	b.n	8000cca <NRF24_setDataRate+0x76>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d10a      	bne.n	8000cc4 <NRF24_setDataRate+0x70>
    {
      wide_band = true ;
 8000cae:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <NRF24_setDataRate+0xb4>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000cb4:	220e      	movs	r2, #14
 8000cb6:	18bb      	adds	r3, r7, r2
 8000cb8:	18ba      	adds	r2, r7, r2
 8000cba:	7812      	ldrb	r2, [r2, #0]
 8000cbc:	2108      	movs	r1, #8
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	701a      	strb	r2, [r3, #0]
 8000cc2:	e002      	b.n	8000cca <NRF24_setDataRate+0x76>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000cc4:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <NRF24_setDataRate+0xb4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000cca:	240e      	movs	r4, #14
 8000ccc:	193b      	adds	r3, r7, r4
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	0019      	movs	r1, r3
 8000cd2:	2006      	movs	r0, #6
 8000cd4:	f7ff fc9e 	bl	8000614 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000cd8:	2006      	movs	r0, #6
 8000cda:	f7ff fc3f 	bl	800055c <NRF24_read_register>
 8000cde:	0003      	movs	r3, r0
 8000ce0:	001a      	movs	r2, r3
 8000ce2:	193b      	adds	r3, r7, r4
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d104      	bne.n	8000cf4 <NRF24_setDataRate+0xa0>
  {
    result = true;
 8000cea:	230f      	movs	r3, #15
 8000cec:	18fb      	adds	r3, r7, r3
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]
 8000cf2:	e002      	b.n	8000cfa <NRF24_setDataRate+0xa6>
  }
  else
  {
    wide_band = false;
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <NRF24_setDataRate+0xb4>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000cfa:	230f      	movs	r3, #15
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	781b      	ldrb	r3, [r3, #0]
}
 8000d00:	0018      	movs	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b004      	add	sp, #16
 8000d06:	bdb0      	pop	{r4, r5, r7, pc}
 8000d08:	2000002c 	.word	0x2000002c

08000d0c <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	0002      	movs	r2, r0
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	701a      	strb	r2, [r3, #0]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f7ff fc1f 	bl	800055c <NRF24_read_register>
 8000d1e:	0003      	movs	r3, r0
 8000d20:	0019      	movs	r1, r3
 8000d22:	200f      	movs	r0, #15
 8000d24:	183b      	adds	r3, r7, r0
 8000d26:	220c      	movs	r2, #12
 8000d28:	4391      	bics	r1, r2
 8000d2a:	000a      	movs	r2, r1
 8000d2c:	701a      	strb	r2, [r3, #0]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d017      	beq.n	8000d66 <NRF24_setCRCLength+0x5a>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8000d36:	1dfb      	adds	r3, r7, #7
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d106      	bne.n	8000d4c <NRF24_setCRCLength+0x40>
  {
    config |= _BV(BIT_EN_CRC);
 8000d3e:	183b      	adds	r3, r7, r0
 8000d40:	183a      	adds	r2, r7, r0
 8000d42:	7812      	ldrb	r2, [r2, #0]
 8000d44:	2108      	movs	r1, #8
 8000d46:	430a      	orrs	r2, r1
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	e00c      	b.n	8000d66 <NRF24_setCRCLength+0x5a>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000d4c:	200f      	movs	r0, #15
 8000d4e:	183b      	adds	r3, r7, r0
 8000d50:	183a      	adds	r2, r7, r0
 8000d52:	7812      	ldrb	r2, [r2, #0]
 8000d54:	2108      	movs	r1, #8
 8000d56:	430a      	orrs	r2, r1
 8000d58:	701a      	strb	r2, [r3, #0]
    config |= _BV( BIT_CRCO );
 8000d5a:	183b      	adds	r3, r7, r0
 8000d5c:	183a      	adds	r2, r7, r0
 8000d5e:	7812      	ldrb	r2, [r2, #0]
 8000d60:	2104      	movs	r1, #4
 8000d62:	430a      	orrs	r2, r1
 8000d64:	701a      	strb	r2, [r3, #0]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000d66:	230f      	movs	r3, #15
 8000d68:	18fb      	adds	r3, r7, r3
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	0019      	movs	r1, r3
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f7ff fc50 	bl	8000614 <NRF24_write_register>
}
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b004      	add	sp, #16
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000d80:	2000      	movs	r0, #0
 8000d82:	f7ff fbeb 	bl	800055c <NRF24_read_register>
 8000d86:	0003      	movs	r3, r0
 8000d88:	001a      	movs	r2, r3
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	439a      	bics	r2, r3
 8000d8e:	0013      	movs	r3, r2
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	0019      	movs	r1, r3
 8000d94:	2000      	movs	r0, #0
 8000d96:	f7ff fc3d 	bl	8000614 <NRF24_write_register>
}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000da0:	b5b0      	push	{r4, r5, r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000da8:	250f      	movs	r5, #15
 8000daa:	197c      	adds	r4, r7, r5
 8000dac:	f7ff fcc0 	bl	8000730 <NRF24_get_status>
 8000db0:	0003      	movs	r3, r0
 8000db2:	7023      	strb	r3, [r4, #0]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000db4:	0028      	movs	r0, r5
 8000db6:	183b      	adds	r3, r7, r0
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2240      	movs	r2, #64	; 0x40
 8000dbc:	401a      	ands	r2, r3
 8000dbe:	240e      	movs	r4, #14
 8000dc0:	193b      	adds	r3, r7, r4
 8000dc2:	1e51      	subs	r1, r2, #1
 8000dc4:	418a      	sbcs	r2, r1
 8000dc6:	701a      	strb	r2, [r3, #0]

  if (result)
 8000dc8:	193b      	adds	r3, r7, r4
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d019      	beq.n	8000e04 <NRF24_availablePipe+0x64>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d008      	beq.n	8000de8 <NRF24_availablePipe+0x48>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000dd6:	183b      	adds	r3, r7, r0
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	085b      	lsrs	r3, r3, #1
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2207      	movs	r2, #7
 8000de0:	4013      	ands	r3, r2
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000de8:	2140      	movs	r1, #64	; 0x40
 8000dea:	2007      	movs	r0, #7
 8000dec:	f7ff fc12 	bl	8000614 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000df0:	230f      	movs	r3, #15
 8000df2:	18fb      	adds	r3, r7, r3
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2220      	movs	r2, #32
 8000df8:	4013      	ands	r3, r2
 8000dfa:	d003      	beq.n	8000e04 <NRF24_availablePipe+0x64>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000dfc:	2120      	movs	r1, #32
 8000dfe:	2007      	movs	r0, #7
 8000e00:	f7ff fc08 	bl	8000614 <NRF24_write_register>
    }
  }
  return result;
 8000e04:	230e      	movs	r3, #14
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	781b      	ldrb	r3, [r3, #0]
}
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	b004      	add	sp, #16
 8000e10:	bdb0      	pop	{r4, r5, r7, pc}

08000e12 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
 8000e1a:	000a      	movs	r2, r1
 8000e1c:	1cfb      	adds	r3, r7, #3
 8000e1e:	701a      	strb	r2, [r3, #0]
  // Transmitter power-up
  NRF24_ce(0);
 8000e20:	2000      	movs	r0, #0
 8000e22:	f7ff fb7b 	bl	800051c <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8000e26:	2000      	movs	r0, #0
 8000e28:	f7ff fb98 	bl	800055c <NRF24_read_register>
 8000e2c:	0003      	movs	r3, r0
 8000e2e:	001a      	movs	r2, r3
 8000e30:	2302      	movs	r3, #2
 8000e32:	4313      	orrs	r3, r2
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2201      	movs	r2, #1
 8000e38:	4393      	bics	r3, r2
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	0019      	movs	r1, r3
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f7ff fbe8 	bl	8000614 <NRF24_write_register>
  NRF24_ce(1);
 8000e44:	2001      	movs	r0, #1
 8000e46:	f7ff fb69 	bl	800051c <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8000e4a:	2096      	movs	r0, #150	; 0x96
 8000e4c:	f7ff fb26 	bl	800049c <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8000e50:	1cfb      	adds	r3, r7, #3
 8000e52:	781a      	ldrb	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	0011      	movs	r1, r2
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff fc31 	bl	80006c0 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8000e5e:	2001      	movs	r0, #1
 8000e60:	f7ff fb5c 	bl	800051c <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8000e64:	200f      	movs	r0, #15
 8000e66:	f7ff fb19 	bl	800049c <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f7ff fb56 	bl	800051c <NRF24_ce>
}
 8000e70:	46c0      	nop			; (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b002      	add	sp, #8
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8000e78:	b5b0      	push	{r4, r5, r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000e84:	2517      	movs	r5, #23
 8000e86:	197c      	adds	r4, r7, r5
 8000e88:	f7ff fc52 	bl	8000730 <NRF24_get_status>
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	7023      	strb	r3, [r4, #0]
	*tx_ok = 0;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000e96:	2170      	movs	r1, #112	; 0x70
 8000e98:	2007      	movs	r0, #7
 8000e9a:	f7ff fbbb 	bl	8000614 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8000e9e:	0029      	movs	r1, r5
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2220      	movs	r2, #32
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	1e5a      	subs	r2, r3, #1
 8000eaa:	4193      	sbcs	r3, r2
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8000eb2:	187b      	adds	r3, r7, r1
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2210      	movs	r2, #16
 8000eb8:	4013      	ands	r3, r2
 8000eba:	1e5a      	subs	r2, r3, #1
 8000ebc:	4193      	sbcs	r3, r2
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2240      	movs	r2, #64	; 0x40
 8000eca:	4013      	ands	r3, r2
 8000ecc:	1e5a      	subs	r2, r3, #1
 8000ece:	4193      	sbcs	r3, r2
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	701a      	strb	r2, [r3, #0]
}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b006      	add	sp, #24
 8000edc:	bdb0      	pop	{r4, r5, r7, pc}

08000ede <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000ee2:	2170      	movs	r1, #112	; 0x70
 8000ee4:	2007      	movs	r0, #7
 8000ee6:	f7ff fb95 	bl	8000614 <NRF24_write_register>
}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f7ff faf0 	bl	80004dc <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	2250      	movs	r2, #80	; 0x50
 8000f00:	701a      	strb	r2, [r3, #0]
	cmdRxBuf[1] = 0x73;
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2273      	movs	r2, #115	; 0x73
 8000f06:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000f08:	1d39      	adds	r1, r7, #4
 8000f0a:	4806      	ldr	r0, [pc, #24]	; (8000f24 <NRF24_ACTIVATE_cmd+0x34>)
 8000f0c:	2364      	movs	r3, #100	; 0x64
 8000f0e:	2202      	movs	r2, #2
 8000f10:	f001 fb2b 	bl	800256a <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f7ff fae1 	bl	80004dc <NRF24_csn>
}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b002      	add	sp, #8
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	20000038 	.word	0x20000038

08000f28 <read_regs>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void read_regs()
{
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
	uint8_t config = NRF24_read_register(REG_CONFIG);
 8000f2e:	230f      	movs	r3, #15
 8000f30:	18fc      	adds	r4, r7, r3
 8000f32:	2000      	movs	r0, #0
 8000f34:	f7ff fb12 	bl	800055c <NRF24_read_register>
 8000f38:	0003      	movs	r3, r0
 8000f3a:	7023      	strb	r3, [r4, #0]
	uint8_t en_aa = NRF24_read_register(REG_EN_AA);
 8000f3c:	230e      	movs	r3, #14
 8000f3e:	18fc      	adds	r4, r7, r3
 8000f40:	2001      	movs	r0, #1
 8000f42:	f7ff fb0b 	bl	800055c <NRF24_read_register>
 8000f46:	0003      	movs	r3, r0
 8000f48:	7023      	strb	r3, [r4, #0]
	uint8_t en_rxaddr = NRF24_read_register(REG_EN_RXADDR);
 8000f4a:	230d      	movs	r3, #13
 8000f4c:	18fc      	adds	r4, r7, r3
 8000f4e:	2002      	movs	r0, #2
 8000f50:	f7ff fb04 	bl	800055c <NRF24_read_register>
 8000f54:	0003      	movs	r3, r0
 8000f56:	7023      	strb	r3, [r4, #0]
	uint8_t setup_aw = NRF24_read_register(REG_SETUP_AW);
 8000f58:	230c      	movs	r3, #12
 8000f5a:	18fc      	adds	r4, r7, r3
 8000f5c:	2003      	movs	r0, #3
 8000f5e:	f7ff fafd 	bl	800055c <NRF24_read_register>
 8000f62:	0003      	movs	r3, r0
 8000f64:	7023      	strb	r3, [r4, #0]
	uint8_t setup_retr = NRF24_read_register(REG_SETUP_RETR);
 8000f66:	230b      	movs	r3, #11
 8000f68:	18fc      	adds	r4, r7, r3
 8000f6a:	2004      	movs	r0, #4
 8000f6c:	f7ff faf6 	bl	800055c <NRF24_read_register>
 8000f70:	0003      	movs	r3, r0
 8000f72:	7023      	strb	r3, [r4, #0]
	uint8_t ch = NRF24_read_register(REG_RF_CH);
 8000f74:	230a      	movs	r3, #10
 8000f76:	18fc      	adds	r4, r7, r3
 8000f78:	2005      	movs	r0, #5
 8000f7a:	f7ff faef 	bl	800055c <NRF24_read_register>
 8000f7e:	0003      	movs	r3, r0
 8000f80:	7023      	strb	r3, [r4, #0]
	uint8_t rf_setup = NRF24_read_register(REG_RF_SETUP);
 8000f82:	2309      	movs	r3, #9
 8000f84:	18fc      	adds	r4, r7, r3
 8000f86:	2006      	movs	r0, #6
 8000f88:	f7ff fae8 	bl	800055c <NRF24_read_register>
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	7023      	strb	r3, [r4, #0]

	uint8_t dynpd = NRF24_read_register(REG_DYNPD);
 8000f90:	2308      	movs	r3, #8
 8000f92:	18fc      	adds	r4, r7, r3
 8000f94:	201c      	movs	r0, #28
 8000f96:	f7ff fae1 	bl	800055c <NRF24_read_register>
 8000f9a:	0003      	movs	r3, r0
 8000f9c:	7023      	strb	r3, [r4, #0]
	uint8_t feature = NRF24_read_register(REG_FEATURE);
 8000f9e:	1dfc      	adds	r4, r7, #7
 8000fa0:	201d      	movs	r0, #29
 8000fa2:	f7ff fadb 	bl	800055c <NRF24_read_register>
 8000fa6:	0003      	movs	r3, r0
 8000fa8:	7023      	strb	r3, [r4, #0]

	uint8_t pipe_addr[5];
	NRF24_read_registerN(0x0A+1, pipe_addr, 5);
 8000faa:	003b      	movs	r3, r7
 8000fac:	2205      	movs	r2, #5
 8000fae:	0019      	movs	r1, r3
 8000fb0:	200b      	movs	r0, #11
 8000fb2:	f7ff fb01 	bl	80005b8 <NRF24_read_registerN>
	uint8_t a = pipe_addr[4];
 8000fb6:	1dbb      	adds	r3, r7, #6
 8000fb8:	003a      	movs	r2, r7
 8000fba:	7912      	ldrb	r2, [r2, #4]
 8000fbc:	701a      	strb	r2, [r3, #0]
	return;
 8000fbe:	46c0      	nop			; (mov r8, r8)
}
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b005      	add	sp, #20
 8000fc4:	bd90      	pop	{r4, r7, pc}
	...

08000fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fca:	b0a5      	sub	sp, #148	; 0x94
 8000fcc:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fce:	f000 f9f3 	bl	80013b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd2:	f000 f863 	bl	800109c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd6:	f000 f8ed 	bl	80011b4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000fda:	f000 f8b3 	bl	8001144 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  NRF24_begin(CSN_GPIO_Port, CSN_Pin, CE_Pin, hspi1);
 8000fde:	4c2c      	ldr	r4, [pc, #176]	; (8001090 <main+0xc8>)
 8000fe0:	2380      	movs	r3, #128	; 0x80
 8000fe2:	021e      	lsls	r6, r3, #8
 8000fe4:	23a0      	movs	r3, #160	; 0xa0
 8000fe6:	05dd      	lsls	r5, r3, #23
 8000fe8:	466b      	mov	r3, sp
 8000fea:	0018      	movs	r0, r3
 8000fec:	1d23      	adds	r3, r4, #4
 8000fee:	2254      	movs	r2, #84	; 0x54
 8000ff0:	0019      	movs	r1, r3
 8000ff2:	f002 f855 	bl	80030a0 <memcpy>
 8000ff6:	6823      	ldr	r3, [r4, #0]
 8000ff8:	2204      	movs	r2, #4
 8000ffa:	0031      	movs	r1, r6
 8000ffc:	0028      	movs	r0, r5
 8000ffe:	f7ff fba7 	bl	8000750 <NRF24_begin>
//	NRF24_setDataRate(RF24_250KBPS);
////	NRF24_enableDynamicPayloads();
//	NRF24_startListening();


	uint64_t TxpipeAddrs = 0x5566778899;
 8001002:	4a24      	ldr	r2, [pc, #144]	; (8001094 <main+0xcc>)
 8001004:	2355      	movs	r3, #85	; 0x55
 8001006:	633a      	str	r2, [r7, #48]	; 0x30
 8001008:	637b      	str	r3, [r7, #52]	; 0x34
	char myTxData[5] = "Hello";
 800100a:	2428      	movs	r4, #40	; 0x28
 800100c:	193b      	adds	r3, r7, r4
 800100e:	4a22      	ldr	r2, [pc, #136]	; (8001098 <main+0xd0>)
 8001010:	6811      	ldr	r1, [r2, #0]
 8001012:	6019      	str	r1, [r3, #0]
 8001014:	7912      	ldrb	r2, [r2, #4]
 8001016:	711a      	strb	r2, [r3, #4]
	char AckPayload[32];


	NRF24_stopListening();
 8001018:	f7ff fca2 	bl	8000960 <NRF24_stopListening>
	NRF24_openWritingPipe(TxpipeAddrs);
 800101c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800101e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001020:	0010      	movs	r0, r2
 8001022:	0019      	movs	r1, r3
 8001024:	f7ff fd08 	bl	8000a38 <NRF24_openWritingPipe>
	NRF24_setAutoAck(true);
 8001028:	2001      	movs	r0, #1
 800102a:	f7ff fdab 	bl	8000b84 <NRF24_setAutoAck>
	NRF24_setChannel(120);
 800102e:	2078      	movs	r0, #120	; 0x78
 8001030:	f7ff fd4a 	bl	8000ac8 <NRF24_setChannel>
	NRF24_setPayloadSize(5);
 8001034:	2005      	movs	r0, #5
 8001036:	f7ff fd63 	bl	8000b00 <NRF24_setPayloadSize>
	NRF24_setDataRate(RF24_250KBPS);
 800103a:	2002      	movs	r0, #2
 800103c:	f7ff fe0a 	bl	8000c54 <NRF24_setDataRate>
	NRF24_write(myTxData, 5);
 8001040:	193b      	adds	r3, r7, r4
 8001042:	2105      	movs	r1, #5
 8001044:	0018      	movs	r0, r3
 8001046:	f7ff fc97 	bl	8000978 <NRF24_write>

	read_regs();
 800104a:	f7ff ff6d 	bl	8000f28 <read_regs>
//		  read_regs();
//		  HAL_Delay(250);
//
//	  }

		if(NRF24_write(myTxData, 5))
 800104e:	2328      	movs	r3, #40	; 0x28
 8001050:	18fb      	adds	r3, r7, r3
 8001052:	2105      	movs	r1, #5
 8001054:	0018      	movs	r0, r3
 8001056:	f7ff fc8f 	bl	8000978 <NRF24_write>
 800105a:	1e03      	subs	r3, r0, #0
 800105c:	d00c      	beq.n	8001078 <main+0xb0>
		{
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 800105e:	2380      	movs	r3, #128	; 0x80
 8001060:	00da      	lsls	r2, r3, #3
 8001062:	23a0      	movs	r3, #160	; 0xa0
 8001064:	05db      	lsls	r3, r3, #23
 8001066:	0011      	movs	r1, r2
 8001068:	0018      	movs	r0, r3
 800106a:	f000 fc70 	bl	800194e <HAL_GPIO_TogglePin>
			  HAL_Delay(500);
 800106e:	23fa      	movs	r3, #250	; 0xfa
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	0018      	movs	r0, r3
 8001074:	f000 fa10 	bl	8001498 <HAL_Delay>
		}

		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8001078:	2380      	movs	r3, #128	; 0x80
 800107a:	009a      	lsls	r2, r3, #2
 800107c:	23a0      	movs	r3, #160	; 0xa0
 800107e:	05db      	lsls	r3, r3, #23
 8001080:	0011      	movs	r1, r2
 8001082:	0018      	movs	r0, r3
 8001084:	f000 fc63 	bl	800194e <HAL_GPIO_TogglePin>
		HAL_Delay(250);
 8001088:	20fa      	movs	r0, #250	; 0xfa
 800108a:	f000 fa05 	bl	8001498 <HAL_Delay>
		if(NRF24_write(myTxData, 5))
 800108e:	e7de      	b.n	800104e <main+0x86>
 8001090:	20000090 	.word	0x20000090
 8001094:	66778899 	.word	0x66778899
 8001098:	080030dc 	.word	0x080030dc

0800109c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b093      	sub	sp, #76	; 0x4c
 80010a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a2:	2414      	movs	r4, #20
 80010a4:	193b      	adds	r3, r7, r4
 80010a6:	0018      	movs	r0, r3
 80010a8:	2334      	movs	r3, #52	; 0x34
 80010aa:	001a      	movs	r2, r3
 80010ac:	2100      	movs	r1, #0
 80010ae:	f002 f800 	bl	80030b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b2:	003b      	movs	r3, r7
 80010b4:	0018      	movs	r0, r3
 80010b6:	2314      	movs	r3, #20
 80010b8:	001a      	movs	r2, r3
 80010ba:	2100      	movs	r1, #0
 80010bc:	f001 fff9 	bl	80030b2 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c0:	4b1e      	ldr	r3, [pc, #120]	; (800113c <SystemClock_Config+0xa0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a1e      	ldr	r2, [pc, #120]	; (8001140 <SystemClock_Config+0xa4>)
 80010c6:	401a      	ands	r2, r3
 80010c8:	4b1c      	ldr	r3, [pc, #112]	; (800113c <SystemClock_Config+0xa0>)
 80010ca:	2180      	movs	r1, #128	; 0x80
 80010cc:	0109      	lsls	r1, r1, #4
 80010ce:	430a      	orrs	r2, r1
 80010d0:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80010d2:	0021      	movs	r1, r4
 80010d4:	187b      	adds	r3, r7, r1
 80010d6:	2210      	movs	r2, #16
 80010d8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010da:	187b      	adds	r3, r7, r1
 80010dc:	2201      	movs	r2, #1
 80010de:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010e0:	187b      	adds	r3, r7, r1
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80010e6:	187b      	adds	r3, r7, r1
 80010e8:	22a0      	movs	r2, #160	; 0xa0
 80010ea:	0212      	lsls	r2, r2, #8
 80010ec:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	2200      	movs	r2, #0
 80010f2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f4:	187b      	adds	r3, r7, r1
 80010f6:	0018      	movs	r0, r3
 80010f8:	f000 fc44 	bl	8001984 <HAL_RCC_OscConfig>
 80010fc:	1e03      	subs	r3, r0, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001100:	f000 f89e 	bl	8001240 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001104:	003b      	movs	r3, r7
 8001106:	220f      	movs	r2, #15
 8001108:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800110a:	003b      	movs	r3, r7
 800110c:	2200      	movs	r2, #0
 800110e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001110:	003b      	movs	r3, r7
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001116:	003b      	movs	r3, r7
 8001118:	2200      	movs	r2, #0
 800111a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111c:	003b      	movs	r3, r7
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001122:	003b      	movs	r3, r7
 8001124:	2100      	movs	r1, #0
 8001126:	0018      	movs	r0, r3
 8001128:	f000 ffa8 	bl	800207c <HAL_RCC_ClockConfig>
 800112c:	1e03      	subs	r3, r0, #0
 800112e:	d001      	beq.n	8001134 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001130:	f000 f886 	bl	8001240 <Error_Handler>
  }
}
 8001134:	46c0      	nop			; (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	b013      	add	sp, #76	; 0x4c
 800113a:	bd90      	pop	{r4, r7, pc}
 800113c:	40007000 	.word	0x40007000
 8001140:	ffffe7ff 	.word	0xffffe7ff

08001144 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <MX_SPI1_Init+0x68>)
 800114a:	4a19      	ldr	r2, [pc, #100]	; (80011b0 <MX_SPI1_Init+0x6c>)
 800114c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800114e:	4b17      	ldr	r3, [pc, #92]	; (80011ac <MX_SPI1_Init+0x68>)
 8001150:	2282      	movs	r2, #130	; 0x82
 8001152:	0052      	lsls	r2, r2, #1
 8001154:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <MX_SPI1_Init+0x68>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800115c:	4b13      	ldr	r3, [pc, #76]	; (80011ac <MX_SPI1_Init+0x68>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <MX_SPI1_Init+0x68>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001168:	4b10      	ldr	r3, [pc, #64]	; (80011ac <MX_SPI1_Init+0x68>)
 800116a:	2200      	movs	r2, #0
 800116c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_SPI1_Init+0x68>)
 8001170:	2280      	movs	r2, #128	; 0x80
 8001172:	0092      	lsls	r2, r2, #2
 8001174:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001176:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <MX_SPI1_Init+0x68>)
 8001178:	2238      	movs	r2, #56	; 0x38
 800117a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <MX_SPI1_Init+0x68>)
 800117e:	2200      	movs	r2, #0
 8001180:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001182:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <MX_SPI1_Init+0x68>)
 8001184:	2200      	movs	r2, #0
 8001186:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <MX_SPI1_Init+0x68>)
 800118a:	2200      	movs	r2, #0
 800118c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800118e:	4b07      	ldr	r3, [pc, #28]	; (80011ac <MX_SPI1_Init+0x68>)
 8001190:	2207      	movs	r2, #7
 8001192:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <MX_SPI1_Init+0x68>)
 8001196:	0018      	movs	r0, r3
 8001198:	f001 f95e 	bl	8002458 <HAL_SPI_Init>
 800119c:	1e03      	subs	r3, r0, #0
 800119e:	d001      	beq.n	80011a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011a0:	f000 f84e 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011a4:	46c0      	nop			; (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	20000090 	.word	0x20000090
 80011b0:	40013000 	.word	0x40013000

080011b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b4:	b590      	push	{r4, r7, lr}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ba:	240c      	movs	r4, #12
 80011bc:	193b      	adds	r3, r7, r4
 80011be:	0018      	movs	r0, r3
 80011c0:	2314      	movs	r3, #20
 80011c2:	001a      	movs	r2, r3
 80011c4:	2100      	movs	r1, #0
 80011c6:	f001 ff74 	bl	80030b2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <MX_GPIO_Init+0x84>)
 80011cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011ce:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <MX_GPIO_Init+0x84>)
 80011d0:	2101      	movs	r1, #1
 80011d2:	430a      	orrs	r2, r1
 80011d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80011d6:	4b18      	ldr	r3, [pc, #96]	; (8001238 <MX_GPIO_Init+0x84>)
 80011d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011da:	2201      	movs	r2, #1
 80011dc:	4013      	ands	r3, r2
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <MX_GPIO_Init+0x84>)
 80011e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <MX_GPIO_Init+0x84>)
 80011e8:	2102      	movs	r1, #2
 80011ea:	430a      	orrs	r2, r1
 80011ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80011ee:	4b12      	ldr	r3, [pc, #72]	; (8001238 <MX_GPIO_Init+0x84>)
 80011f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f2:	2202      	movs	r2, #2
 80011f4:	4013      	ands	r3, r2
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE_Pin|GPIO_PIN_9|GPIO_PIN_10|CSN_Pin, GPIO_PIN_RESET);
 80011fa:	4910      	ldr	r1, [pc, #64]	; (800123c <MX_GPIO_Init+0x88>)
 80011fc:	23a0      	movs	r3, #160	; 0xa0
 80011fe:	05db      	lsls	r3, r3, #23
 8001200:	2200      	movs	r2, #0
 8001202:	0018      	movs	r0, r3
 8001204:	f000 fb86 	bl	8001914 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CE_Pin PA9 PA10 CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|GPIO_PIN_9|GPIO_PIN_10|CSN_Pin;
 8001208:	0021      	movs	r1, r4
 800120a:	187b      	adds	r3, r7, r1
 800120c:	4a0b      	ldr	r2, [pc, #44]	; (800123c <MX_GPIO_Init+0x88>)
 800120e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001210:	187b      	adds	r3, r7, r1
 8001212:	2201      	movs	r2, #1
 8001214:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	187b      	adds	r3, r7, r1
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	187b      	adds	r3, r7, r1
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001222:	187a      	adds	r2, r7, r1
 8001224:	23a0      	movs	r3, #160	; 0xa0
 8001226:	05db      	lsls	r3, r3, #23
 8001228:	0011      	movs	r1, r2
 800122a:	0018      	movs	r0, r3
 800122c:	f000 fa0c 	bl	8001648 <HAL_GPIO_Init>

}
 8001230:	46c0      	nop			; (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	b009      	add	sp, #36	; 0x24
 8001236:	bd90      	pop	{r4, r7, pc}
 8001238:	40021000 	.word	0x40021000
 800123c:	00008604 	.word	0x00008604

08001240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001244:	b672      	cpsid	i
}
 8001246:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001248:	e7fe      	b.n	8001248 <Error_Handler+0x8>
	...

0800124c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001250:	4b07      	ldr	r3, [pc, #28]	; (8001270 <HAL_MspInit+0x24>)
 8001252:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_MspInit+0x24>)
 8001256:	2101      	movs	r1, #1
 8001258:	430a      	orrs	r2, r1
 800125a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <HAL_MspInit+0x24>)
 800125e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <HAL_MspInit+0x24>)
 8001262:	2180      	movs	r1, #128	; 0x80
 8001264:	0549      	lsls	r1, r1, #21
 8001266:	430a      	orrs	r2, r1
 8001268:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40021000 	.word	0x40021000

08001274 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b089      	sub	sp, #36	; 0x24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	240c      	movs	r4, #12
 800127e:	193b      	adds	r3, r7, r4
 8001280:	0018      	movs	r0, r3
 8001282:	2314      	movs	r3, #20
 8001284:	001a      	movs	r2, r3
 8001286:	2100      	movs	r1, #0
 8001288:	f001 ff13 	bl	80030b2 <memset>
  if(hspi->Instance==SPI1)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a17      	ldr	r2, [pc, #92]	; (80012f0 <HAL_SPI_MspInit+0x7c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d128      	bne.n	80012e8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001296:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <HAL_SPI_MspInit+0x80>)
 8001298:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800129a:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <HAL_SPI_MspInit+0x80>)
 800129c:	2180      	movs	r1, #128	; 0x80
 800129e:	0149      	lsls	r1, r1, #5
 80012a0:	430a      	orrs	r2, r1
 80012a2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <HAL_SPI_MspInit+0x80>)
 80012a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_SPI_MspInit+0x80>)
 80012aa:	2102      	movs	r1, #2
 80012ac:	430a      	orrs	r2, r1
 80012ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80012b0:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <HAL_SPI_MspInit+0x80>)
 80012b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b4:	2202      	movs	r2, #2
 80012b6:	4013      	ands	r3, r2
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80012bc:	0021      	movs	r1, r4
 80012be:	187b      	adds	r3, r7, r1
 80012c0:	2238      	movs	r2, #56	; 0x38
 80012c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	187b      	adds	r3, r7, r1
 80012c6:	2202      	movs	r2, #2
 80012c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	187b      	adds	r3, r7, r1
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d0:	187b      	adds	r3, r7, r1
 80012d2:	2203      	movs	r2, #3
 80012d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80012d6:	187b      	adds	r3, r7, r1
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012dc:	187b      	adds	r3, r7, r1
 80012de:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <HAL_SPI_MspInit+0x84>)
 80012e0:	0019      	movs	r1, r3
 80012e2:	0010      	movs	r0, r2
 80012e4:	f000 f9b0 	bl	8001648 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012e8:	46c0      	nop			; (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b009      	add	sp, #36	; 0x24
 80012ee:	bd90      	pop	{r4, r7, pc}
 80012f0:	40013000 	.word	0x40013000
 80012f4:	40021000 	.word	0x40021000
 80012f8:	50000400 	.word	0x50000400

080012fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <NMI_Handler+0x4>

08001302 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001306:	e7fe      	b.n	8001306 <HardFault_Handler+0x4>

08001308 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800130c:	46c0      	nop			; (mov r8, r8)
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001320:	f000 f89e 	bl	8001460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001324:	46c0      	nop			; (mov r8, r8)
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001334:	4813      	ldr	r0, [pc, #76]	; (8001384 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001336:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001338:	4813      	ldr	r0, [pc, #76]	; (8001388 <LoopForever+0x6>)
    LDR R1, [R0]
 800133a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800133c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800133e:	4a13      	ldr	r2, [pc, #76]	; (800138c <LoopForever+0xa>)
    CMP R1, R2
 8001340:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001342:	d105      	bne.n	8001350 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001344:	4812      	ldr	r0, [pc, #72]	; (8001390 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001346:	4913      	ldr	r1, [pc, #76]	; (8001394 <LoopForever+0x12>)
    STR R1, [R0]
 8001348:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800134a:	4813      	ldr	r0, [pc, #76]	; (8001398 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800134c:	4913      	ldr	r1, [pc, #76]	; (800139c <LoopForever+0x1a>)
    STR R1, [R0]
 800134e:	6001      	str	r1, [r0, #0]

08001350 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001350:	4813      	ldr	r0, [pc, #76]	; (80013a0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001352:	4914      	ldr	r1, [pc, #80]	; (80013a4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001354:	4a14      	ldr	r2, [pc, #80]	; (80013a8 <LoopForever+0x26>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001358:	e002      	b.n	8001360 <LoopCopyDataInit>

0800135a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800135c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135e:	3304      	adds	r3, #4

08001360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001364:	d3f9      	bcc.n	800135a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001366:	4a11      	ldr	r2, [pc, #68]	; (80013ac <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001368:	4c11      	ldr	r4, [pc, #68]	; (80013b0 <LoopForever+0x2e>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800136c:	e001      	b.n	8001372 <LoopFillZerobss>

0800136e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001370:	3204      	adds	r2, #4

08001372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001374:	d3fb      	bcc.n	800136e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001376:	f7ff ffd8 	bl	800132a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800137a:	f001 fe6d 	bl	8003058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800137e:	f7ff fe23 	bl	8000fc8 <main>

08001382 <LoopForever>:

LoopForever:
    b LoopForever
 8001382:	e7fe      	b.n	8001382 <LoopForever>
   ldr   r0, =_estack
 8001384:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8001388:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800138c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8001390:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001394:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001398:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800139c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80013a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013a8:	08003110 	.word	0x08003110
  ldr r2, =_sbss
 80013ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013b0:	200000ec 	.word	0x200000ec

080013b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b4:	e7fe      	b.n	80013b4 <ADC1_IRQHandler>
	...

080013b8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013be:	1dfb      	adds	r3, r7, #7
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <HAL_Init+0x3c>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_Init+0x3c>)
 80013ca:	2140      	movs	r1, #64	; 0x40
 80013cc:	430a      	orrs	r2, r1
 80013ce:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013d0:	2000      	movs	r0, #0
 80013d2:	f000 f811 	bl	80013f8 <HAL_InitTick>
 80013d6:	1e03      	subs	r3, r0, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80013da:	1dfb      	adds	r3, r7, #7
 80013dc:	2201      	movs	r2, #1
 80013de:	701a      	strb	r2, [r3, #0]
 80013e0:	e001      	b.n	80013e6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013e2:	f7ff ff33 	bl	800124c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013e6:	1dfb      	adds	r3, r7, #7
 80013e8:	781b      	ldrb	r3, [r3, #0]
}
 80013ea:	0018      	movs	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b002      	add	sp, #8
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	40022000 	.word	0x40022000

080013f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <HAL_InitTick+0x5c>)
 8001402:	681c      	ldr	r4, [r3, #0]
 8001404:	4b14      	ldr	r3, [pc, #80]	; (8001458 <HAL_InitTick+0x60>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	0019      	movs	r1, r3
 800140a:	23fa      	movs	r3, #250	; 0xfa
 800140c:	0098      	lsls	r0, r3, #2
 800140e:	f7fe fe7b 	bl	8000108 <__udivsi3>
 8001412:	0003      	movs	r3, r0
 8001414:	0019      	movs	r1, r3
 8001416:	0020      	movs	r0, r4
 8001418:	f7fe fe76 	bl	8000108 <__udivsi3>
 800141c:	0003      	movs	r3, r0
 800141e:	0018      	movs	r0, r3
 8001420:	f000 f905 	bl	800162e <HAL_SYSTICK_Config>
 8001424:	1e03      	subs	r3, r0, #0
 8001426:	d001      	beq.n	800142c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e00f      	b.n	800144c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b03      	cmp	r3, #3
 8001430:	d80b      	bhi.n	800144a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	2301      	movs	r3, #1
 8001436:	425b      	negs	r3, r3
 8001438:	2200      	movs	r2, #0
 800143a:	0018      	movs	r0, r3
 800143c:	f000 f8e2 	bl	8001604 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_InitTick+0x64>)
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	e000      	b.n	800144c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
}
 800144c:	0018      	movs	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	b003      	add	sp, #12
 8001452:	bd90      	pop	{r4, r7, pc}
 8001454:	20000000 	.word	0x20000000
 8001458:	20000008 	.word	0x20000008
 800145c:	20000004 	.word	0x20000004

08001460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <HAL_IncTick+0x1c>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	001a      	movs	r2, r3
 800146a:	4b05      	ldr	r3, [pc, #20]	; (8001480 <HAL_IncTick+0x20>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	18d2      	adds	r2, r2, r3
 8001470:	4b03      	ldr	r3, [pc, #12]	; (8001480 <HAL_IncTick+0x20>)
 8001472:	601a      	str	r2, [r3, #0]
}
 8001474:	46c0      	nop			; (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	20000008 	.word	0x20000008
 8001480:	200000e8 	.word	0x200000e8

08001484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  return uwTick;
 8001488:	4b02      	ldr	r3, [pc, #8]	; (8001494 <HAL_GetTick+0x10>)
 800148a:	681b      	ldr	r3, [r3, #0]
}
 800148c:	0018      	movs	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	200000e8 	.word	0x200000e8

08001498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a0:	f7ff fff0 	bl	8001484 <HAL_GetTick>
 80014a4:	0003      	movs	r3, r0
 80014a6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	3301      	adds	r3, #1
 80014b0:	d005      	beq.n	80014be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014b2:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <HAL_Delay+0x44>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	001a      	movs	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	189b      	adds	r3, r3, r2
 80014bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	f7ff ffe0 	bl	8001484 <HAL_GetTick>
 80014c4:	0002      	movs	r2, r0
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d8f7      	bhi.n	80014c0 <HAL_Delay+0x28>
  {
  }
}
 80014d0:	46c0      	nop			; (mov r8, r8)
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	46bd      	mov	sp, r7
 80014d6:	b004      	add	sp, #16
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	20000008 	.word	0x20000008

080014e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	0002      	movs	r2, r0
 80014e8:	6039      	str	r1, [r7, #0]
 80014ea:	1dfb      	adds	r3, r7, #7
 80014ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014ee:	1dfb      	adds	r3, r7, #7
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b7f      	cmp	r3, #127	; 0x7f
 80014f4:	d828      	bhi.n	8001548 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014f6:	4a2f      	ldr	r2, [pc, #188]	; (80015b4 <__NVIC_SetPriority+0xd4>)
 80014f8:	1dfb      	adds	r3, r7, #7
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b25b      	sxtb	r3, r3
 80014fe:	089b      	lsrs	r3, r3, #2
 8001500:	33c0      	adds	r3, #192	; 0xc0
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	589b      	ldr	r3, [r3, r2]
 8001506:	1dfa      	adds	r2, r7, #7
 8001508:	7812      	ldrb	r2, [r2, #0]
 800150a:	0011      	movs	r1, r2
 800150c:	2203      	movs	r2, #3
 800150e:	400a      	ands	r2, r1
 8001510:	00d2      	lsls	r2, r2, #3
 8001512:	21ff      	movs	r1, #255	; 0xff
 8001514:	4091      	lsls	r1, r2
 8001516:	000a      	movs	r2, r1
 8001518:	43d2      	mvns	r2, r2
 800151a:	401a      	ands	r2, r3
 800151c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	019b      	lsls	r3, r3, #6
 8001522:	22ff      	movs	r2, #255	; 0xff
 8001524:	401a      	ands	r2, r3
 8001526:	1dfb      	adds	r3, r7, #7
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	0018      	movs	r0, r3
 800152c:	2303      	movs	r3, #3
 800152e:	4003      	ands	r3, r0
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001534:	481f      	ldr	r0, [pc, #124]	; (80015b4 <__NVIC_SetPriority+0xd4>)
 8001536:	1dfb      	adds	r3, r7, #7
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	b25b      	sxtb	r3, r3
 800153c:	089b      	lsrs	r3, r3, #2
 800153e:	430a      	orrs	r2, r1
 8001540:	33c0      	adds	r3, #192	; 0xc0
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001546:	e031      	b.n	80015ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001548:	4a1b      	ldr	r2, [pc, #108]	; (80015b8 <__NVIC_SetPriority+0xd8>)
 800154a:	1dfb      	adds	r3, r7, #7
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	0019      	movs	r1, r3
 8001550:	230f      	movs	r3, #15
 8001552:	400b      	ands	r3, r1
 8001554:	3b08      	subs	r3, #8
 8001556:	089b      	lsrs	r3, r3, #2
 8001558:	3306      	adds	r3, #6
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	18d3      	adds	r3, r2, r3
 800155e:	3304      	adds	r3, #4
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	1dfa      	adds	r2, r7, #7
 8001564:	7812      	ldrb	r2, [r2, #0]
 8001566:	0011      	movs	r1, r2
 8001568:	2203      	movs	r2, #3
 800156a:	400a      	ands	r2, r1
 800156c:	00d2      	lsls	r2, r2, #3
 800156e:	21ff      	movs	r1, #255	; 0xff
 8001570:	4091      	lsls	r1, r2
 8001572:	000a      	movs	r2, r1
 8001574:	43d2      	mvns	r2, r2
 8001576:	401a      	ands	r2, r3
 8001578:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	019b      	lsls	r3, r3, #6
 800157e:	22ff      	movs	r2, #255	; 0xff
 8001580:	401a      	ands	r2, r3
 8001582:	1dfb      	adds	r3, r7, #7
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	0018      	movs	r0, r3
 8001588:	2303      	movs	r3, #3
 800158a:	4003      	ands	r3, r0
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001590:	4809      	ldr	r0, [pc, #36]	; (80015b8 <__NVIC_SetPriority+0xd8>)
 8001592:	1dfb      	adds	r3, r7, #7
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	001c      	movs	r4, r3
 8001598:	230f      	movs	r3, #15
 800159a:	4023      	ands	r3, r4
 800159c:	3b08      	subs	r3, #8
 800159e:	089b      	lsrs	r3, r3, #2
 80015a0:	430a      	orrs	r2, r1
 80015a2:	3306      	adds	r3, #6
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	18c3      	adds	r3, r0, r3
 80015a8:	3304      	adds	r3, #4
 80015aa:	601a      	str	r2, [r3, #0]
}
 80015ac:	46c0      	nop			; (mov r8, r8)
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b003      	add	sp, #12
 80015b2:	bd90      	pop	{r4, r7, pc}
 80015b4:	e000e100 	.word	0xe000e100
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	1e5a      	subs	r2, r3, #1
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	045b      	lsls	r3, r3, #17
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d301      	bcc.n	80015d4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d0:	2301      	movs	r3, #1
 80015d2:	e010      	b.n	80015f6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d4:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <SysTick_Config+0x44>)
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	3a01      	subs	r2, #1
 80015da:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015dc:	2301      	movs	r3, #1
 80015de:	425b      	negs	r3, r3
 80015e0:	2103      	movs	r1, #3
 80015e2:	0018      	movs	r0, r3
 80015e4:	f7ff ff7c 	bl	80014e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <SysTick_Config+0x44>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ee:	4b04      	ldr	r3, [pc, #16]	; (8001600 <SysTick_Config+0x44>)
 80015f0:	2207      	movs	r2, #7
 80015f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	0018      	movs	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b002      	add	sp, #8
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	e000e010 	.word	0xe000e010

08001604 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	607a      	str	r2, [r7, #4]
 800160e:	210f      	movs	r1, #15
 8001610:	187b      	adds	r3, r7, r1
 8001612:	1c02      	adds	r2, r0, #0
 8001614:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	187b      	adds	r3, r7, r1
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b25b      	sxtb	r3, r3
 800161e:	0011      	movs	r1, r2
 8001620:	0018      	movs	r0, r3
 8001622:	f7ff ff5d 	bl	80014e0 <__NVIC_SetPriority>
}
 8001626:	46c0      	nop			; (mov r8, r8)
 8001628:	46bd      	mov	sp, r7
 800162a:	b004      	add	sp, #16
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	0018      	movs	r0, r3
 800163a:	f7ff ffbf 	bl	80015bc <SysTick_Config>
 800163e:	0003      	movs	r3, r0
}
 8001640:	0018      	movs	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	b002      	add	sp, #8
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800165e:	e143      	b.n	80018e8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2101      	movs	r1, #1
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	4091      	lsls	r1, r2
 800166a:	000a      	movs	r2, r1
 800166c:	4013      	ands	r3, r2
 800166e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d100      	bne.n	8001678 <HAL_GPIO_Init+0x30>
 8001676:	e134      	b.n	80018e2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d00b      	beq.n	8001698 <HAL_GPIO_Init+0x50>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b02      	cmp	r3, #2
 8001686:	d007      	beq.n	8001698 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800168c:	2b11      	cmp	r3, #17
 800168e:	d003      	beq.n	8001698 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b12      	cmp	r3, #18
 8001696:	d130      	bne.n	80016fa <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	2203      	movs	r2, #3
 80016a4:	409a      	lsls	r2, r3
 80016a6:	0013      	movs	r3, r2
 80016a8:	43da      	mvns	r2, r3
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	68da      	ldr	r2, [r3, #12]
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	409a      	lsls	r2, r3
 80016ba:	0013      	movs	r3, r2
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016ce:	2201      	movs	r2, #1
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	409a      	lsls	r2, r3
 80016d4:	0013      	movs	r3, r2
 80016d6:	43da      	mvns	r2, r3
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4013      	ands	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	091b      	lsrs	r3, r3, #4
 80016e4:	2201      	movs	r2, #1
 80016e6:	401a      	ands	r2, r3
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	409a      	lsls	r2, r3
 80016ec:	0013      	movs	r3, r2
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	2203      	movs	r2, #3
 8001706:	409a      	lsls	r2, r3
 8001708:	0013      	movs	r3, r2
 800170a:	43da      	mvns	r2, r3
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	409a      	lsls	r2, r3
 800171c:	0013      	movs	r3, r2
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d003      	beq.n	800173a <HAL_GPIO_Init+0xf2>
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b12      	cmp	r3, #18
 8001738:	d123      	bne.n	8001782 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	08da      	lsrs	r2, r3, #3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3208      	adds	r2, #8
 8001742:	0092      	lsls	r2, r2, #2
 8001744:	58d3      	ldr	r3, [r2, r3]
 8001746:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	2207      	movs	r2, #7
 800174c:	4013      	ands	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	220f      	movs	r2, #15
 8001752:	409a      	lsls	r2, r3
 8001754:	0013      	movs	r3, r2
 8001756:	43da      	mvns	r2, r3
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	4013      	ands	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	691a      	ldr	r2, [r3, #16]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	2107      	movs	r1, #7
 8001766:	400b      	ands	r3, r1
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	409a      	lsls	r2, r3
 800176c:	0013      	movs	r3, r2
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	08da      	lsrs	r2, r3, #3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3208      	adds	r2, #8
 800177c:	0092      	lsls	r2, r2, #2
 800177e:	6939      	ldr	r1, [r7, #16]
 8001780:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	2203      	movs	r2, #3
 800178e:	409a      	lsls	r2, r3
 8001790:	0013      	movs	r3, r2
 8001792:	43da      	mvns	r2, r3
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2203      	movs	r2, #3
 80017a0:	401a      	ands	r2, r3
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	409a      	lsls	r2, r3
 80017a8:	0013      	movs	r3, r2
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	055b      	lsls	r3, r3, #21
 80017be:	4013      	ands	r3, r2
 80017c0:	d100      	bne.n	80017c4 <HAL_GPIO_Init+0x17c>
 80017c2:	e08e      	b.n	80018e2 <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c4:	4b4e      	ldr	r3, [pc, #312]	; (8001900 <HAL_GPIO_Init+0x2b8>)
 80017c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017c8:	4b4d      	ldr	r3, [pc, #308]	; (8001900 <HAL_GPIO_Init+0x2b8>)
 80017ca:	2101      	movs	r1, #1
 80017cc:	430a      	orrs	r2, r1
 80017ce:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80017d0:	4a4c      	ldr	r2, [pc, #304]	; (8001904 <HAL_GPIO_Init+0x2bc>)
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	089b      	lsrs	r3, r3, #2
 80017d6:	3302      	adds	r3, #2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	589b      	ldr	r3, [r3, r2]
 80017dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	2203      	movs	r2, #3
 80017e2:	4013      	ands	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	220f      	movs	r2, #15
 80017e8:	409a      	lsls	r2, r3
 80017ea:	0013      	movs	r3, r2
 80017ec:	43da      	mvns	r2, r3
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	23a0      	movs	r3, #160	; 0xa0
 80017f8:	05db      	lsls	r3, r3, #23
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d00d      	beq.n	800181a <HAL_GPIO_Init+0x1d2>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a41      	ldr	r2, [pc, #260]	; (8001908 <HAL_GPIO_Init+0x2c0>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d007      	beq.n	8001816 <HAL_GPIO_Init+0x1ce>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a40      	ldr	r2, [pc, #256]	; (800190c <HAL_GPIO_Init+0x2c4>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d101      	bne.n	8001812 <HAL_GPIO_Init+0x1ca>
 800180e:	2302      	movs	r3, #2
 8001810:	e004      	b.n	800181c <HAL_GPIO_Init+0x1d4>
 8001812:	2306      	movs	r3, #6
 8001814:	e002      	b.n	800181c <HAL_GPIO_Init+0x1d4>
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <HAL_GPIO_Init+0x1d4>
 800181a:	2300      	movs	r3, #0
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	2103      	movs	r1, #3
 8001820:	400a      	ands	r2, r1
 8001822:	0092      	lsls	r2, r2, #2
 8001824:	4093      	lsls	r3, r2
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800182c:	4935      	ldr	r1, [pc, #212]	; (8001904 <HAL_GPIO_Init+0x2bc>)
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	089b      	lsrs	r3, r3, #2
 8001832:	3302      	adds	r3, #2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800183a:	4b35      	ldr	r3, [pc, #212]	; (8001910 <HAL_GPIO_Init+0x2c8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	43da      	mvns	r2, r3
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	4013      	ands	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	025b      	lsls	r3, r3, #9
 8001852:	4013      	ands	r3, r2
 8001854:	d003      	beq.n	800185e <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4313      	orrs	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800185e:	4b2c      	ldr	r3, [pc, #176]	; (8001910 <HAL_GPIO_Init+0x2c8>)
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001864:	4b2a      	ldr	r3, [pc, #168]	; (8001910 <HAL_GPIO_Init+0x2c8>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	43da      	mvns	r2, r3
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	029b      	lsls	r3, r3, #10
 800187c:	4013      	ands	r3, r2
 800187e:	d003      	beq.n	8001888 <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	4313      	orrs	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001888:	4b21      	ldr	r3, [pc, #132]	; (8001910 <HAL_GPIO_Init+0x2c8>)
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800188e:	4b20      	ldr	r3, [pc, #128]	; (8001910 <HAL_GPIO_Init+0x2c8>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	43da      	mvns	r2, r3
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	2380      	movs	r3, #128	; 0x80
 80018a4:	035b      	lsls	r3, r3, #13
 80018a6:	4013      	ands	r3, r2
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018b2:	4b17      	ldr	r3, [pc, #92]	; (8001910 <HAL_GPIO_Init+0x2c8>)
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80018b8:	4b15      	ldr	r3, [pc, #84]	; (8001910 <HAL_GPIO_Init+0x2c8>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	43da      	mvns	r2, r3
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	039b      	lsls	r3, r3, #14
 80018d0:	4013      	ands	r3, r2
 80018d2:	d003      	beq.n	80018dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <HAL_GPIO_Init+0x2c8>)
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	3301      	adds	r3, #1
 80018e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	40da      	lsrs	r2, r3
 80018f0:	1e13      	subs	r3, r2, #0
 80018f2:	d000      	beq.n	80018f6 <HAL_GPIO_Init+0x2ae>
 80018f4:	e6b4      	b.n	8001660 <HAL_GPIO_Init+0x18>
  }
}
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	46c0      	nop			; (mov r8, r8)
 80018fa:	46bd      	mov	sp, r7
 80018fc:	b006      	add	sp, #24
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40021000 	.word	0x40021000
 8001904:	40010000 	.word	0x40010000
 8001908:	50000400 	.word	0x50000400
 800190c:	50000800 	.word	0x50000800
 8001910:	40010400 	.word	0x40010400

08001914 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	0008      	movs	r0, r1
 800191e:	0011      	movs	r1, r2
 8001920:	1cbb      	adds	r3, r7, #2
 8001922:	1c02      	adds	r2, r0, #0
 8001924:	801a      	strh	r2, [r3, #0]
 8001926:	1c7b      	adds	r3, r7, #1
 8001928:	1c0a      	adds	r2, r1, #0
 800192a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800192c:	1c7b      	adds	r3, r7, #1
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d004      	beq.n	800193e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001934:	1cbb      	adds	r3, r7, #2
 8001936:	881a      	ldrh	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800193c:	e003      	b.n	8001946 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800193e:	1cbb      	adds	r3, r7, #2
 8001940:	881a      	ldrh	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	46bd      	mov	sp, r7
 800194a:	b002      	add	sp, #8
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b084      	sub	sp, #16
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	000a      	movs	r2, r1
 8001958:	1cbb      	adds	r3, r7, #2
 800195a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001962:	1cbb      	adds	r3, r7, #2
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	4013      	ands	r3, r2
 800196a:	041a      	lsls	r2, r3, #16
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	43db      	mvns	r3, r3
 8001970:	1cb9      	adds	r1, r7, #2
 8001972:	8809      	ldrh	r1, [r1, #0]
 8001974:	400b      	ands	r3, r1
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	619a      	str	r2, [r3, #24]
}
 800197c:	46c0      	nop			; (mov r8, r8)
 800197e:	46bd      	mov	sp, r7
 8001980:	b004      	add	sp, #16
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001984:	b5b0      	push	{r4, r5, r7, lr}
 8001986:	b08a      	sub	sp, #40	; 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d102      	bne.n	8001998 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	f000 fb6c 	bl	8002070 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001998:	4bc8      	ldr	r3, [pc, #800]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	220c      	movs	r2, #12
 800199e:	4013      	ands	r3, r2
 80019a0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019a2:	4bc6      	ldr	r3, [pc, #792]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	025b      	lsls	r3, r3, #9
 80019aa:	4013      	ands	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2201      	movs	r2, #1
 80019b4:	4013      	ands	r3, r2
 80019b6:	d100      	bne.n	80019ba <HAL_RCC_OscConfig+0x36>
 80019b8:	e07d      	b.n	8001ab6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d007      	beq.n	80019d0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	2b0c      	cmp	r3, #12
 80019c4:	d112      	bne.n	80019ec <HAL_RCC_OscConfig+0x68>
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	025b      	lsls	r3, r3, #9
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d10d      	bne.n	80019ec <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d0:	4bba      	ldr	r3, [pc, #744]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	029b      	lsls	r3, r3, #10
 80019d8:	4013      	ands	r3, r2
 80019da:	d100      	bne.n	80019de <HAL_RCC_OscConfig+0x5a>
 80019dc:	e06a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x130>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d166      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	f000 fb42 	bl	8002070 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	025b      	lsls	r3, r3, #9
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d107      	bne.n	8001a08 <HAL_RCC_OscConfig+0x84>
 80019f8:	4bb0      	ldr	r3, [pc, #704]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4baf      	ldr	r3, [pc, #700]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 80019fe:	2180      	movs	r1, #128	; 0x80
 8001a00:	0249      	lsls	r1, r1, #9
 8001a02:	430a      	orrs	r2, r1
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	e027      	b.n	8001a58 <HAL_RCC_OscConfig+0xd4>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	23a0      	movs	r3, #160	; 0xa0
 8001a0e:	02db      	lsls	r3, r3, #11
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d10e      	bne.n	8001a32 <HAL_RCC_OscConfig+0xae>
 8001a14:	4ba9      	ldr	r3, [pc, #676]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4ba8      	ldr	r3, [pc, #672]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001a1a:	2180      	movs	r1, #128	; 0x80
 8001a1c:	02c9      	lsls	r1, r1, #11
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	4ba6      	ldr	r3, [pc, #664]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	4ba5      	ldr	r3, [pc, #660]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001a28:	2180      	movs	r1, #128	; 0x80
 8001a2a:	0249      	lsls	r1, r1, #9
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	e012      	b.n	8001a58 <HAL_RCC_OscConfig+0xd4>
 8001a32:	4ba2      	ldr	r3, [pc, #648]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	4ba1      	ldr	r3, [pc, #644]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001a38:	49a1      	ldr	r1, [pc, #644]	; (8001cc0 <HAL_RCC_OscConfig+0x33c>)
 8001a3a:	400a      	ands	r2, r1
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	4b9f      	ldr	r3, [pc, #636]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	2380      	movs	r3, #128	; 0x80
 8001a44:	025b      	lsls	r3, r3, #9
 8001a46:	4013      	ands	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	4b9b      	ldr	r3, [pc, #620]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4b9a      	ldr	r3, [pc, #616]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001a52:	499c      	ldr	r1, [pc, #624]	; (8001cc4 <HAL_RCC_OscConfig+0x340>)
 8001a54:	400a      	ands	r2, r1
 8001a56:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d014      	beq.n	8001a8a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7ff fd10 	bl	8001484 <HAL_GetTick>
 8001a64:	0003      	movs	r3, r0
 8001a66:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a6a:	f7ff fd0b 	bl	8001484 <HAL_GetTick>
 8001a6e:	0002      	movs	r2, r0
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b64      	cmp	r3, #100	; 0x64
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e2f9      	b.n	8002070 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a7c:	4b8f      	ldr	r3, [pc, #572]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	029b      	lsls	r3, r3, #10
 8001a84:	4013      	ands	r3, r2
 8001a86:	d0f0      	beq.n	8001a6a <HAL_RCC_OscConfig+0xe6>
 8001a88:	e015      	b.n	8001ab6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8a:	f7ff fcfb 	bl	8001484 <HAL_GetTick>
 8001a8e:	0003      	movs	r3, r0
 8001a90:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a94:	f7ff fcf6 	bl	8001484 <HAL_GetTick>
 8001a98:	0002      	movs	r2, r0
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b64      	cmp	r3, #100	; 0x64
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e2e4      	b.n	8002070 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001aa6:	4b85      	ldr	r3, [pc, #532]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	2380      	movs	r3, #128	; 0x80
 8001aac:	029b      	lsls	r3, r3, #10
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x110>
 8001ab2:	e000      	b.n	8001ab6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2202      	movs	r2, #2
 8001abc:	4013      	ands	r3, r2
 8001abe:	d100      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x13e>
 8001ac0:	e099      	b.n	8001bf6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	2220      	movs	r2, #32
 8001acc:	4013      	ands	r3, r2
 8001ace:	d009      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001ad0:	4b7a      	ldr	r3, [pc, #488]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b79      	ldr	r3, [pc, #484]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001ad6:	2120      	movs	r1, #32
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	2220      	movs	r2, #32
 8001ae0:	4393      	bics	r3, r2
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d005      	beq.n	8001af6 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	2b0c      	cmp	r3, #12
 8001aee:	d13e      	bne.n	8001b6e <HAL_RCC_OscConfig+0x1ea>
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d13b      	bne.n	8001b6e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001af6:	4b71      	ldr	r3, [pc, #452]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2204      	movs	r2, #4
 8001afc:	4013      	ands	r3, r2
 8001afe:	d004      	beq.n	8001b0a <HAL_RCC_OscConfig+0x186>
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e2b2      	b.n	8002070 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0a:	4b6c      	ldr	r3, [pc, #432]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	4a6e      	ldr	r2, [pc, #440]	; (8001cc8 <HAL_RCC_OscConfig+0x344>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	0019      	movs	r1, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	021a      	lsls	r2, r3, #8
 8001b1a:	4b68      	ldr	r3, [pc, #416]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001b20:	4b66      	ldr	r3, [pc, #408]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2209      	movs	r2, #9
 8001b26:	4393      	bics	r3, r2
 8001b28:	0019      	movs	r1, r3
 8001b2a:	4b64      	ldr	r3, [pc, #400]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b32:	f000 fbeb 	bl	800230c <HAL_RCC_GetSysClockFreq>
 8001b36:	0001      	movs	r1, r0
 8001b38:	4b60      	ldr	r3, [pc, #384]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	091b      	lsrs	r3, r3, #4
 8001b3e:	220f      	movs	r2, #15
 8001b40:	4013      	ands	r3, r2
 8001b42:	4a62      	ldr	r2, [pc, #392]	; (8001ccc <HAL_RCC_OscConfig+0x348>)
 8001b44:	5cd3      	ldrb	r3, [r2, r3]
 8001b46:	000a      	movs	r2, r1
 8001b48:	40da      	lsrs	r2, r3
 8001b4a:	4b61      	ldr	r3, [pc, #388]	; (8001cd0 <HAL_RCC_OscConfig+0x34c>)
 8001b4c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001b4e:	4b61      	ldr	r3, [pc, #388]	; (8001cd4 <HAL_RCC_OscConfig+0x350>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2513      	movs	r5, #19
 8001b54:	197c      	adds	r4, r7, r5
 8001b56:	0018      	movs	r0, r3
 8001b58:	f7ff fc4e 	bl	80013f8 <HAL_InitTick>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001b60:	197b      	adds	r3, r7, r5
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d046      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001b68:	197b      	adds	r3, r7, r5
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	e280      	b.n	8002070 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d027      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001b74:	4b51      	ldr	r3, [pc, #324]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2209      	movs	r2, #9
 8001b7a:	4393      	bics	r3, r2
 8001b7c:	0019      	movs	r1, r3
 8001b7e:	4b4f      	ldr	r3, [pc, #316]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b82:	430a      	orrs	r2, r1
 8001b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b86:	f7ff fc7d 	bl	8001484 <HAL_GetTick>
 8001b8a:	0003      	movs	r3, r0
 8001b8c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b90:	f7ff fc78 	bl	8001484 <HAL_GetTick>
 8001b94:	0002      	movs	r2, r0
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e266      	b.n	8002070 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ba2:	4b46      	ldr	r3, [pc, #280]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2204      	movs	r2, #4
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d0f1      	beq.n	8001b90 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bac:	4b43      	ldr	r3, [pc, #268]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	4a45      	ldr	r2, [pc, #276]	; (8001cc8 <HAL_RCC_OscConfig+0x344>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	0019      	movs	r1, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	021a      	lsls	r2, r3, #8
 8001bbc:	4b3f      	ldr	r3, [pc, #252]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	e018      	b.n	8001bf6 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bc4:	4b3d      	ldr	r3, [pc, #244]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b3c      	ldr	r3, [pc, #240]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001bca:	2101      	movs	r1, #1
 8001bcc:	438a      	bics	r2, r1
 8001bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd0:	f7ff fc58 	bl	8001484 <HAL_GetTick>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bda:	f7ff fc53 	bl	8001484 <HAL_GetTick>
 8001bde:	0002      	movs	r2, r0
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e241      	b.n	8002070 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bec:	4b33      	ldr	r3, [pc, #204]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2204      	movs	r2, #4
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d1f1      	bne.n	8001bda <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2210      	movs	r2, #16
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d100      	bne.n	8001c02 <HAL_RCC_OscConfig+0x27e>
 8001c00:	e0a1      	b.n	8001d46 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d140      	bne.n	8001c8a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c08:	4b2c      	ldr	r3, [pc, #176]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4013      	ands	r3, r2
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_OscConfig+0x29c>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e227      	b.n	8002070 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c20:	4b26      	ldr	r3, [pc, #152]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	4a2c      	ldr	r2, [pc, #176]	; (8001cd8 <HAL_RCC_OscConfig+0x354>)
 8001c26:	4013      	ands	r3, r2
 8001c28:	0019      	movs	r1, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a1a      	ldr	r2, [r3, #32]
 8001c2e:	4b23      	ldr	r3, [pc, #140]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001c30:	430a      	orrs	r2, r1
 8001c32:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c34:	4b21      	ldr	r3, [pc, #132]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	021b      	lsls	r3, r3, #8
 8001c3a:	0a19      	lsrs	r1, r3, #8
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	061a      	lsls	r2, r3, #24
 8001c42:	4b1e      	ldr	r3, [pc, #120]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001c44:	430a      	orrs	r2, r1
 8001c46:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	0b5b      	lsrs	r3, r3, #13
 8001c4e:	3301      	adds	r3, #1
 8001c50:	2280      	movs	r2, #128	; 0x80
 8001c52:	0212      	lsls	r2, r2, #8
 8001c54:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001c56:	4b19      	ldr	r3, [pc, #100]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	091b      	lsrs	r3, r3, #4
 8001c5c:	210f      	movs	r1, #15
 8001c5e:	400b      	ands	r3, r1
 8001c60:	491a      	ldr	r1, [pc, #104]	; (8001ccc <HAL_RCC_OscConfig+0x348>)
 8001c62:	5ccb      	ldrb	r3, [r1, r3]
 8001c64:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c66:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <HAL_RCC_OscConfig+0x34c>)
 8001c68:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001c6a:	4b1a      	ldr	r3, [pc, #104]	; (8001cd4 <HAL_RCC_OscConfig+0x350>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2513      	movs	r5, #19
 8001c70:	197c      	adds	r4, r7, r5
 8001c72:	0018      	movs	r0, r3
 8001c74:	f7ff fbc0 	bl	80013f8 <HAL_InitTick>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001c7c:	197b      	adds	r3, r7, r5
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d060      	beq.n	8001d46 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001c84:	197b      	adds	r3, r7, r5
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	e1f2      	b.n	8002070 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d03f      	beq.n	8001d12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c92:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <HAL_RCC_OscConfig+0x338>)
 8001c98:	2180      	movs	r1, #128	; 0x80
 8001c9a:	0049      	lsls	r1, r1, #1
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fbf0 	bl	8001484 <HAL_GetTick>
 8001ca4:	0003      	movs	r3, r0
 8001ca6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ca8:	e018      	b.n	8001cdc <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001caa:	f7ff fbeb 	bl	8001484 <HAL_GetTick>
 8001cae:	0002      	movs	r2, r0
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d911      	bls.n	8001cdc <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e1d9      	b.n	8002070 <HAL_RCC_OscConfig+0x6ec>
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	fffeffff 	.word	0xfffeffff
 8001cc4:	fffbffff 	.word	0xfffbffff
 8001cc8:	ffffe0ff 	.word	0xffffe0ff
 8001ccc:	080030e4 	.word	0x080030e4
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	20000004 	.word	0x20000004
 8001cd8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001cdc:	4bc9      	ldr	r3, [pc, #804]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d0e0      	beq.n	8001caa <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ce8:	4bc6      	ldr	r3, [pc, #792]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	4ac6      	ldr	r2, [pc, #792]	; (8002008 <HAL_RCC_OscConfig+0x684>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	0019      	movs	r1, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a1a      	ldr	r2, [r3, #32]
 8001cf6:	4bc3      	ldr	r3, [pc, #780]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cfc:	4bc1      	ldr	r3, [pc, #772]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	021b      	lsls	r3, r3, #8
 8001d02:	0a19      	lsrs	r1, r3, #8
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	061a      	lsls	r2, r3, #24
 8001d0a:	4bbe      	ldr	r3, [pc, #760]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	605a      	str	r2, [r3, #4]
 8001d10:	e019      	b.n	8001d46 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d12:	4bbc      	ldr	r3, [pc, #752]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	4bbb      	ldr	r3, [pc, #748]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001d18:	49bc      	ldr	r1, [pc, #752]	; (800200c <HAL_RCC_OscConfig+0x688>)
 8001d1a:	400a      	ands	r2, r1
 8001d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1e:	f7ff fbb1 	bl	8001484 <HAL_GetTick>
 8001d22:	0003      	movs	r3, r0
 8001d24:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d28:	f7ff fbac 	bl	8001484 <HAL_GetTick>
 8001d2c:	0002      	movs	r2, r0
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e19a      	b.n	8002070 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001d3a:	4bb2      	ldr	r3, [pc, #712]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4013      	ands	r3, r2
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2208      	movs	r2, #8
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d036      	beq.n	8001dbe <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d019      	beq.n	8001d8c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d58:	4baa      	ldr	r3, [pc, #680]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001d5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d5c:	4ba9      	ldr	r3, [pc, #676]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001d5e:	2101      	movs	r1, #1
 8001d60:	430a      	orrs	r2, r1
 8001d62:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d64:	f7ff fb8e 	bl	8001484 <HAL_GetTick>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d6e:	f7ff fb89 	bl	8001484 <HAL_GetTick>
 8001d72:	0002      	movs	r2, r0
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e177      	b.n	8002070 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d80:	4ba0      	ldr	r3, [pc, #640]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d84:	2202      	movs	r2, #2
 8001d86:	4013      	ands	r3, r2
 8001d88:	d0f1      	beq.n	8001d6e <HAL_RCC_OscConfig+0x3ea>
 8001d8a:	e018      	b.n	8001dbe <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d8c:	4b9d      	ldr	r3, [pc, #628]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001d8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d90:	4b9c      	ldr	r3, [pc, #624]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001d92:	2101      	movs	r1, #1
 8001d94:	438a      	bics	r2, r1
 8001d96:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d98:	f7ff fb74 	bl	8001484 <HAL_GetTick>
 8001d9c:	0003      	movs	r3, r0
 8001d9e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001da2:	f7ff fb6f 	bl	8001484 <HAL_GetTick>
 8001da6:	0002      	movs	r2, r0
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e15d      	b.n	8002070 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001db4:	4b93      	ldr	r3, [pc, #588]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001db8:	2202      	movs	r2, #2
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d1f1      	bne.n	8001da2 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2204      	movs	r2, #4
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d100      	bne.n	8001dca <HAL_RCC_OscConfig+0x446>
 8001dc8:	e0ae      	b.n	8001f28 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dca:	2023      	movs	r0, #35	; 0x23
 8001dcc:	183b      	adds	r3, r7, r0
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd2:	4b8c      	ldr	r3, [pc, #560]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	055b      	lsls	r3, r3, #21
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d109      	bne.n	8001df2 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dde:	4b89      	ldr	r3, [pc, #548]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001de2:	4b88      	ldr	r3, [pc, #544]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001de4:	2180      	movs	r1, #128	; 0x80
 8001de6:	0549      	lsls	r1, r1, #21
 8001de8:	430a      	orrs	r2, r1
 8001dea:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001dec:	183b      	adds	r3, r7, r0
 8001dee:	2201      	movs	r2, #1
 8001df0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df2:	4b87      	ldr	r3, [pc, #540]	; (8002010 <HAL_RCC_OscConfig+0x68c>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d11a      	bne.n	8001e34 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dfe:	4b84      	ldr	r3, [pc, #528]	; (8002010 <HAL_RCC_OscConfig+0x68c>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	4b83      	ldr	r3, [pc, #524]	; (8002010 <HAL_RCC_OscConfig+0x68c>)
 8001e04:	2180      	movs	r1, #128	; 0x80
 8001e06:	0049      	lsls	r1, r1, #1
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e0c:	f7ff fb3a 	bl	8001484 <HAL_GetTick>
 8001e10:	0003      	movs	r3, r0
 8001e12:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e16:	f7ff fb35 	bl	8001484 <HAL_GetTick>
 8001e1a:	0002      	movs	r2, r0
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b64      	cmp	r3, #100	; 0x64
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e123      	b.n	8002070 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e28:	4b79      	ldr	r3, [pc, #484]	; (8002010 <HAL_RCC_OscConfig+0x68c>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	4013      	ands	r3, r2
 8001e32:	d0f0      	beq.n	8001e16 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	2380      	movs	r3, #128	; 0x80
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d107      	bne.n	8001e50 <HAL_RCC_OscConfig+0x4cc>
 8001e40:	4b70      	ldr	r3, [pc, #448]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001e42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e44:	4b6f      	ldr	r3, [pc, #444]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001e46:	2180      	movs	r1, #128	; 0x80
 8001e48:	0049      	lsls	r1, r1, #1
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	651a      	str	r2, [r3, #80]	; 0x50
 8001e4e:	e031      	b.n	8001eb4 <HAL_RCC_OscConfig+0x530>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10c      	bne.n	8001e72 <HAL_RCC_OscConfig+0x4ee>
 8001e58:	4b6a      	ldr	r3, [pc, #424]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001e5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e5c:	4b69      	ldr	r3, [pc, #420]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001e5e:	496b      	ldr	r1, [pc, #428]	; (800200c <HAL_RCC_OscConfig+0x688>)
 8001e60:	400a      	ands	r2, r1
 8001e62:	651a      	str	r2, [r3, #80]	; 0x50
 8001e64:	4b67      	ldr	r3, [pc, #412]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001e66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e68:	4b66      	ldr	r3, [pc, #408]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001e6a:	496a      	ldr	r1, [pc, #424]	; (8002014 <HAL_RCC_OscConfig+0x690>)
 8001e6c:	400a      	ands	r2, r1
 8001e6e:	651a      	str	r2, [r3, #80]	; 0x50
 8001e70:	e020      	b.n	8001eb4 <HAL_RCC_OscConfig+0x530>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	23a0      	movs	r3, #160	; 0xa0
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d10e      	bne.n	8001e9c <HAL_RCC_OscConfig+0x518>
 8001e7e:	4b61      	ldr	r3, [pc, #388]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001e80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e82:	4b60      	ldr	r3, [pc, #384]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001e84:	2180      	movs	r1, #128	; 0x80
 8001e86:	00c9      	lsls	r1, r1, #3
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	651a      	str	r2, [r3, #80]	; 0x50
 8001e8c:	4b5d      	ldr	r3, [pc, #372]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001e8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e90:	4b5c      	ldr	r3, [pc, #368]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001e92:	2180      	movs	r1, #128	; 0x80
 8001e94:	0049      	lsls	r1, r1, #1
 8001e96:	430a      	orrs	r2, r1
 8001e98:	651a      	str	r2, [r3, #80]	; 0x50
 8001e9a:	e00b      	b.n	8001eb4 <HAL_RCC_OscConfig+0x530>
 8001e9c:	4b59      	ldr	r3, [pc, #356]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001e9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ea0:	4b58      	ldr	r3, [pc, #352]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001ea2:	495a      	ldr	r1, [pc, #360]	; (800200c <HAL_RCC_OscConfig+0x688>)
 8001ea4:	400a      	ands	r2, r1
 8001ea6:	651a      	str	r2, [r3, #80]	; 0x50
 8001ea8:	4b56      	ldr	r3, [pc, #344]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001eaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eac:	4b55      	ldr	r3, [pc, #340]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001eae:	4959      	ldr	r1, [pc, #356]	; (8002014 <HAL_RCC_OscConfig+0x690>)
 8001eb0:	400a      	ands	r2, r1
 8001eb2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d015      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ebc:	f7ff fae2 	bl	8001484 <HAL_GetTick>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ec4:	e009      	b.n	8001eda <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ec6:	f7ff fadd 	bl	8001484 <HAL_GetTick>
 8001eca:	0002      	movs	r2, r0
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	4a51      	ldr	r2, [pc, #324]	; (8002018 <HAL_RCC_OscConfig+0x694>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e0ca      	b.n	8002070 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001eda:	4b4a      	ldr	r3, [pc, #296]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001edc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d0ef      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x542>
 8001ee6:	e014      	b.n	8001f12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee8:	f7ff facc 	bl	8001484 <HAL_GetTick>
 8001eec:	0003      	movs	r3, r0
 8001eee:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ef0:	e009      	b.n	8001f06 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ef2:	f7ff fac7 	bl	8001484 <HAL_GetTick>
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	4a46      	ldr	r2, [pc, #280]	; (8002018 <HAL_RCC_OscConfig+0x694>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e0b4      	b.n	8002070 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f06:	4b3f      	ldr	r3, [pc, #252]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001f08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f0a:	2380      	movs	r3, #128	; 0x80
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d1ef      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f12:	2323      	movs	r3, #35	; 0x23
 8001f14:	18fb      	adds	r3, r7, r3
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d105      	bne.n	8001f28 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f1c:	4b39      	ldr	r3, [pc, #228]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001f1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f20:	4b38      	ldr	r3, [pc, #224]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001f22:	493e      	ldr	r1, [pc, #248]	; (800201c <HAL_RCC_OscConfig+0x698>)
 8001f24:	400a      	ands	r2, r1
 8001f26:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d100      	bne.n	8001f32 <HAL_RCC_OscConfig+0x5ae>
 8001f30:	e09d      	b.n	800206e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	2b0c      	cmp	r3, #12
 8001f36:	d100      	bne.n	8001f3a <HAL_RCC_OscConfig+0x5b6>
 8001f38:	e076      	b.n	8002028 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d145      	bne.n	8001fce <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f42:	4b30      	ldr	r3, [pc, #192]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	4b2f      	ldr	r3, [pc, #188]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001f48:	4935      	ldr	r1, [pc, #212]	; (8002020 <HAL_RCC_OscConfig+0x69c>)
 8001f4a:	400a      	ands	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4e:	f7ff fa99 	bl	8001484 <HAL_GetTick>
 8001f52:	0003      	movs	r3, r0
 8001f54:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f58:	f7ff fa94 	bl	8001484 <HAL_GetTick>
 8001f5c:	0002      	movs	r2, r0
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e082      	b.n	8002070 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f6a:	4b26      	ldr	r3, [pc, #152]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	2380      	movs	r3, #128	; 0x80
 8001f70:	049b      	lsls	r3, r3, #18
 8001f72:	4013      	ands	r3, r2
 8001f74:	d1f0      	bne.n	8001f58 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f76:	4b23      	ldr	r3, [pc, #140]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	4a2a      	ldr	r2, [pc, #168]	; (8002024 <HAL_RCC_OscConfig+0x6a0>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	0019      	movs	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	4b1c      	ldr	r3, [pc, #112]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001f92:	430a      	orrs	r2, r1
 8001f94:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f96:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001f9c:	2180      	movs	r1, #128	; 0x80
 8001f9e:	0449      	lsls	r1, r1, #17
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa4:	f7ff fa6e 	bl	8001484 <HAL_GetTick>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fae:	f7ff fa69 	bl	8001484 <HAL_GetTick>
 8001fb2:	0002      	movs	r2, r0
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e057      	b.n	8002070 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001fc0:	4b10      	ldr	r3, [pc, #64]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	2380      	movs	r3, #128	; 0x80
 8001fc6:	049b      	lsls	r3, r3, #18
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x62a>
 8001fcc:	e04f      	b.n	800206e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fce:	4b0d      	ldr	r3, [pc, #52]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001fd4:	4912      	ldr	r1, [pc, #72]	; (8002020 <HAL_RCC_OscConfig+0x69c>)
 8001fd6:	400a      	ands	r2, r1
 8001fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fda:	f7ff fa53 	bl	8001484 <HAL_GetTick>
 8001fde:	0003      	movs	r3, r0
 8001fe0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe4:	f7ff fa4e 	bl	8001484 <HAL_GetTick>
 8001fe8:	0002      	movs	r2, r0
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e03c      	b.n	8002070 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ff6:	4b03      	ldr	r3, [pc, #12]	; (8002004 <HAL_RCC_OscConfig+0x680>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	049b      	lsls	r3, r3, #18
 8001ffe:	4013      	ands	r3, r2
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x660>
 8002002:	e034      	b.n	800206e <HAL_RCC_OscConfig+0x6ea>
 8002004:	40021000 	.word	0x40021000
 8002008:	ffff1fff 	.word	0xffff1fff
 800200c:	fffffeff 	.word	0xfffffeff
 8002010:	40007000 	.word	0x40007000
 8002014:	fffffbff 	.word	0xfffffbff
 8002018:	00001388 	.word	0x00001388
 800201c:	efffffff 	.word	0xefffffff
 8002020:	feffffff 	.word	0xfeffffff
 8002024:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	2b01      	cmp	r3, #1
 800202e:	d101      	bne.n	8002034 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e01d      	b.n	8002070 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002034:	4b10      	ldr	r3, [pc, #64]	; (8002078 <HAL_RCC_OscConfig+0x6f4>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	025b      	lsls	r3, r3, #9
 8002040:	401a      	ands	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002046:	429a      	cmp	r2, r3
 8002048:	d10f      	bne.n	800206a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	23f0      	movs	r3, #240	; 0xf0
 800204e:	039b      	lsls	r3, r3, #14
 8002050:	401a      	ands	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002056:	429a      	cmp	r2, r3
 8002058:	d107      	bne.n	800206a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	23c0      	movs	r3, #192	; 0xc0
 800205e:	041b      	lsls	r3, r3, #16
 8002060:	401a      	ands	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002066:	429a      	cmp	r2, r3
 8002068:	d001      	beq.n	800206e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	0018      	movs	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	b00a      	add	sp, #40	; 0x28
 8002076:	bdb0      	pop	{r4, r5, r7, pc}
 8002078:	40021000 	.word	0x40021000

0800207c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800207c:	b5b0      	push	{r4, r5, r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e128      	b.n	80022e2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002090:	4b96      	ldr	r3, [pc, #600]	; (80022ec <HAL_RCC_ClockConfig+0x270>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2201      	movs	r2, #1
 8002096:	4013      	ands	r3, r2
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d91e      	bls.n	80020dc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b93      	ldr	r3, [pc, #588]	; (80022ec <HAL_RCC_ClockConfig+0x270>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2201      	movs	r2, #1
 80020a4:	4393      	bics	r3, r2
 80020a6:	0019      	movs	r1, r3
 80020a8:	4b90      	ldr	r3, [pc, #576]	; (80022ec <HAL_RCC_ClockConfig+0x270>)
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020b0:	f7ff f9e8 	bl	8001484 <HAL_GetTick>
 80020b4:	0003      	movs	r3, r0
 80020b6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b8:	e009      	b.n	80020ce <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ba:	f7ff f9e3 	bl	8001484 <HAL_GetTick>
 80020be:	0002      	movs	r2, r0
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	4a8a      	ldr	r2, [pc, #552]	; (80022f0 <HAL_RCC_ClockConfig+0x274>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e109      	b.n	80022e2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ce:	4b87      	ldr	r3, [pc, #540]	; (80022ec <HAL_RCC_ClockConfig+0x270>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2201      	movs	r2, #1
 80020d4:	4013      	ands	r3, r2
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d1ee      	bne.n	80020ba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2202      	movs	r2, #2
 80020e2:	4013      	ands	r3, r2
 80020e4:	d009      	beq.n	80020fa <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e6:	4b83      	ldr	r3, [pc, #524]	; (80022f4 <HAL_RCC_ClockConfig+0x278>)
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	22f0      	movs	r2, #240	; 0xf0
 80020ec:	4393      	bics	r3, r2
 80020ee:	0019      	movs	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	4b7f      	ldr	r3, [pc, #508]	; (80022f4 <HAL_RCC_ClockConfig+0x278>)
 80020f6:	430a      	orrs	r2, r1
 80020f8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2201      	movs	r2, #1
 8002100:	4013      	ands	r3, r2
 8002102:	d100      	bne.n	8002106 <HAL_RCC_ClockConfig+0x8a>
 8002104:	e089      	b.n	800221a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d107      	bne.n	800211e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800210e:	4b79      	ldr	r3, [pc, #484]	; (80022f4 <HAL_RCC_ClockConfig+0x278>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	2380      	movs	r3, #128	; 0x80
 8002114:	029b      	lsls	r3, r3, #10
 8002116:	4013      	ands	r3, r2
 8002118:	d120      	bne.n	800215c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e0e1      	b.n	80022e2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b03      	cmp	r3, #3
 8002124:	d107      	bne.n	8002136 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002126:	4b73      	ldr	r3, [pc, #460]	; (80022f4 <HAL_RCC_ClockConfig+0x278>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	049b      	lsls	r3, r3, #18
 800212e:	4013      	ands	r3, r2
 8002130:	d114      	bne.n	800215c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e0d5      	b.n	80022e2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d106      	bne.n	800214c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800213e:	4b6d      	ldr	r3, [pc, #436]	; (80022f4 <HAL_RCC_ClockConfig+0x278>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2204      	movs	r2, #4
 8002144:	4013      	ands	r3, r2
 8002146:	d109      	bne.n	800215c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0ca      	b.n	80022e2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800214c:	4b69      	ldr	r3, [pc, #420]	; (80022f4 <HAL_RCC_ClockConfig+0x278>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4013      	ands	r3, r2
 8002156:	d101      	bne.n	800215c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0c2      	b.n	80022e2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800215c:	4b65      	ldr	r3, [pc, #404]	; (80022f4 <HAL_RCC_ClockConfig+0x278>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	2203      	movs	r2, #3
 8002162:	4393      	bics	r3, r2
 8002164:	0019      	movs	r1, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	4b62      	ldr	r3, [pc, #392]	; (80022f4 <HAL_RCC_ClockConfig+0x278>)
 800216c:	430a      	orrs	r2, r1
 800216e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002170:	f7ff f988 	bl	8001484 <HAL_GetTick>
 8002174:	0003      	movs	r3, r0
 8002176:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b02      	cmp	r3, #2
 800217e:	d111      	bne.n	80021a4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002180:	e009      	b.n	8002196 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002182:	f7ff f97f 	bl	8001484 <HAL_GetTick>
 8002186:	0002      	movs	r2, r0
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	4a58      	ldr	r2, [pc, #352]	; (80022f0 <HAL_RCC_ClockConfig+0x274>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e0a5      	b.n	80022e2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002196:	4b57      	ldr	r3, [pc, #348]	; (80022f4 <HAL_RCC_ClockConfig+0x278>)
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	220c      	movs	r2, #12
 800219c:	4013      	ands	r3, r2
 800219e:	2b08      	cmp	r3, #8
 80021a0:	d1ef      	bne.n	8002182 <HAL_RCC_ClockConfig+0x106>
 80021a2:	e03a      	b.n	800221a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d111      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021ac:	e009      	b.n	80021c2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ae:	f7ff f969 	bl	8001484 <HAL_GetTick>
 80021b2:	0002      	movs	r2, r0
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	4a4d      	ldr	r2, [pc, #308]	; (80022f0 <HAL_RCC_ClockConfig+0x274>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e08f      	b.n	80022e2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021c2:	4b4c      	ldr	r3, [pc, #304]	; (80022f4 <HAL_RCC_ClockConfig+0x278>)
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	220c      	movs	r2, #12
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b0c      	cmp	r3, #12
 80021cc:	d1ef      	bne.n	80021ae <HAL_RCC_ClockConfig+0x132>
 80021ce:	e024      	b.n	800221a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d11b      	bne.n	8002210 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021d8:	e009      	b.n	80021ee <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021da:	f7ff f953 	bl	8001484 <HAL_GetTick>
 80021de:	0002      	movs	r2, r0
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	4a42      	ldr	r2, [pc, #264]	; (80022f0 <HAL_RCC_ClockConfig+0x274>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e079      	b.n	80022e2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ee:	4b41      	ldr	r3, [pc, #260]	; (80022f4 <HAL_RCC_ClockConfig+0x278>)
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	220c      	movs	r2, #12
 80021f4:	4013      	ands	r3, r2
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d1ef      	bne.n	80021da <HAL_RCC_ClockConfig+0x15e>
 80021fa:	e00e      	b.n	800221a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021fc:	f7ff f942 	bl	8001484 <HAL_GetTick>
 8002200:	0002      	movs	r2, r0
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	4a3a      	ldr	r2, [pc, #232]	; (80022f0 <HAL_RCC_ClockConfig+0x274>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e068      	b.n	80022e2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002210:	4b38      	ldr	r3, [pc, #224]	; (80022f4 <HAL_RCC_ClockConfig+0x278>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	220c      	movs	r2, #12
 8002216:	4013      	ands	r3, r2
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800221a:	4b34      	ldr	r3, [pc, #208]	; (80022ec <HAL_RCC_ClockConfig+0x270>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2201      	movs	r2, #1
 8002220:	4013      	ands	r3, r2
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d21e      	bcs.n	8002266 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002228:	4b30      	ldr	r3, [pc, #192]	; (80022ec <HAL_RCC_ClockConfig+0x270>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2201      	movs	r2, #1
 800222e:	4393      	bics	r3, r2
 8002230:	0019      	movs	r1, r3
 8002232:	4b2e      	ldr	r3, [pc, #184]	; (80022ec <HAL_RCC_ClockConfig+0x270>)
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800223a:	f7ff f923 	bl	8001484 <HAL_GetTick>
 800223e:	0003      	movs	r3, r0
 8002240:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002242:	e009      	b.n	8002258 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002244:	f7ff f91e 	bl	8001484 <HAL_GetTick>
 8002248:	0002      	movs	r2, r0
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	4a28      	ldr	r2, [pc, #160]	; (80022f0 <HAL_RCC_ClockConfig+0x274>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e044      	b.n	80022e2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002258:	4b24      	ldr	r3, [pc, #144]	; (80022ec <HAL_RCC_ClockConfig+0x270>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2201      	movs	r2, #1
 800225e:	4013      	ands	r3, r2
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d1ee      	bne.n	8002244 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2204      	movs	r2, #4
 800226c:	4013      	ands	r3, r2
 800226e:	d009      	beq.n	8002284 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002270:	4b20      	ldr	r3, [pc, #128]	; (80022f4 <HAL_RCC_ClockConfig+0x278>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	4a20      	ldr	r2, [pc, #128]	; (80022f8 <HAL_RCC_ClockConfig+0x27c>)
 8002276:	4013      	ands	r3, r2
 8002278:	0019      	movs	r1, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <HAL_RCC_ClockConfig+0x278>)
 8002280:	430a      	orrs	r2, r1
 8002282:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2208      	movs	r2, #8
 800228a:	4013      	ands	r3, r2
 800228c:	d00a      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800228e:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <HAL_RCC_ClockConfig+0x278>)
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	4a1a      	ldr	r2, [pc, #104]	; (80022fc <HAL_RCC_ClockConfig+0x280>)
 8002294:	4013      	ands	r3, r2
 8002296:	0019      	movs	r1, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	00da      	lsls	r2, r3, #3
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <HAL_RCC_ClockConfig+0x278>)
 80022a0:	430a      	orrs	r2, r1
 80022a2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022a4:	f000 f832 	bl	800230c <HAL_RCC_GetSysClockFreq>
 80022a8:	0001      	movs	r1, r0
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <HAL_RCC_ClockConfig+0x278>)
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	091b      	lsrs	r3, r3, #4
 80022b0:	220f      	movs	r2, #15
 80022b2:	4013      	ands	r3, r2
 80022b4:	4a12      	ldr	r2, [pc, #72]	; (8002300 <HAL_RCC_ClockConfig+0x284>)
 80022b6:	5cd3      	ldrb	r3, [r2, r3]
 80022b8:	000a      	movs	r2, r1
 80022ba:	40da      	lsrs	r2, r3
 80022bc:	4b11      	ldr	r3, [pc, #68]	; (8002304 <HAL_RCC_ClockConfig+0x288>)
 80022be:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <HAL_RCC_ClockConfig+0x28c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	250b      	movs	r5, #11
 80022c6:	197c      	adds	r4, r7, r5
 80022c8:	0018      	movs	r0, r3
 80022ca:	f7ff f895 	bl	80013f8 <HAL_InitTick>
 80022ce:	0003      	movs	r3, r0
 80022d0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80022d2:	197b      	adds	r3, r7, r5
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d002      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80022da:	197b      	adds	r3, r7, r5
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	e000      	b.n	80022e2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	0018      	movs	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	b004      	add	sp, #16
 80022e8:	bdb0      	pop	{r4, r5, r7, pc}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	40022000 	.word	0x40022000
 80022f0:	00001388 	.word	0x00001388
 80022f4:	40021000 	.word	0x40021000
 80022f8:	fffff8ff 	.word	0xfffff8ff
 80022fc:	ffffc7ff 	.word	0xffffc7ff
 8002300:	080030e4 	.word	0x080030e4
 8002304:	20000000 	.word	0x20000000
 8002308:	20000004 	.word	0x20000004

0800230c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800230c:	b5b0      	push	{r4, r5, r7, lr}
 800230e:	b08e      	sub	sp, #56	; 0x38
 8002310:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002312:	4b4c      	ldr	r3, [pc, #304]	; (8002444 <HAL_RCC_GetSysClockFreq+0x138>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800231a:	230c      	movs	r3, #12
 800231c:	4013      	ands	r3, r2
 800231e:	2b0c      	cmp	r3, #12
 8002320:	d014      	beq.n	800234c <HAL_RCC_GetSysClockFreq+0x40>
 8002322:	d900      	bls.n	8002326 <HAL_RCC_GetSysClockFreq+0x1a>
 8002324:	e07b      	b.n	800241e <HAL_RCC_GetSysClockFreq+0x112>
 8002326:	2b04      	cmp	r3, #4
 8002328:	d002      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0x24>
 800232a:	2b08      	cmp	r3, #8
 800232c:	d00b      	beq.n	8002346 <HAL_RCC_GetSysClockFreq+0x3a>
 800232e:	e076      	b.n	800241e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002330:	4b44      	ldr	r3, [pc, #272]	; (8002444 <HAL_RCC_GetSysClockFreq+0x138>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2210      	movs	r2, #16
 8002336:	4013      	ands	r3, r2
 8002338:	d002      	beq.n	8002340 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800233a:	4b43      	ldr	r3, [pc, #268]	; (8002448 <HAL_RCC_GetSysClockFreq+0x13c>)
 800233c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800233e:	e07c      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002340:	4b42      	ldr	r3, [pc, #264]	; (800244c <HAL_RCC_GetSysClockFreq+0x140>)
 8002342:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002344:	e079      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002346:	4b42      	ldr	r3, [pc, #264]	; (8002450 <HAL_RCC_GetSysClockFreq+0x144>)
 8002348:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800234a:	e076      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800234c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234e:	0c9a      	lsrs	r2, r3, #18
 8002350:	230f      	movs	r3, #15
 8002352:	401a      	ands	r2, r3
 8002354:	4b3f      	ldr	r3, [pc, #252]	; (8002454 <HAL_RCC_GetSysClockFreq+0x148>)
 8002356:	5c9b      	ldrb	r3, [r3, r2]
 8002358:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800235a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235c:	0d9a      	lsrs	r2, r3, #22
 800235e:	2303      	movs	r3, #3
 8002360:	4013      	ands	r3, r2
 8002362:	3301      	adds	r3, #1
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002366:	4b37      	ldr	r3, [pc, #220]	; (8002444 <HAL_RCC_GetSysClockFreq+0x138>)
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	2380      	movs	r3, #128	; 0x80
 800236c:	025b      	lsls	r3, r3, #9
 800236e:	4013      	ands	r3, r2
 8002370:	d01a      	beq.n	80023a8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002374:	61bb      	str	r3, [r7, #24]
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
 800237a:	4a35      	ldr	r2, [pc, #212]	; (8002450 <HAL_RCC_GetSysClockFreq+0x144>)
 800237c:	2300      	movs	r3, #0
 800237e:	69b8      	ldr	r0, [r7, #24]
 8002380:	69f9      	ldr	r1, [r7, #28]
 8002382:	f7fd ff6d 	bl	8000260 <__aeabi_lmul>
 8002386:	0002      	movs	r2, r0
 8002388:	000b      	movs	r3, r1
 800238a:	0010      	movs	r0, r2
 800238c:	0019      	movs	r1, r3
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f7fd ff41 	bl	8000220 <__aeabi_uldivmod>
 800239e:	0002      	movs	r2, r0
 80023a0:	000b      	movs	r3, r1
 80023a2:	0013      	movs	r3, r2
 80023a4:	637b      	str	r3, [r7, #52]	; 0x34
 80023a6:	e037      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80023a8:	4b26      	ldr	r3, [pc, #152]	; (8002444 <HAL_RCC_GetSysClockFreq+0x138>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2210      	movs	r2, #16
 80023ae:	4013      	ands	r3, r2
 80023b0:	d01a      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80023b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	4a23      	ldr	r2, [pc, #140]	; (8002448 <HAL_RCC_GetSysClockFreq+0x13c>)
 80023bc:	2300      	movs	r3, #0
 80023be:	68b8      	ldr	r0, [r7, #8]
 80023c0:	68f9      	ldr	r1, [r7, #12]
 80023c2:	f7fd ff4d 	bl	8000260 <__aeabi_lmul>
 80023c6:	0002      	movs	r2, r0
 80023c8:	000b      	movs	r3, r1
 80023ca:	0010      	movs	r0, r2
 80023cc:	0019      	movs	r1, r3
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	603b      	str	r3, [r7, #0]
 80023d2:	2300      	movs	r3, #0
 80023d4:	607b      	str	r3, [r7, #4]
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f7fd ff21 	bl	8000220 <__aeabi_uldivmod>
 80023de:	0002      	movs	r2, r0
 80023e0:	000b      	movs	r3, r1
 80023e2:	0013      	movs	r3, r2
 80023e4:	637b      	str	r3, [r7, #52]	; 0x34
 80023e6:	e017      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80023e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ea:	0018      	movs	r0, r3
 80023ec:	2300      	movs	r3, #0
 80023ee:	0019      	movs	r1, r3
 80023f0:	4a16      	ldr	r2, [pc, #88]	; (800244c <HAL_RCC_GetSysClockFreq+0x140>)
 80023f2:	2300      	movs	r3, #0
 80023f4:	f7fd ff34 	bl	8000260 <__aeabi_lmul>
 80023f8:	0002      	movs	r2, r0
 80023fa:	000b      	movs	r3, r1
 80023fc:	0010      	movs	r0, r2
 80023fe:	0019      	movs	r1, r3
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	001c      	movs	r4, r3
 8002404:	2300      	movs	r3, #0
 8002406:	001d      	movs	r5, r3
 8002408:	0022      	movs	r2, r4
 800240a:	002b      	movs	r3, r5
 800240c:	f7fd ff08 	bl	8000220 <__aeabi_uldivmod>
 8002410:	0002      	movs	r2, r0
 8002412:	000b      	movs	r3, r1
 8002414:	0013      	movs	r3, r2
 8002416:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800241c:	e00d      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800241e:	4b09      	ldr	r3, [pc, #36]	; (8002444 <HAL_RCC_GetSysClockFreq+0x138>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	0b5b      	lsrs	r3, r3, #13
 8002424:	2207      	movs	r2, #7
 8002426:	4013      	ands	r3, r2
 8002428:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800242a:	6a3b      	ldr	r3, [r7, #32]
 800242c:	3301      	adds	r3, #1
 800242e:	2280      	movs	r2, #128	; 0x80
 8002430:	0212      	lsls	r2, r2, #8
 8002432:	409a      	lsls	r2, r3
 8002434:	0013      	movs	r3, r2
 8002436:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002438:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800243a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800243c:	0018      	movs	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	b00e      	add	sp, #56	; 0x38
 8002442:	bdb0      	pop	{r4, r5, r7, pc}
 8002444:	40021000 	.word	0x40021000
 8002448:	003d0900 	.word	0x003d0900
 800244c:	00f42400 	.word	0x00f42400
 8002450:	007a1200 	.word	0x007a1200
 8002454:	080030f4 	.word	0x080030f4

08002458 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e07b      	b.n	8002562 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	2b00      	cmp	r3, #0
 8002470:	d109      	bne.n	8002486 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	2382      	movs	r3, #130	; 0x82
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	429a      	cmp	r2, r3
 800247c:	d009      	beq.n	8002492 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	61da      	str	r2, [r3, #28]
 8002484:	e005      	b.n	8002492 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2251      	movs	r2, #81	; 0x51
 800249c:	5c9b      	ldrb	r3, [r3, r2]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d107      	bne.n	80024b4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2250      	movs	r2, #80	; 0x50
 80024a8:	2100      	movs	r1, #0
 80024aa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	0018      	movs	r0, r3
 80024b0:	f7fe fee0 	bl	8001274 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2251      	movs	r2, #81	; 0x51
 80024b8:	2102      	movs	r1, #2
 80024ba:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2140      	movs	r1, #64	; 0x40
 80024c8:	438a      	bics	r2, r1
 80024ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	2382      	movs	r3, #130	; 0x82
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	401a      	ands	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6899      	ldr	r1, [r3, #8]
 80024da:	2384      	movs	r3, #132	; 0x84
 80024dc:	021b      	lsls	r3, r3, #8
 80024de:	400b      	ands	r3, r1
 80024e0:	431a      	orrs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68d9      	ldr	r1, [r3, #12]
 80024e6:	2380      	movs	r3, #128	; 0x80
 80024e8:	011b      	lsls	r3, r3, #4
 80024ea:	400b      	ands	r3, r1
 80024ec:	431a      	orrs	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	2102      	movs	r1, #2
 80024f4:	400b      	ands	r3, r1
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	2101      	movs	r1, #1
 80024fe:	400b      	ands	r3, r1
 8002500:	431a      	orrs	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6999      	ldr	r1, [r3, #24]
 8002506:	2380      	movs	r3, #128	; 0x80
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	400b      	ands	r3, r1
 800250c:	431a      	orrs	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	2138      	movs	r1, #56	; 0x38
 8002514:	400b      	ands	r3, r1
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	2180      	movs	r1, #128	; 0x80
 800251e:	400b      	ands	r3, r1
 8002520:	431a      	orrs	r2, r3
 8002522:	0011      	movs	r1, r2
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	019b      	lsls	r3, r3, #6
 800252c:	401a      	ands	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	0c1b      	lsrs	r3, r3, #16
 800253c:	2204      	movs	r2, #4
 800253e:	4013      	ands	r3, r2
 8002540:	0019      	movs	r1, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	2210      	movs	r2, #16
 8002548:	401a      	ands	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2251      	movs	r2, #81	; 0x51
 800255c:	2101      	movs	r1, #1
 800255e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	0018      	movs	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	b002      	add	sp, #8
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b088      	sub	sp, #32
 800256e:	af00      	add	r7, sp, #0
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	603b      	str	r3, [r7, #0]
 8002576:	1dbb      	adds	r3, r7, #6
 8002578:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800257a:	231f      	movs	r3, #31
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	2200      	movs	r2, #0
 8002580:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2250      	movs	r2, #80	; 0x50
 8002586:	5c9b      	ldrb	r3, [r3, r2]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d101      	bne.n	8002590 <HAL_SPI_Transmit+0x26>
 800258c:	2302      	movs	r3, #2
 800258e:	e13e      	b.n	800280e <HAL_SPI_Transmit+0x2a4>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2250      	movs	r2, #80	; 0x50
 8002594:	2101      	movs	r1, #1
 8002596:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002598:	f7fe ff74 	bl	8001484 <HAL_GetTick>
 800259c:	0003      	movs	r3, r0
 800259e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80025a0:	2316      	movs	r3, #22
 80025a2:	18fb      	adds	r3, r7, r3
 80025a4:	1dba      	adds	r2, r7, #6
 80025a6:	8812      	ldrh	r2, [r2, #0]
 80025a8:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2251      	movs	r2, #81	; 0x51
 80025ae:	5c9b      	ldrb	r3, [r3, r2]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d004      	beq.n	80025c0 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80025b6:	231f      	movs	r3, #31
 80025b8:	18fb      	adds	r3, r7, r3
 80025ba:	2202      	movs	r2, #2
 80025bc:	701a      	strb	r2, [r3, #0]
    goto error;
 80025be:	e11b      	b.n	80027f8 <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_SPI_Transmit+0x64>
 80025c6:	1dbb      	adds	r3, r7, #6
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d104      	bne.n	80025d8 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80025ce:	231f      	movs	r3, #31
 80025d0:	18fb      	adds	r3, r7, r3
 80025d2:	2201      	movs	r2, #1
 80025d4:	701a      	strb	r2, [r3, #0]
    goto error;
 80025d6:	e10f      	b.n	80027f8 <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2251      	movs	r2, #81	; 0x51
 80025dc:	2103      	movs	r1, #3
 80025de:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1dba      	adds	r2, r7, #6
 80025f0:	8812      	ldrh	r2, [r2, #0]
 80025f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	1dba      	adds	r2, r7, #6
 80025f8:	8812      	ldrh	r2, [r2, #0]
 80025fa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	2380      	movs	r3, #128	; 0x80
 8002620:	021b      	lsls	r3, r3, #8
 8002622:	429a      	cmp	r2, r3
 8002624:	d110      	bne.n	8002648 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2140      	movs	r1, #64	; 0x40
 8002632:	438a      	bics	r2, r1
 8002634:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2180      	movs	r1, #128	; 0x80
 8002642:	01c9      	lsls	r1, r1, #7
 8002644:	430a      	orrs	r2, r1
 8002646:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2240      	movs	r2, #64	; 0x40
 8002650:	4013      	ands	r3, r2
 8002652:	2b40      	cmp	r3, #64	; 0x40
 8002654:	d007      	beq.n	8002666 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2140      	movs	r1, #64	; 0x40
 8002662:	430a      	orrs	r2, r1
 8002664:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	2380      	movs	r3, #128	; 0x80
 800266c:	011b      	lsls	r3, r3, #4
 800266e:	429a      	cmp	r2, r3
 8002670:	d14e      	bne.n	8002710 <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d004      	beq.n	8002684 <HAL_SPI_Transmit+0x11a>
 800267a:	2316      	movs	r3, #22
 800267c:	18fb      	adds	r3, r7, r3
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d13f      	bne.n	8002704 <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002688:	881a      	ldrh	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	1c9a      	adds	r2, r3, #2
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800269e:	b29b      	uxth	r3, r3
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80026a8:	e02c      	b.n	8002704 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2202      	movs	r2, #2
 80026b2:	4013      	ands	r3, r2
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d112      	bne.n	80026de <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	881a      	ldrh	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	1c9a      	adds	r2, r3, #2
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	86da      	strh	r2, [r3, #54]	; 0x36
 80026dc:	e012      	b.n	8002704 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026de:	f7fe fed1 	bl	8001484 <HAL_GetTick>
 80026e2:	0002      	movs	r2, r0
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d802      	bhi.n	80026f4 <HAL_SPI_Transmit+0x18a>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	3301      	adds	r3, #1
 80026f2:	d102      	bne.n	80026fa <HAL_SPI_Transmit+0x190>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d104      	bne.n	8002704 <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 80026fa:	231f      	movs	r3, #31
 80026fc:	18fb      	adds	r3, r7, r3
 80026fe:	2203      	movs	r2, #3
 8002700:	701a      	strb	r2, [r3, #0]
          goto error;
 8002702:	e079      	b.n	80027f8 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002708:	b29b      	uxth	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1cd      	bne.n	80026aa <HAL_SPI_Transmit+0x140>
 800270e:	e04f      	b.n	80027b0 <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d004      	beq.n	8002722 <HAL_SPI_Transmit+0x1b8>
 8002718:	2316      	movs	r3, #22
 800271a:	18fb      	adds	r3, r7, r3
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d141      	bne.n	80027a6 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	330c      	adds	r3, #12
 800272c:	7812      	ldrb	r2, [r2, #0]
 800272e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800273e:	b29b      	uxth	r3, r3
 8002740:	3b01      	subs	r3, #1
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002748:	e02d      	b.n	80027a6 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2202      	movs	r2, #2
 8002752:	4013      	ands	r3, r2
 8002754:	2b02      	cmp	r3, #2
 8002756:	d113      	bne.n	8002780 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	330c      	adds	r3, #12
 8002762:	7812      	ldrb	r2, [r2, #0]
 8002764:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002774:	b29b      	uxth	r3, r3
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	86da      	strh	r2, [r3, #54]	; 0x36
 800277e:	e012      	b.n	80027a6 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002780:	f7fe fe80 	bl	8001484 <HAL_GetTick>
 8002784:	0002      	movs	r2, r0
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d802      	bhi.n	8002796 <HAL_SPI_Transmit+0x22c>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	3301      	adds	r3, #1
 8002794:	d102      	bne.n	800279c <HAL_SPI_Transmit+0x232>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d104      	bne.n	80027a6 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 800279c:	231f      	movs	r3, #31
 800279e:	18fb      	adds	r3, r7, r3
 80027a0:	2203      	movs	r2, #3
 80027a2:	701a      	strb	r2, [r3, #0]
          goto error;
 80027a4:	e028      	b.n	80027f8 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1cc      	bne.n	800274a <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	6839      	ldr	r1, [r7, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	0018      	movs	r0, r3
 80027b8:	f000 fc08 	bl	8002fcc <SPI_EndRxTxTransaction>
 80027bc:	1e03      	subs	r3, r0, #0
 80027be:	d002      	beq.n	80027c6 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2220      	movs	r2, #32
 80027c4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10a      	bne.n	80027e4 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027ce:	2300      	movs	r3, #0
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d004      	beq.n	80027f6 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 80027ec:	231f      	movs	r3, #31
 80027ee:	18fb      	adds	r3, r7, r3
 80027f0:	2201      	movs	r2, #1
 80027f2:	701a      	strb	r2, [r3, #0]
 80027f4:	e000      	b.n	80027f8 <HAL_SPI_Transmit+0x28e>
  }

error:
 80027f6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2251      	movs	r2, #81	; 0x51
 80027fc:	2101      	movs	r1, #1
 80027fe:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2250      	movs	r2, #80	; 0x50
 8002804:	2100      	movs	r1, #0
 8002806:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002808:	231f      	movs	r3, #31
 800280a:	18fb      	adds	r3, r7, r3
 800280c:	781b      	ldrb	r3, [r3, #0]
}
 800280e:	0018      	movs	r0, r3
 8002810:	46bd      	mov	sp, r7
 8002812:	b008      	add	sp, #32
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002818:	b590      	push	{r4, r7, lr}
 800281a:	b089      	sub	sp, #36	; 0x24
 800281c:	af02      	add	r7, sp, #8
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	603b      	str	r3, [r7, #0]
 8002824:	1dbb      	adds	r3, r7, #6
 8002826:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002828:	2317      	movs	r3, #23
 800282a:	18fb      	adds	r3, r7, r3
 800282c:	2200      	movs	r2, #0
 800282e:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	2382      	movs	r3, #130	; 0x82
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	429a      	cmp	r2, r3
 800283a:	d113      	bne.n	8002864 <HAL_SPI_Receive+0x4c>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10f      	bne.n	8002864 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2251      	movs	r2, #81	; 0x51
 8002848:	2104      	movs	r1, #4
 800284a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800284c:	1dbb      	adds	r3, r7, #6
 800284e:	881c      	ldrh	r4, [r3, #0]
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	68b9      	ldr	r1, [r7, #8]
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	0023      	movs	r3, r4
 800285c:	f000 f902 	bl	8002a64 <HAL_SPI_TransmitReceive>
 8002860:	0003      	movs	r3, r0
 8002862:	e0f9      	b.n	8002a58 <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2250      	movs	r2, #80	; 0x50
 8002868:	5c9b      	ldrb	r3, [r3, r2]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d101      	bne.n	8002872 <HAL_SPI_Receive+0x5a>
 800286e:	2302      	movs	r3, #2
 8002870:	e0f2      	b.n	8002a58 <HAL_SPI_Receive+0x240>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2250      	movs	r2, #80	; 0x50
 8002876:	2101      	movs	r1, #1
 8002878:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800287a:	f7fe fe03 	bl	8001484 <HAL_GetTick>
 800287e:	0003      	movs	r3, r0
 8002880:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2251      	movs	r2, #81	; 0x51
 8002886:	5c9b      	ldrb	r3, [r3, r2]
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b01      	cmp	r3, #1
 800288c:	d004      	beq.n	8002898 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800288e:	2317      	movs	r3, #23
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	2202      	movs	r2, #2
 8002894:	701a      	strb	r2, [r3, #0]
    goto error;
 8002896:	e0d4      	b.n	8002a42 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_SPI_Receive+0x8e>
 800289e:	1dbb      	adds	r3, r7, #6
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d104      	bne.n	80028b0 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80028a6:	2317      	movs	r3, #23
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	2201      	movs	r2, #1
 80028ac:	701a      	strb	r2, [r3, #0]
    goto error;
 80028ae:	e0c8      	b.n	8002a42 <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2251      	movs	r2, #81	; 0x51
 80028b4:	2104      	movs	r1, #4
 80028b6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	1dba      	adds	r2, r7, #6
 80028c8:	8812      	ldrh	r2, [r2, #0]
 80028ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1dba      	adds	r2, r7, #6
 80028d0:	8812      	ldrh	r2, [r2, #0]
 80028d2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	2380      	movs	r3, #128	; 0x80
 80028f8:	021b      	lsls	r3, r3, #8
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d10f      	bne.n	800291e <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2140      	movs	r1, #64	; 0x40
 800290a:	438a      	bics	r2, r1
 800290c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4951      	ldr	r1, [pc, #324]	; (8002a60 <HAL_SPI_Receive+0x248>)
 800291a:	400a      	ands	r2, r1
 800291c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2240      	movs	r2, #64	; 0x40
 8002926:	4013      	ands	r3, r2
 8002928:	2b40      	cmp	r3, #64	; 0x40
 800292a:	d007      	beq.n	800293c <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2140      	movs	r1, #64	; 0x40
 8002938:	430a      	orrs	r2, r1
 800293a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d164      	bne.n	8002a0e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002944:	e02f      	b.n	80029a6 <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2201      	movs	r2, #1
 800294e:	4013      	ands	r3, r2
 8002950:	2b01      	cmp	r3, #1
 8002952:	d115      	bne.n	8002980 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	330c      	adds	r3, #12
 800295a:	001a      	movs	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002960:	7812      	ldrb	r2, [r2, #0]
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002974:	b29b      	uxth	r3, r3
 8002976:	3b01      	subs	r3, #1
 8002978:	b29a      	uxth	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800297e:	e012      	b.n	80029a6 <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002980:	f7fe fd80 	bl	8001484 <HAL_GetTick>
 8002984:	0002      	movs	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d802      	bhi.n	8002996 <HAL_SPI_Receive+0x17e>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	3301      	adds	r3, #1
 8002994:	d102      	bne.n	800299c <HAL_SPI_Receive+0x184>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d104      	bne.n	80029a6 <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 800299c:	2317      	movs	r3, #23
 800299e:	18fb      	adds	r3, r7, r3
 80029a0:	2203      	movs	r2, #3
 80029a2:	701a      	strb	r2, [r3, #0]
          goto error;
 80029a4:	e04d      	b.n	8002a42 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1ca      	bne.n	8002946 <HAL_SPI_Receive+0x12e>
 80029b0:	e032      	b.n	8002a18 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2201      	movs	r2, #1
 80029ba:	4013      	ands	r3, r2
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d113      	bne.n	80029e8 <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ca:	b292      	uxth	r2, r2
 80029cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d2:	1c9a      	adds	r2, r3, #2
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029dc:	b29b      	uxth	r3, r3
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029e6:	e012      	b.n	8002a0e <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029e8:	f7fe fd4c 	bl	8001484 <HAL_GetTick>
 80029ec:	0002      	movs	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d802      	bhi.n	80029fe <HAL_SPI_Receive+0x1e6>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	3301      	adds	r3, #1
 80029fc:	d102      	bne.n	8002a04 <HAL_SPI_Receive+0x1ec>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 8002a04:	2317      	movs	r3, #23
 8002a06:	18fb      	adds	r3, r7, r3
 8002a08:	2203      	movs	r2, #3
 8002a0a:	701a      	strb	r2, [r3, #0]
          goto error;
 8002a0c:	e019      	b.n	8002a42 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1cc      	bne.n	80029b2 <HAL_SPI_Receive+0x19a>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	6839      	ldr	r1, [r7, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f000 fa6a 	bl	8002ef8 <SPI_EndRxTransaction>
 8002a24:	1e03      	subs	r3, r0, #0
 8002a26:	d002      	beq.n	8002a2e <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d004      	beq.n	8002a40 <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 8002a36:	2317      	movs	r3, #23
 8002a38:	18fb      	adds	r3, r7, r3
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	701a      	strb	r2, [r3, #0]
 8002a3e:	e000      	b.n	8002a42 <HAL_SPI_Receive+0x22a>
  }

error :
 8002a40:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2251      	movs	r2, #81	; 0x51
 8002a46:	2101      	movs	r1, #1
 8002a48:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2250      	movs	r2, #80	; 0x50
 8002a4e:	2100      	movs	r1, #0
 8002a50:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002a52:	2317      	movs	r3, #23
 8002a54:	18fb      	adds	r3, r7, r3
 8002a56:	781b      	ldrb	r3, [r3, #0]
}
 8002a58:	0018      	movs	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	b007      	add	sp, #28
 8002a5e:	bd90      	pop	{r4, r7, pc}
 8002a60:	ffffbfff 	.word	0xffffbfff

08002a64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08c      	sub	sp, #48	; 0x30
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	001a      	movs	r2, r3
 8002a72:	1cbb      	adds	r3, r7, #2
 8002a74:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a76:	2301      	movs	r3, #1
 8002a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a7a:	232b      	movs	r3, #43	; 0x2b
 8002a7c:	18fb      	adds	r3, r7, r3
 8002a7e:	2200      	movs	r2, #0
 8002a80:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2250      	movs	r2, #80	; 0x50
 8002a86:	5c9b      	ldrb	r3, [r3, r2]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d101      	bne.n	8002a90 <HAL_SPI_TransmitReceive+0x2c>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e1a0      	b.n	8002dd2 <HAL_SPI_TransmitReceive+0x36e>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2250      	movs	r2, #80	; 0x50
 8002a94:	2101      	movs	r1, #1
 8002a96:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a98:	f7fe fcf4 	bl	8001484 <HAL_GetTick>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002aa0:	2023      	movs	r0, #35	; 0x23
 8002aa2:	183b      	adds	r3, r7, r0
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	2151      	movs	r1, #81	; 0x51
 8002aa8:	5c52      	ldrb	r2, [r2, r1]
 8002aaa:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002ab2:	231a      	movs	r3, #26
 8002ab4:	18fb      	adds	r3, r7, r3
 8002ab6:	1cba      	adds	r2, r7, #2
 8002ab8:	8812      	ldrh	r2, [r2, #0]
 8002aba:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002abc:	183b      	adds	r3, r7, r0
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d011      	beq.n	8002ae8 <HAL_SPI_TransmitReceive+0x84>
 8002ac4:	69fa      	ldr	r2, [r7, #28]
 8002ac6:	2382      	movs	r3, #130	; 0x82
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d107      	bne.n	8002ade <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d103      	bne.n	8002ade <HAL_SPI_TransmitReceive+0x7a>
 8002ad6:	183b      	adds	r3, r7, r0
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d004      	beq.n	8002ae8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002ade:	232b      	movs	r3, #43	; 0x2b
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ae6:	e169      	b.n	8002dbc <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d006      	beq.n	8002afc <HAL_SPI_TransmitReceive+0x98>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_SPI_TransmitReceive+0x98>
 8002af4:	1cbb      	adds	r3, r7, #2
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d104      	bne.n	8002b06 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002afc:	232b      	movs	r3, #43	; 0x2b
 8002afe:	18fb      	adds	r3, r7, r3
 8002b00:	2201      	movs	r2, #1
 8002b02:	701a      	strb	r2, [r3, #0]
    goto error;
 8002b04:	e15a      	b.n	8002dbc <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2251      	movs	r2, #81	; 0x51
 8002b0a:	5c9b      	ldrb	r3, [r3, r2]
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d003      	beq.n	8002b1a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2251      	movs	r2, #81	; 0x51
 8002b16:	2105      	movs	r1, #5
 8002b18:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1cba      	adds	r2, r7, #2
 8002b2a:	8812      	ldrh	r2, [r2, #0]
 8002b2c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1cba      	adds	r2, r7, #2
 8002b32:	8812      	ldrh	r2, [r2, #0]
 8002b34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	1cba      	adds	r2, r7, #2
 8002b40:	8812      	ldrh	r2, [r2, #0]
 8002b42:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	1cba      	adds	r2, r7, #2
 8002b48:	8812      	ldrh	r2, [r2, #0]
 8002b4a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2240      	movs	r2, #64	; 0x40
 8002b60:	4013      	ands	r3, r2
 8002b62:	2b40      	cmp	r3, #64	; 0x40
 8002b64:	d007      	beq.n	8002b76 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2140      	movs	r1, #64	; 0x40
 8002b72:	430a      	orrs	r2, r1
 8002b74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	2380      	movs	r3, #128	; 0x80
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d000      	beq.n	8002b84 <HAL_SPI_TransmitReceive+0x120>
 8002b82:	e07a      	b.n	8002c7a <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d004      	beq.n	8002b96 <HAL_SPI_TransmitReceive+0x132>
 8002b8c:	231a      	movs	r3, #26
 8002b8e:	18fb      	adds	r3, r7, r3
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d166      	bne.n	8002c64 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	881a      	ldrh	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	1c9a      	adds	r2, r3, #2
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bba:	e053      	b.n	8002c64 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d11b      	bne.n	8002c02 <HAL_SPI_TransmitReceive+0x19e>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d016      	beq.n	8002c02 <HAL_SPI_TransmitReceive+0x19e>
 8002bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d113      	bne.n	8002c02 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	881a      	ldrh	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	1c9a      	adds	r2, r3, #2
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d119      	bne.n	8002c44 <HAL_SPI_TransmitReceive+0x1e0>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d014      	beq.n	8002c44 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c24:	b292      	uxth	r2, r2
 8002c26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2c:	1c9a      	adds	r2, r3, #2
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c40:	2301      	movs	r3, #1
 8002c42:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c44:	f7fe fc1e 	bl	8001484 <HAL_GetTick>
 8002c48:	0002      	movs	r2, r0
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d807      	bhi.n	8002c64 <HAL_SPI_TransmitReceive+0x200>
 8002c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c56:	3301      	adds	r3, #1
 8002c58:	d004      	beq.n	8002c64 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 8002c5a:	232b      	movs	r3, #43	; 0x2b
 8002c5c:	18fb      	adds	r3, r7, r3
 8002c5e:	2203      	movs	r2, #3
 8002c60:	701a      	strb	r2, [r3, #0]
        goto error;
 8002c62:	e0ab      	b.n	8002dbc <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1a6      	bne.n	8002bbc <HAL_SPI_TransmitReceive+0x158>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1a1      	bne.n	8002bbc <HAL_SPI_TransmitReceive+0x158>
 8002c78:	e07f      	b.n	8002d7a <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d005      	beq.n	8002c8e <HAL_SPI_TransmitReceive+0x22a>
 8002c82:	231a      	movs	r3, #26
 8002c84:	18fb      	adds	r3, r7, r3
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d000      	beq.n	8002c8e <HAL_SPI_TransmitReceive+0x22a>
 8002c8c:	e06b      	b.n	8002d66 <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	330c      	adds	r3, #12
 8002c98:	7812      	ldrb	r2, [r2, #0]
 8002c9a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cb4:	e057      	b.n	8002d66 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d11c      	bne.n	8002cfe <HAL_SPI_TransmitReceive+0x29a>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d017      	beq.n	8002cfe <HAL_SPI_TransmitReceive+0x29a>
 8002cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d114      	bne.n	8002cfe <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	330c      	adds	r3, #12
 8002cde:	7812      	ldrb	r2, [r2, #0]
 8002ce0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	2201      	movs	r2, #1
 8002d06:	4013      	ands	r3, r2
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d119      	bne.n	8002d40 <HAL_SPI_TransmitReceive+0x2dc>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d014      	beq.n	8002d40 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d28:	1c5a      	adds	r2, r3, #1
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d40:	f7fe fba0 	bl	8001484 <HAL_GetTick>
 8002d44:	0002      	movs	r2, r0
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d802      	bhi.n	8002d56 <HAL_SPI_TransmitReceive+0x2f2>
 8002d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d52:	3301      	adds	r3, #1
 8002d54:	d102      	bne.n	8002d5c <HAL_SPI_TransmitReceive+0x2f8>
 8002d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d104      	bne.n	8002d66 <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 8002d5c:	232b      	movs	r3, #43	; 0x2b
 8002d5e:	18fb      	adds	r3, r7, r3
 8002d60:	2203      	movs	r2, #3
 8002d62:	701a      	strb	r2, [r3, #0]
        goto error;
 8002d64:	e02a      	b.n	8002dbc <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1a2      	bne.n	8002cb6 <HAL_SPI_TransmitReceive+0x252>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d19d      	bne.n	8002cb6 <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	0018      	movs	r0, r3
 8002d82:	f000 f923 	bl	8002fcc <SPI_EndRxTxTransaction>
 8002d86:	1e03      	subs	r3, r0, #0
 8002d88:	d007      	beq.n	8002d9a <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 8002d8a:	232b      	movs	r3, #43	; 0x2b
 8002d8c:	18fb      	adds	r3, r7, r3
 8002d8e:	2201      	movs	r2, #1
 8002d90:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2220      	movs	r2, #32
 8002d96:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002d98:	e010      	b.n	8002dbc <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10b      	bne.n	8002dba <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	e000      	b.n	8002dbc <HAL_SPI_TransmitReceive+0x358>
  }

error :
 8002dba:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2251      	movs	r2, #81	; 0x51
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2250      	movs	r2, #80	; 0x50
 8002dc8:	2100      	movs	r1, #0
 8002dca:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002dcc:	232b      	movs	r3, #43	; 0x2b
 8002dce:	18fb      	adds	r3, r7, r3
 8002dd0:	781b      	ldrb	r3, [r3, #0]
}
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	b00c      	add	sp, #48	; 0x30
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	1dfb      	adds	r3, r7, #7
 8002dea:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002dec:	f7fe fb4a 	bl	8001484 <HAL_GetTick>
 8002df0:	0002      	movs	r2, r0
 8002df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	18d3      	adds	r3, r2, r3
 8002dfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002dfc:	f7fe fb42 	bl	8001484 <HAL_GetTick>
 8002e00:	0003      	movs	r3, r0
 8002e02:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e04:	4b3a      	ldr	r3, [pc, #232]	; (8002ef0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	015b      	lsls	r3, r3, #5
 8002e0a:	0d1b      	lsrs	r3, r3, #20
 8002e0c:	69fa      	ldr	r2, [r7, #28]
 8002e0e:	4353      	muls	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e12:	e058      	b.n	8002ec6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	3301      	adds	r3, #1
 8002e18:	d055      	beq.n	8002ec6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e1a:	f7fe fb33 	bl	8001484 <HAL_GetTick>
 8002e1e:	0002      	movs	r2, r0
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	69fa      	ldr	r2, [r7, #28]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d902      	bls.n	8002e30 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d142      	bne.n	8002eb6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	21e0      	movs	r1, #224	; 0xe0
 8002e3c:	438a      	bics	r2, r1
 8002e3e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	2382      	movs	r3, #130	; 0x82
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d113      	bne.n	8002e74 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	2380      	movs	r3, #128	; 0x80
 8002e52:	021b      	lsls	r3, r3, #8
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d005      	beq.n	8002e64 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	2380      	movs	r3, #128	; 0x80
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d107      	bne.n	8002e74 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2140      	movs	r1, #64	; 0x40
 8002e70:	438a      	bics	r2, r1
 8002e72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e78:	2380      	movs	r3, #128	; 0x80
 8002e7a:	019b      	lsls	r3, r3, #6
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d110      	bne.n	8002ea2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	491a      	ldr	r1, [pc, #104]	; (8002ef4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002e8c:	400a      	ands	r2, r1
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2180      	movs	r1, #128	; 0x80
 8002e9c:	0189      	lsls	r1, r1, #6
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2251      	movs	r2, #81	; 0x51
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2250      	movs	r2, #80	; 0x50
 8002eae:	2100      	movs	r1, #0
 8002eb0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e017      	b.n	8002ee6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	425a      	negs	r2, r3
 8002ed6:	4153      	adcs	r3, r2
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	001a      	movs	r2, r3
 8002edc:	1dfb      	adds	r3, r7, #7
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d197      	bne.n	8002e14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	b008      	add	sp, #32
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	20000000 	.word	0x20000000
 8002ef4:	ffffdfff 	.word	0xffffdfff

08002ef8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af02      	add	r7, sp, #8
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	2382      	movs	r3, #130	; 0x82
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d113      	bne.n	8002f38 <SPI_EndRxTransaction+0x40>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	2380      	movs	r3, #128	; 0x80
 8002f16:	021b      	lsls	r3, r3, #8
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d005      	beq.n	8002f28 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d107      	bne.n	8002f38 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2140      	movs	r1, #64	; 0x40
 8002f34:	438a      	bics	r2, r1
 8002f36:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	2382      	movs	r3, #130	; 0x82
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d12b      	bne.n	8002f9c <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	2380      	movs	r3, #128	; 0x80
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d012      	beq.n	8002f76 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	0013      	movs	r3, r2
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	2180      	movs	r1, #128	; 0x80
 8002f5e:	f7ff ff3d 	bl	8002ddc <SPI_WaitFlagStateUntilTimeout>
 8002f62:	1e03      	subs	r3, r0, #0
 8002f64:	d02d      	beq.n	8002fc2 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e026      	b.n	8002fc4 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	0013      	movs	r3, r2
 8002f80:	2200      	movs	r2, #0
 8002f82:	2101      	movs	r1, #1
 8002f84:	f7ff ff2a 	bl	8002ddc <SPI_WaitFlagStateUntilTimeout>
 8002f88:	1e03      	subs	r3, r0, #0
 8002f8a:	d01a      	beq.n	8002fc2 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f90:	2220      	movs	r2, #32
 8002f92:	431a      	orrs	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e013      	b.n	8002fc4 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	0013      	movs	r3, r2
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2101      	movs	r1, #1
 8002faa:	f7ff ff17 	bl	8002ddc <SPI_WaitFlagStateUntilTimeout>
 8002fae:	1e03      	subs	r3, r0, #0
 8002fb0:	d007      	beq.n	8002fc2 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e000      	b.n	8002fc4 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	b004      	add	sp, #16
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b088      	sub	sp, #32
 8002fd0:	af02      	add	r7, sp, #8
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002fd8:	4b1d      	ldr	r3, [pc, #116]	; (8003050 <SPI_EndRxTxTransaction+0x84>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	491d      	ldr	r1, [pc, #116]	; (8003054 <SPI_EndRxTxTransaction+0x88>)
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f7fd f892 	bl	8000108 <__udivsi3>
 8002fe4:	0003      	movs	r3, r0
 8002fe6:	001a      	movs	r2, r3
 8002fe8:	0013      	movs	r3, r2
 8002fea:	015b      	lsls	r3, r3, #5
 8002fec:	1a9b      	subs	r3, r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	189b      	adds	r3, r3, r2
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	2382      	movs	r3, #130	; 0x82
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d112      	bne.n	8003028 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	0013      	movs	r3, r2
 800300c:	2200      	movs	r2, #0
 800300e:	2180      	movs	r1, #128	; 0x80
 8003010:	f7ff fee4 	bl	8002ddc <SPI_WaitFlagStateUntilTimeout>
 8003014:	1e03      	subs	r3, r0, #0
 8003016:	d016      	beq.n	8003046 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301c:	2220      	movs	r2, #32
 800301e:	431a      	orrs	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e00f      	b.n	8003048 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	3b01      	subs	r3, #1
 8003032:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	2280      	movs	r2, #128	; 0x80
 800303c:	4013      	ands	r3, r2
 800303e:	2b80      	cmp	r3, #128	; 0x80
 8003040:	d0f2      	beq.n	8003028 <SPI_EndRxTxTransaction+0x5c>
 8003042:	e000      	b.n	8003046 <SPI_EndRxTxTransaction+0x7a>
        break;
 8003044:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	0018      	movs	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	b006      	add	sp, #24
 800304e:	bd80      	pop	{r7, pc}
 8003050:	20000000 	.word	0x20000000
 8003054:	016e3600 	.word	0x016e3600

08003058 <__libc_init_array>:
 8003058:	b570      	push	{r4, r5, r6, lr}
 800305a:	2600      	movs	r6, #0
 800305c:	4d0c      	ldr	r5, [pc, #48]	; (8003090 <__libc_init_array+0x38>)
 800305e:	4c0d      	ldr	r4, [pc, #52]	; (8003094 <__libc_init_array+0x3c>)
 8003060:	1b64      	subs	r4, r4, r5
 8003062:	10a4      	asrs	r4, r4, #2
 8003064:	42a6      	cmp	r6, r4
 8003066:	d109      	bne.n	800307c <__libc_init_array+0x24>
 8003068:	2600      	movs	r6, #0
 800306a:	f000 f82b 	bl	80030c4 <_init>
 800306e:	4d0a      	ldr	r5, [pc, #40]	; (8003098 <__libc_init_array+0x40>)
 8003070:	4c0a      	ldr	r4, [pc, #40]	; (800309c <__libc_init_array+0x44>)
 8003072:	1b64      	subs	r4, r4, r5
 8003074:	10a4      	asrs	r4, r4, #2
 8003076:	42a6      	cmp	r6, r4
 8003078:	d105      	bne.n	8003086 <__libc_init_array+0x2e>
 800307a:	bd70      	pop	{r4, r5, r6, pc}
 800307c:	00b3      	lsls	r3, r6, #2
 800307e:	58eb      	ldr	r3, [r5, r3]
 8003080:	4798      	blx	r3
 8003082:	3601      	adds	r6, #1
 8003084:	e7ee      	b.n	8003064 <__libc_init_array+0xc>
 8003086:	00b3      	lsls	r3, r6, #2
 8003088:	58eb      	ldr	r3, [r5, r3]
 800308a:	4798      	blx	r3
 800308c:	3601      	adds	r6, #1
 800308e:	e7f2      	b.n	8003076 <__libc_init_array+0x1e>
 8003090:	08003108 	.word	0x08003108
 8003094:	08003108 	.word	0x08003108
 8003098:	08003108 	.word	0x08003108
 800309c:	0800310c 	.word	0x0800310c

080030a0 <memcpy>:
 80030a0:	2300      	movs	r3, #0
 80030a2:	b510      	push	{r4, lr}
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d100      	bne.n	80030aa <memcpy+0xa>
 80030a8:	bd10      	pop	{r4, pc}
 80030aa:	5ccc      	ldrb	r4, [r1, r3]
 80030ac:	54c4      	strb	r4, [r0, r3]
 80030ae:	3301      	adds	r3, #1
 80030b0:	e7f8      	b.n	80030a4 <memcpy+0x4>

080030b2 <memset>:
 80030b2:	0003      	movs	r3, r0
 80030b4:	1882      	adds	r2, r0, r2
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d100      	bne.n	80030bc <memset+0xa>
 80030ba:	4770      	bx	lr
 80030bc:	7019      	strb	r1, [r3, #0]
 80030be:	3301      	adds	r3, #1
 80030c0:	e7f9      	b.n	80030b6 <memset+0x4>
	...

080030c4 <_init>:
 80030c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ca:	bc08      	pop	{r3}
 80030cc:	469e      	mov	lr, r3
 80030ce:	4770      	bx	lr

080030d0 <_fini>:
 80030d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030d6:	bc08      	pop	{r3}
 80030d8:	469e      	mov	lr, r3
 80030da:	4770      	bx	lr
