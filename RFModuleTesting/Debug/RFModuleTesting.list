
RFModuleTesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cb8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003d78  08003d78  00013d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d9c  08003d9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d9c  08003d9c  00013d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003da4  08003da4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003da4  08003da4  00013da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003da8  08003da8  00013da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000000c  08003db8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08003db8  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d53  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017cb  00000000  00000000  00028d87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000848  00000000  00000000  0002a558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000790  00000000  00000000  0002ada0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000107ac  00000000  00000000  0002b530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008c66  00000000  00000000  0003bcdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006347f  00000000  00000000  00044942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a7dc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d78  00000000  00000000  000a7e14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d60 	.word	0x08003d60

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003d60 	.word	0x08003d60

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <NRF24_DelayMicroSeconds>:
//static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80004a8:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <NRF24_DelayMicroSeconds+0x38>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	490a      	ldr	r1, [pc, #40]	; (80004d8 <NRF24_DelayMicroSeconds+0x3c>)
 80004ae:	0018      	movs	r0, r3
 80004b0:	f7ff fe2a 	bl	8000108 <__udivsi3>
 80004b4:	0003      	movs	r3, r0
 80004b6:	001a      	movs	r2, r3
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	4353      	muls	r3, r2
 80004bc:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	1e5a      	subs	r2, r3, #1
 80004c4:	60fa      	str	r2, [r7, #12]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d1fa      	bne.n	80004c0 <NRF24_DelayMicroSeconds+0x24>
}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	46c0      	nop			; (mov r8, r8)
 80004ce:	46bd      	mov	sp, r7
 80004d0:	b004      	add	sp, #16
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000000 	.word	0x20000000
 80004d8:	002dc6c0 	.word	0x002dc6c0

080004dc <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d008      	beq.n	80004fc <NRF24_csn+0x20>
 80004ea:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <NRF24_csn+0x38>)
 80004ec:	6818      	ldr	r0, [r3, #0]
 80004ee:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <NRF24_csn+0x3c>)
 80004f0:	881b      	ldrh	r3, [r3, #0]
 80004f2:	2201      	movs	r2, #1
 80004f4:	0019      	movs	r1, r3
 80004f6:	f002 f876 	bl	80025e6 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80004fa:	e007      	b.n	800050c <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <NRF24_csn+0x38>)
 80004fe:	6818      	ldr	r0, [r3, #0]
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <NRF24_csn+0x3c>)
 8000502:	881b      	ldrh	r3, [r3, #0]
 8000504:	2200      	movs	r2, #0
 8000506:	0019      	movs	r1, r3
 8000508:	f002 f86d 	bl	80025e6 <HAL_GPIO_WritePin>
}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	b002      	add	sp, #8
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000030 	.word	0x20000030
 8000518:	20000034 	.word	0x20000034

0800051c <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d008      	beq.n	800053c <NRF24_ce+0x20>
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <NRF24_ce+0x38>)
 800052c:	6818      	ldr	r0, [r3, #0]
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <NRF24_ce+0x3c>)
 8000530:	881b      	ldrh	r3, [r3, #0]
 8000532:	2201      	movs	r2, #1
 8000534:	0019      	movs	r1, r3
 8000536:	f002 f856 	bl	80025e6 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 800053a:	e007      	b.n	800054c <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 800053c:	4b05      	ldr	r3, [pc, #20]	; (8000554 <NRF24_ce+0x38>)
 800053e:	6818      	ldr	r0, [r3, #0]
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <NRF24_ce+0x3c>)
 8000542:	881b      	ldrh	r3, [r3, #0]
 8000544:	2200      	movs	r2, #0
 8000546:	0019      	movs	r1, r3
 8000548:	f002 f84d 	bl	80025e6 <HAL_GPIO_WritePin>
}
 800054c:	46c0      	nop			; (mov r8, r8)
 800054e:	46bd      	mov	sp, r7
 8000550:	b002      	add	sp, #8
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000030 	.word	0x20000030
 8000558:	20000036 	.word	0x20000036

0800055c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 800055c:	b5b0      	push	{r4, r5, r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	0002      	movs	r2, r0
 8000564:	1dfb      	adds	r3, r7, #7
 8000566:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000568:	2000      	movs	r0, #0
 800056a:	f7ff ffb7 	bl	80004dc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800056e:	1dfb      	adds	r3, r7, #7
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	221f      	movs	r2, #31
 8000574:	4013      	ands	r3, r2
 8000576:	b2da      	uxtb	r2, r3
 8000578:	240c      	movs	r4, #12
 800057a:	193b      	adds	r3, r7, r4
 800057c:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800057e:	1939      	adds	r1, r7, r4
 8000580:	480c      	ldr	r0, [pc, #48]	; (80005b4 <NRF24_read_register+0x58>)
 8000582:	2364      	movs	r3, #100	; 0x64
 8000584:	2201      	movs	r2, #1
 8000586:	f002 fe3e 	bl	8003206 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 800058a:	193b      	adds	r3, r7, r4
 800058c:	1c59      	adds	r1, r3, #1
 800058e:	4809      	ldr	r0, [pc, #36]	; (80005b4 <NRF24_read_register+0x58>)
 8000590:	2364      	movs	r3, #100	; 0x64
 8000592:	2201      	movs	r2, #1
 8000594:	f002 ff8e 	bl	80034b4 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000598:	250f      	movs	r5, #15
 800059a:	197b      	adds	r3, r7, r5
 800059c:	193a      	adds	r2, r7, r4
 800059e:	7852      	ldrb	r2, [r2, #1]
 80005a0:	701a      	strb	r2, [r3, #0]
	//Bring CSN high
	NRF24_csn(1);
 80005a2:	2001      	movs	r0, #1
 80005a4:	f7ff ff9a 	bl	80004dc <NRF24_csn>
	return retData;
 80005a8:	197b      	adds	r3, r7, r5
 80005aa:	781b      	ldrb	r3, [r3, #0]
}
 80005ac:	0018      	movs	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	b004      	add	sp, #16
 80005b2:	bdb0      	pop	{r4, r5, r7, pc}
 80005b4:	20000038 	.word	0x20000038

080005b8 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6039      	str	r1, [r7, #0]
 80005c0:	0011      	movs	r1, r2
 80005c2:	1dfb      	adds	r3, r7, #7
 80005c4:	1c02      	adds	r2, r0, #0
 80005c6:	701a      	strb	r2, [r3, #0]
 80005c8:	1dbb      	adds	r3, r7, #6
 80005ca:	1c0a      	adds	r2, r1, #0
 80005cc:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f7ff ff84 	bl	80004dc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80005d4:	1dfb      	adds	r3, r7, #7
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	221f      	movs	r2, #31
 80005da:	4013      	ands	r3, r2
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	210c      	movs	r1, #12
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	701a      	strb	r2, [r3, #0]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80005e4:	1879      	adds	r1, r7, r1
 80005e6:	480a      	ldr	r0, [pc, #40]	; (8000610 <NRF24_read_registerN+0x58>)
 80005e8:	2364      	movs	r3, #100	; 0x64
 80005ea:	2201      	movs	r2, #1
 80005ec:	f002 fe0b 	bl	8003206 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80005f0:	1dbb      	adds	r3, r7, #6
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	6839      	ldr	r1, [r7, #0]
 80005f8:	4805      	ldr	r0, [pc, #20]	; (8000610 <NRF24_read_registerN+0x58>)
 80005fa:	2364      	movs	r3, #100	; 0x64
 80005fc:	f002 ff5a 	bl	80034b4 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000600:	2001      	movs	r0, #1
 8000602:	f7ff ff6b 	bl	80004dc <NRF24_csn>
}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	b004      	add	sp, #16
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	20000038 	.word	0x20000038

08000614 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	0002      	movs	r2, r0
 800061c:	1dfb      	adds	r3, r7, #7
 800061e:	701a      	strb	r2, [r3, #0]
 8000620:	1dbb      	adds	r3, r7, #6
 8000622:	1c0a      	adds	r2, r1, #0
 8000624:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000626:	2000      	movs	r0, #0
 8000628:	f7ff ff58 	bl	80004dc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800062c:	1dfb      	adds	r3, r7, #7
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2220      	movs	r2, #32
 8000632:	4313      	orrs	r3, r2
 8000634:	b2da      	uxtb	r2, r3
 8000636:	210c      	movs	r1, #12
 8000638:	187b      	adds	r3, r7, r1
 800063a:	701a      	strb	r2, [r3, #0]
	spiBuf[1] = value;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	1dba      	adds	r2, r7, #6
 8000640:	7812      	ldrb	r2, [r2, #0]
 8000642:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000644:	1879      	adds	r1, r7, r1
 8000646:	4806      	ldr	r0, [pc, #24]	; (8000660 <NRF24_write_register+0x4c>)
 8000648:	2364      	movs	r3, #100	; 0x64
 800064a:	2202      	movs	r2, #2
 800064c:	f002 fddb 	bl	8003206 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000650:	2001      	movs	r0, #1
 8000652:	f7ff ff43 	bl	80004dc <NRF24_csn>
}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b004      	add	sp, #16
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	20000038 	.word	0x20000038

08000664 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6039      	str	r1, [r7, #0]
 800066c:	0011      	movs	r1, r2
 800066e:	1dfb      	adds	r3, r7, #7
 8000670:	1c02      	adds	r2, r0, #0
 8000672:	701a      	strb	r2, [r3, #0]
 8000674:	1dbb      	adds	r3, r7, #6
 8000676:	1c0a      	adds	r2, r1, #0
 8000678:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800067a:	2000      	movs	r0, #0
 800067c:	f7ff ff2e 	bl	80004dc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000680:	1dfb      	adds	r3, r7, #7
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2220      	movs	r2, #32
 8000686:	4313      	orrs	r3, r2
 8000688:	b2da      	uxtb	r2, r3
 800068a:	210c      	movs	r1, #12
 800068c:	187b      	adds	r3, r7, r1
 800068e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000690:	1879      	adds	r1, r7, r1
 8000692:	480a      	ldr	r0, [pc, #40]	; (80006bc <NRF24_write_registerN+0x58>)
 8000694:	2364      	movs	r3, #100	; 0x64
 8000696:	2201      	movs	r2, #1
 8000698:	f002 fdb5 	bl	8003206 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800069c:	1dbb      	adds	r3, r7, #6
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	6839      	ldr	r1, [r7, #0]
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <NRF24_write_registerN+0x58>)
 80006a6:	2364      	movs	r3, #100	; 0x64
 80006a8:	f002 fdad 	bl	8003206 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80006ac:	2001      	movs	r0, #1
 80006ae:	f7ff ff15 	bl	80004dc <NRF24_csn>
}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b004      	add	sp, #16
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	20000038 	.word	0x20000038

080006c0 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	000a      	movs	r2, r1
 80006ca:	1cfb      	adds	r3, r7, #3
 80006cc:	701a      	strb	r2, [r3, #0]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 80006ce:	2000      	movs	r0, #0
 80006d0:	f7ff ff04 	bl	80004dc <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 80006d4:	210f      	movs	r1, #15
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	22a0      	movs	r2, #160	; 0xa0
 80006da:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 80006dc:	1879      	adds	r1, r7, r1
 80006de:	480a      	ldr	r0, [pc, #40]	; (8000708 <NRF24_write_payload+0x48>)
 80006e0:	2364      	movs	r3, #100	; 0x64
 80006e2:	2201      	movs	r2, #1
 80006e4:	f002 fd8f 	bl	8003206 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 80006e8:	1cfb      	adds	r3, r7, #3
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	6879      	ldr	r1, [r7, #4]
 80006f0:	4805      	ldr	r0, [pc, #20]	; (8000708 <NRF24_write_payload+0x48>)
 80006f2:	2364      	movs	r3, #100	; 0x64
 80006f4:	f002 fd87 	bl	8003206 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80006f8:	2001      	movs	r0, #1
 80006fa:	f7ff feef 	bl	80004dc <NRF24_csn>
}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	b004      	add	sp, #16
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	20000038 	.word	0x20000038

0800070c <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000710:	21ff      	movs	r1, #255	; 0xff
 8000712:	20e1      	movs	r0, #225	; 0xe1
 8000714:	f7ff ff7e 	bl	8000614 <NRF24_write_register>
}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000722:	21ff      	movs	r1, #255	; 0xff
 8000724:	20e2      	movs	r0, #226	; 0xe2
 8000726:	f7ff ff75 	bl	8000614 <NRF24_write_register>
}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000736:	1dfc      	adds	r4, r7, #7
 8000738:	2007      	movs	r0, #7
 800073a:	f7ff ff0f 	bl	800055c <NRF24_read_register>
 800073e:	0003      	movs	r3, r0
 8000740:	7023      	strb	r3, [r4, #0]
	return statReg;
 8000742:	1dfb      	adds	r3, r7, #7
 8000744:	781b      	ldrb	r3, [r3, #0]
}
 8000746:	0018      	movs	r0, r3
 8000748:	46bd      	mov	sp, r7
 800074a:	b003      	add	sp, #12
 800074c:	bd90      	pop	{r4, r7, pc}
	...

08000750 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000750:	b082      	sub	sp, #8
 8000752:	b590      	push	{r4, r7, lr}
 8000754:	46c6      	mov	lr, r8
 8000756:	b500      	push	{lr}
 8000758:	b084      	sub	sp, #16
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
 800075e:	0008      	movs	r0, r1
 8000760:	0011      	movs	r1, r2
 8000762:	2204      	movs	r2, #4
 8000764:	2418      	movs	r4, #24
 8000766:	46a4      	mov	ip, r4
 8000768:	2408      	movs	r4, #8
 800076a:	46a0      	mov	r8, r4
 800076c:	44b8      	add	r8, r7
 800076e:	44c4      	add	ip, r8
 8000770:	4462      	add	r2, ip
 8000772:	6013      	str	r3, [r2, #0]
 8000774:	1cbb      	adds	r3, r7, #2
 8000776:	1c02      	adds	r2, r0, #0
 8000778:	801a      	strh	r2, [r3, #0]
 800077a:	003b      	movs	r3, r7
 800077c:	1c0a      	adds	r2, r1, #0
 800077e:	801a      	strh	r2, [r3, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000780:	4a73      	ldr	r2, [pc, #460]	; (8000950 <NRF24_begin+0x200>)
 8000782:	2304      	movs	r3, #4
 8000784:	2118      	movs	r1, #24
 8000786:	468c      	mov	ip, r1
 8000788:	2108      	movs	r1, #8
 800078a:	4688      	mov	r8, r1
 800078c:	44b8      	add	r8, r7
 800078e:	44c4      	add	ip, r8
 8000790:	4463      	add	r3, ip
 8000792:	0010      	movs	r0, r2
 8000794:	0019      	movs	r1, r3
 8000796:	2358      	movs	r3, #88	; 0x58
 8000798:	001a      	movs	r2, r3
 800079a:	f003 facf 	bl	8003d3c <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 800079e:	4b6d      	ldr	r3, [pc, #436]	; (8000954 <NRF24_begin+0x204>)
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	601a      	str	r2, [r3, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 80007a4:	4b6c      	ldr	r3, [pc, #432]	; (8000958 <NRF24_begin+0x208>)
 80007a6:	1cba      	adds	r2, r7, #2
 80007a8:	8812      	ldrh	r2, [r2, #0]
 80007aa:	801a      	strh	r2, [r3, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 80007ac:	4b6b      	ldr	r3, [pc, #428]	; (800095c <NRF24_begin+0x20c>)
 80007ae:	003a      	movs	r2, r7
 80007b0:	8812      	ldrh	r2, [r2, #0]
 80007b2:	801a      	strh	r2, [r3, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 80007b4:	2001      	movs	r0, #1
 80007b6:	f7ff fe91 	bl	80004dc <NRF24_csn>
	NRF24_ce(0);
 80007ba:	2000      	movs	r0, #0
 80007bc:	f7ff feae 	bl	800051c <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 80007c0:	2005      	movs	r0, #5
 80007c2:	f001 f963 	bl	8001a8c <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 80007c6:	2108      	movs	r1, #8
 80007c8:	2000      	movs	r0, #0
 80007ca:	f7ff ff23 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80007ce:	213f      	movs	r1, #63	; 0x3f
 80007d0:	2001      	movs	r0, #1
 80007d2:	f7ff ff1f 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 80007d6:	2103      	movs	r1, #3
 80007d8:	2002      	movs	r0, #2
 80007da:	f7ff ff1b 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80007de:	2103      	movs	r1, #3
 80007e0:	2003      	movs	r0, #3
 80007e2:	f7ff ff17 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80007e6:	2103      	movs	r1, #3
 80007e8:	2004      	movs	r0, #4
 80007ea:	f7ff ff13 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80007ee:	2102      	movs	r1, #2
 80007f0:	2005      	movs	r0, #5
 80007f2:	f7ff ff0f 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80007f6:	210f      	movs	r1, #15
 80007f8:	2006      	movs	r0, #6
 80007fa:	f7ff ff0b 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80007fe:	210e      	movs	r1, #14
 8000800:	2007      	movs	r0, #7
 8000802:	f7ff ff07 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000806:	2100      	movs	r1, #0
 8000808:	2008      	movs	r0, #8
 800080a:	f7ff ff03 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 800080e:	2100      	movs	r1, #0
 8000810:	2009      	movs	r0, #9
 8000812:	f7ff feff 	bl	8000614 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000816:	2108      	movs	r1, #8
 8000818:	187b      	adds	r3, r7, r1
 800081a:	22e7      	movs	r2, #231	; 0xe7
 800081c:	711a      	strb	r2, [r3, #4]
 800081e:	187b      	adds	r3, r7, r1
 8000820:	22e7      	movs	r2, #231	; 0xe7
 8000822:	70da      	strb	r2, [r3, #3]
 8000824:	187b      	adds	r3, r7, r1
 8000826:	22e7      	movs	r2, #231	; 0xe7
 8000828:	709a      	strb	r2, [r3, #2]
 800082a:	187b      	adds	r3, r7, r1
 800082c:	22e7      	movs	r2, #231	; 0xe7
 800082e:	705a      	strb	r2, [r3, #1]
 8000830:	187b      	adds	r3, r7, r1
 8000832:	22e7      	movs	r2, #231	; 0xe7
 8000834:	701a      	strb	r2, [r3, #0]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000836:	000c      	movs	r4, r1
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2205      	movs	r2, #5
 800083c:	0019      	movs	r1, r3
 800083e:	200a      	movs	r0, #10
 8000840:	f7ff ff10 	bl	8000664 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8000844:	0021      	movs	r1, r4
 8000846:	187b      	adds	r3, r7, r1
 8000848:	22c2      	movs	r2, #194	; 0xc2
 800084a:	711a      	strb	r2, [r3, #4]
 800084c:	187b      	adds	r3, r7, r1
 800084e:	22c2      	movs	r2, #194	; 0xc2
 8000850:	70da      	strb	r2, [r3, #3]
 8000852:	187b      	adds	r3, r7, r1
 8000854:	22c2      	movs	r2, #194	; 0xc2
 8000856:	709a      	strb	r2, [r3, #2]
 8000858:	187b      	adds	r3, r7, r1
 800085a:	22c2      	movs	r2, #194	; 0xc2
 800085c:	705a      	strb	r2, [r3, #1]
 800085e:	187b      	adds	r3, r7, r1
 8000860:	22c2      	movs	r2, #194	; 0xc2
 8000862:	701a      	strb	r2, [r3, #0]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000864:	000c      	movs	r4, r1
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2205      	movs	r2, #5
 800086a:	0019      	movs	r1, r3
 800086c:	200b      	movs	r0, #11
 800086e:	f7ff fef9 	bl	8000664 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000872:	21c3      	movs	r1, #195	; 0xc3
 8000874:	200c      	movs	r0, #12
 8000876:	f7ff fecd 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 800087a:	21c4      	movs	r1, #196	; 0xc4
 800087c:	200d      	movs	r0, #13
 800087e:	f7ff fec9 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000882:	21c5      	movs	r1, #197	; 0xc5
 8000884:	200e      	movs	r0, #14
 8000886:	f7ff fec5 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 800088a:	21c6      	movs	r1, #198	; 0xc6
 800088c:	200f      	movs	r0, #15
 800088e:	f7ff fec1 	bl	8000614 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000892:	0021      	movs	r1, r4
 8000894:	187b      	adds	r3, r7, r1
 8000896:	22e7      	movs	r2, #231	; 0xe7
 8000898:	711a      	strb	r2, [r3, #4]
 800089a:	187b      	adds	r3, r7, r1
 800089c:	22e7      	movs	r2, #231	; 0xe7
 800089e:	70da      	strb	r2, [r3, #3]
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	22e7      	movs	r2, #231	; 0xe7
 80008a4:	709a      	strb	r2, [r3, #2]
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	22e7      	movs	r2, #231	; 0xe7
 80008aa:	705a      	strb	r2, [r3, #1]
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	22e7      	movs	r2, #231	; 0xe7
 80008b0:	701a      	strb	r2, [r3, #0]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	2205      	movs	r2, #5
 80008b6:	0019      	movs	r1, r3
 80008b8:	2010      	movs	r0, #16
 80008ba:	f7ff fed3 	bl	8000664 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80008be:	2100      	movs	r1, #0
 80008c0:	2011      	movs	r0, #17
 80008c2:	f7ff fea7 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 80008c6:	2100      	movs	r1, #0
 80008c8:	2012      	movs	r0, #18
 80008ca:	f7ff fea3 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80008ce:	2100      	movs	r1, #0
 80008d0:	2013      	movs	r0, #19
 80008d2:	f7ff fe9f 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 80008d6:	2100      	movs	r1, #0
 80008d8:	2014      	movs	r0, #20
 80008da:	f7ff fe9b 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 80008de:	2100      	movs	r1, #0
 80008e0:	2015      	movs	r0, #21
 80008e2:	f7ff fe97 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80008e6:	2100      	movs	r1, #0
 80008e8:	2016      	movs	r0, #22
 80008ea:	f7ff fe93 	bl	8000614 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 80008ee:	f000 faff 	bl	8000ef0 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80008f2:	2100      	movs	r1, #0
 80008f4:	201c      	movs	r0, #28
 80008f6:	f7ff fe8d 	bl	8000614 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80008fa:	2100      	movs	r1, #0
 80008fc:	201d      	movs	r0, #29
 80008fe:	f7ff fe89 	bl	8000614 <NRF24_write_register>
//	printRadioSettings();
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000902:	210f      	movs	r1, #15
 8000904:	200f      	movs	r0, #15
 8000906:	f000 f8c1 	bl	8000a8c <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800090a:	2003      	movs	r0, #3
 800090c:	f000 f951 	bl	8000bb2 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000910:	2001      	movs	r0, #1
 8000912:	f000 f99f 	bl	8000c54 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000916:	2002      	movs	r0, #2
 8000918:	f000 f9f8 	bl	8000d0c <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 800091c:	f000 f916 	bl	8000b4c <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000920:	2020      	movs	r0, #32
 8000922:	f000 f8ed 	bl	8000b00 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000926:	f000 fada 	bl	8000ede <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 800092a:	204c      	movs	r0, #76	; 0x4c
 800092c:	f000 f8cc 	bl	8000ac8 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000930:	f7ff feec 	bl	800070c <NRF24_flush_tx>
	NRF24_flush_rx();
 8000934:	f7ff fef3 	bl	800071e <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000938:	f000 fa20 	bl	8000d7c <NRF24_powerDown>
	
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	b004      	add	sp, #16
 8000942:	bc80      	pop	{r7}
 8000944:	46b8      	mov	r8, r7
 8000946:	bc90      	pop	{r4, r7}
 8000948:	bc08      	pop	{r3}
 800094a:	b002      	add	sp, #8
 800094c:	4718      	bx	r3
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	20000038 	.word	0x20000038
 8000954:	20000030 	.word	0x20000030
 8000958:	20000034 	.word	0x20000034
 800095c:	20000036 	.word	0x20000036

08000960 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000964:	2000      	movs	r0, #0
 8000966:	f7ff fdd9 	bl	800051c <NRF24_ce>
	NRF24_flush_tx();
 800096a:	f7ff fecf 	bl	800070c <NRF24_flush_tx>
	NRF24_flush_rx();
 800096e:	f7ff fed6 	bl	800071e <NRF24_flush_rx>
}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8000978:	b5b0      	push	{r4, r5, r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	000a      	movs	r2, r1
 8000982:	1cfb      	adds	r3, r7, #3
 8000984:	701a      	strb	r2, [r3, #0]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8000986:	f000 faaa 	bl	8000ede <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 800098a:	1cfb      	adds	r3, r7, #3
 800098c:	781a      	ldrb	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	0011      	movs	r1, r2
 8000992:	0018      	movs	r0, r3
 8000994:	f000 fa3d 	bl	8000e12 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8000998:	f001 f86e 	bl	8001a78 <HAL_GetTick>
 800099c:	0003      	movs	r3, r0
 800099e:	617b      	str	r3, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 80009a0:	230a      	movs	r3, #10
 80009a2:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 80009a4:	230d      	movs	r3, #13
 80009a6:	18fb      	adds	r3, r7, r3
 80009a8:	2201      	movs	r2, #1
 80009aa:	0019      	movs	r1, r3
 80009ac:	2008      	movs	r0, #8
 80009ae:	f7ff fe03 	bl	80005b8 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 80009b2:	250f      	movs	r5, #15
 80009b4:	197c      	adds	r4, r7, r5
 80009b6:	f7ff febb 	bl	8000730 <NRF24_get_status>
 80009ba:	0003      	movs	r3, r0
 80009bc:	7023      	strb	r3, [r4, #0]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 80009be:	197b      	adds	r3, r7, r5
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2230      	movs	r2, #48	; 0x30
 80009c4:	4013      	ands	r3, r2
 80009c6:	d107      	bne.n	80009d8 <NRF24_write+0x60>
 80009c8:	f001 f856 	bl	8001a78 <HAL_GetTick>
 80009cc:	0002      	movs	r2, r0
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d8e5      	bhi.n	80009a4 <NRF24_write+0x2c>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 80009d8:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <NRF24_write+0xa4>)
 80009da:	230b      	movs	r3, #11
 80009dc:	18f9      	adds	r1, r7, r3
 80009de:	240c      	movs	r4, #12
 80009e0:	193b      	adds	r3, r7, r4
 80009e2:	0018      	movs	r0, r3
 80009e4:	f000 fa48 	bl	8000e78 <NRF24_whatHappened>
	retStatus = tx_ok;
 80009e8:	230e      	movs	r3, #14
 80009ea:	18fb      	adds	r3, r7, r3
 80009ec:	193a      	adds	r2, r7, r4
 80009ee:	7812      	ldrb	r2, [r2, #0]
 80009f0:	701a      	strb	r2, [r3, #0]
	if ( ack_payload_available )
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <NRF24_write+0xa4>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d005      	beq.n	8000a06 <NRF24_write+0x8e>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 80009fa:	f000 f89d 	bl	8000b38 <NRF24_getDynamicPayloadSize>
 80009fe:	0003      	movs	r3, r0
 8000a00:	001a      	movs	r2, r3
 8000a02:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <NRF24_write+0xa8>)
 8000a04:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8000a06:	f000 f80d 	bl	8000a24 <NRF24_available>
	NRF24_flush_tx();
 8000a0a:	f7ff fe7f 	bl	800070c <NRF24_flush_tx>
	return retStatus;
 8000a0e:	230e      	movs	r3, #14
 8000a10:	18fb      	adds	r3, r7, r3
 8000a12:	781b      	ldrb	r3, [r3, #0]
}
 8000a14:	0018      	movs	r0, r3
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b006      	add	sp, #24
 8000a1a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a1c:	20000028 	.word	0x20000028
 8000a20:	20000029 	.word	0x20000029

08000a24 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f000 f9b9 	bl	8000da0 <NRF24_availablePipe>
 8000a2e:	0003      	movs	r3, r0
}
 8000a30:	0018      	movs	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6038      	str	r0, [r7, #0]
 8000a40:	6079      	str	r1, [r7, #4]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000a42:	003b      	movs	r3, r7
 8000a44:	2205      	movs	r2, #5
 8000a46:	0019      	movs	r1, r3
 8000a48:	200a      	movs	r0, #10
 8000a4a:	f7ff fe0b 	bl	8000664 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000a4e:	003b      	movs	r3, r7
 8000a50:	2205      	movs	r2, #5
 8000a52:	0019      	movs	r1, r3
 8000a54:	2010      	movs	r0, #16
 8000a56:	f7ff fe05 	bl	8000664 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8000a5a:	210f      	movs	r1, #15
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	2220      	movs	r2, #32
 8000a60:	701a      	strb	r2, [r3, #0]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <NRF24_openWritingPipe+0x50>)
 8000a64:	781a      	ldrb	r2, [r3, #0]
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	1c10      	adds	r0, r2, #0
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	b2d9      	uxtb	r1, r3
 8000a6e:	b2c2      	uxtb	r2, r0
 8000a70:	4291      	cmp	r1, r2
 8000a72:	d900      	bls.n	8000a76 <NRF24_openWritingPipe+0x3e>
 8000a74:	1c03      	adds	r3, r0, #0
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	0019      	movs	r1, r3
 8000a7a:	2011      	movs	r0, #17
 8000a7c:	f7ff fdca 	bl	8000614 <NRF24_write_register>
}
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b004      	add	sp, #16
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	2000002a 	.word	0x2000002a

08000a8c <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	0002      	movs	r2, r0
 8000a94:	1dfb      	adds	r3, r7, #7
 8000a96:	701a      	strb	r2, [r3, #0]
 8000a98:	1dbb      	adds	r3, r7, #6
 8000a9a:	1c0a      	adds	r2, r1, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	011b      	lsls	r3, r3, #4
 8000aa4:	b25a      	sxtb	r2, r3
 8000aa6:	1dbb      	adds	r3, r7, #6
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	b25b      	sxtb	r3, r3
 8000aac:	210f      	movs	r1, #15
 8000aae:	400b      	ands	r3, r1
 8000ab0:	b25b      	sxtb	r3, r3
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	b25b      	sxtb	r3, r3
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	0019      	movs	r1, r3
 8000aba:	2004      	movs	r0, #4
 8000abc:	f7ff fdaa 	bl	8000614 <NRF24_write_register>
}
 8000ac0:	46c0      	nop			; (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b002      	add	sp, #8
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	0002      	movs	r2, r0
 8000ad0:	1dfb      	adds	r3, r7, #7
 8000ad2:	701a      	strb	r2, [r3, #0]
	const uint8_t max_channel = 127;
 8000ad4:	210f      	movs	r1, #15
 8000ad6:	187b      	adds	r3, r7, r1
 8000ad8:	227f      	movs	r2, #127	; 0x7f
 8000ada:	701a      	strb	r2, [r3, #0]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	1dfa      	adds	r2, r7, #7
 8000ae0:	7810      	ldrb	r0, [r2, #0]
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	b2d9      	uxtb	r1, r3
 8000ae6:	b2c2      	uxtb	r2, r0
 8000ae8:	4291      	cmp	r1, r2
 8000aea:	d900      	bls.n	8000aee <NRF24_setChannel+0x26>
 8000aec:	1c03      	adds	r3, r0, #0
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	0019      	movs	r1, r3
 8000af2:	2005      	movs	r0, #5
 8000af4:	f7ff fd8e 	bl	8000614 <NRF24_write_register>
}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b004      	add	sp, #16
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	0002      	movs	r2, r0
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	701a      	strb	r2, [r3, #0]
	const uint8_t max_payload_size = 32;
 8000b0c:	210f      	movs	r1, #15
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2220      	movs	r2, #32
 8000b12:	701a      	strb	r2, [r3, #0]
  payload_size = MIN(size,max_payload_size);
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	1dfa      	adds	r2, r7, #7
 8000b18:	7810      	ldrb	r0, [r2, #0]
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b2d9      	uxtb	r1, r3
 8000b1e:	b2c2      	uxtb	r2, r0
 8000b20:	4291      	cmp	r1, r2
 8000b22:	d900      	bls.n	8000b26 <NRF24_setPayloadSize+0x26>
 8000b24:	1c03      	adds	r3, r0, #0
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	4b02      	ldr	r3, [pc, #8]	; (8000b34 <NRF24_setPayloadSize+0x34>)
 8000b2a:	701a      	strb	r2, [r3, #0]
}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b004      	add	sp, #16
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	2000002a 	.word	0x2000002a

08000b38 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000b3c:	2060      	movs	r0, #96	; 0x60
 8000b3e:	f7ff fd0d 	bl	800055c <NRF24_read_register>
 8000b42:	0003      	movs	r3, r0
}
 8000b44:	0018      	movs	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000b50:	201d      	movs	r0, #29
 8000b52:	f7ff fd03 	bl	800055c <NRF24_read_register>
 8000b56:	0003      	movs	r3, r0
 8000b58:	001a      	movs	r2, r3
 8000b5a:	2304      	movs	r3, #4
 8000b5c:	439a      	bics	r2, r3
 8000b5e:	0013      	movs	r3, r2
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	0019      	movs	r1, r3
 8000b64:	201d      	movs	r0, #29
 8000b66:	f7ff fd55 	bl	8000614 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	201c      	movs	r0, #28
 8000b6e:	f7ff fd51 	bl	8000614 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000b72:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <NRF24_disableDynamicPayloads+0x34>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]
}
 8000b78:	46c0      	nop			; (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	2000002b 	.word	0x2000002b

08000b84 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	0002      	movs	r2, r0
 8000b8c:	1dfb      	adds	r3, r7, #7
 8000b8e:	701a      	strb	r2, [r3, #0]
	if ( enable )
 8000b90:	1dfb      	adds	r3, r7, #7
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d004      	beq.n	8000ba2 <NRF24_setAutoAck+0x1e>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000b98:	213f      	movs	r1, #63	; 0x3f
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f7ff fd3a 	bl	8000614 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000ba0:	e003      	b.n	8000baa <NRF24_setAutoAck+0x26>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f7ff fd35 	bl	8000614 <NRF24_write_register>
}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b002      	add	sp, #8
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000bb2:	b5b0      	push	{r4, r5, r7, lr}
 8000bb4:	b084      	sub	sp, #16
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	0002      	movs	r2, r0
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	701a      	strb	r2, [r3, #0]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000bbe:	250f      	movs	r5, #15
 8000bc0:	197c      	adds	r4, r7, r5
 8000bc2:	2006      	movs	r0, #6
 8000bc4:	f7ff fcca 	bl	800055c <NRF24_read_register>
 8000bc8:	0003      	movs	r3, r0
 8000bca:	7023      	strb	r3, [r4, #0]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000bcc:	0028      	movs	r0, r5
 8000bce:	183b      	adds	r3, r7, r0
 8000bd0:	183a      	adds	r2, r7, r0
 8000bd2:	7812      	ldrb	r2, [r2, #0]
 8000bd4:	2106      	movs	r1, #6
 8000bd6:	438a      	bics	r2, r1
 8000bd8:	701a      	strb	r2, [r3, #0]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b03      	cmp	r3, #3
 8000be0:	d106      	bne.n	8000bf0 <NRF24_setPALevel+0x3e>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000be2:	183b      	adds	r3, r7, r0
 8000be4:	183a      	adds	r2, r7, r0
 8000be6:	7812      	ldrb	r2, [r2, #0]
 8000be8:	2106      	movs	r1, #6
 8000bea:	430a      	orrs	r2, r1
 8000bec:	701a      	strb	r2, [r3, #0]
 8000bee:	e026      	b.n	8000c3e <NRF24_setPALevel+0x8c>
  }
  else if ( level == RF24_PA_m6dB )
 8000bf0:	1dfb      	adds	r3, r7, #7
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d107      	bne.n	8000c08 <NRF24_setPALevel+0x56>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000bf8:	220f      	movs	r2, #15
 8000bfa:	18bb      	adds	r3, r7, r2
 8000bfc:	18ba      	adds	r2, r7, r2
 8000bfe:	7812      	ldrb	r2, [r2, #0]
 8000c00:	2104      	movs	r1, #4
 8000c02:	430a      	orrs	r2, r1
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	e01a      	b.n	8000c3e <NRF24_setPALevel+0x8c>
  }
  else if ( level == RF24_PA_m12dB )
 8000c08:	1dfb      	adds	r3, r7, #7
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d107      	bne.n	8000c20 <NRF24_setPALevel+0x6e>
  {
    setup |= _BV(RF_PWR_LOW);
 8000c10:	220f      	movs	r2, #15
 8000c12:	18bb      	adds	r3, r7, r2
 8000c14:	18ba      	adds	r2, r7, r2
 8000c16:	7812      	ldrb	r2, [r2, #0]
 8000c18:	2102      	movs	r1, #2
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	701a      	strb	r2, [r3, #0]
 8000c1e:	e00e      	b.n	8000c3e <NRF24_setPALevel+0x8c>
  }
  else if ( level == RF24_PA_m18dB )
 8000c20:	1dfb      	adds	r3, r7, #7
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d00a      	beq.n	8000c3e <NRF24_setPALevel+0x8c>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000c28:	1dfb      	adds	r3, r7, #7
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b04      	cmp	r3, #4
 8000c2e:	d106      	bne.n	8000c3e <NRF24_setPALevel+0x8c>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000c30:	220f      	movs	r2, #15
 8000c32:	18bb      	adds	r3, r7, r2
 8000c34:	18ba      	adds	r2, r7, r2
 8000c36:	7812      	ldrb	r2, [r2, #0]
 8000c38:	2106      	movs	r1, #6
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	701a      	strb	r2, [r3, #0]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000c3e:	230f      	movs	r3, #15
 8000c40:	18fb      	adds	r3, r7, r3
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	0019      	movs	r1, r3
 8000c46:	2006      	movs	r0, #6
 8000c48:	f7ff fce4 	bl	8000614 <NRF24_write_register>
}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b004      	add	sp, #16
 8000c52:	bdb0      	pop	{r4, r5, r7, pc}

08000c54 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000c54:	b5b0      	push	{r4, r5, r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	0002      	movs	r2, r0
 8000c5c:	1dfb      	adds	r3, r7, #7
 8000c5e:	701a      	strb	r2, [r3, #0]
	bool result = false;
 8000c60:	230f      	movs	r3, #15
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000c68:	250e      	movs	r5, #14
 8000c6a:	197c      	adds	r4, r7, r5
 8000c6c:	2006      	movs	r0, #6
 8000c6e:	f7ff fc75 	bl	800055c <NRF24_read_register>
 8000c72:	0003      	movs	r3, r0
 8000c74:	7023      	strb	r3, [r4, #0]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000c76:	4b24      	ldr	r3, [pc, #144]	; (8000d08 <NRF24_setDataRate+0xb4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000c7c:	0028      	movs	r0, r5
 8000c7e:	183b      	adds	r3, r7, r0
 8000c80:	183a      	adds	r2, r7, r0
 8000c82:	7812      	ldrb	r2, [r2, #0]
 8000c84:	2128      	movs	r1, #40	; 0x28
 8000c86:	438a      	bics	r2, r1
 8000c88:	701a      	strb	r2, [r3, #0]
  if( speed == RF24_250KBPS )
 8000c8a:	1dfb      	adds	r3, r7, #7
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d109      	bne.n	8000ca6 <NRF24_setDataRate+0x52>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000c92:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <NRF24_setDataRate+0xb4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000c98:	183b      	adds	r3, r7, r0
 8000c9a:	183a      	adds	r2, r7, r0
 8000c9c:	7812      	ldrb	r2, [r2, #0]
 8000c9e:	2120      	movs	r1, #32
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	701a      	strb	r2, [r3, #0]
 8000ca4:	e011      	b.n	8000cca <NRF24_setDataRate+0x76>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d10a      	bne.n	8000cc4 <NRF24_setDataRate+0x70>
    {
      wide_band = true ;
 8000cae:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <NRF24_setDataRate+0xb4>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000cb4:	220e      	movs	r2, #14
 8000cb6:	18bb      	adds	r3, r7, r2
 8000cb8:	18ba      	adds	r2, r7, r2
 8000cba:	7812      	ldrb	r2, [r2, #0]
 8000cbc:	2108      	movs	r1, #8
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	701a      	strb	r2, [r3, #0]
 8000cc2:	e002      	b.n	8000cca <NRF24_setDataRate+0x76>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000cc4:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <NRF24_setDataRate+0xb4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000cca:	240e      	movs	r4, #14
 8000ccc:	193b      	adds	r3, r7, r4
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	0019      	movs	r1, r3
 8000cd2:	2006      	movs	r0, #6
 8000cd4:	f7ff fc9e 	bl	8000614 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000cd8:	2006      	movs	r0, #6
 8000cda:	f7ff fc3f 	bl	800055c <NRF24_read_register>
 8000cde:	0003      	movs	r3, r0
 8000ce0:	001a      	movs	r2, r3
 8000ce2:	193b      	adds	r3, r7, r4
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d104      	bne.n	8000cf4 <NRF24_setDataRate+0xa0>
  {
    result = true;
 8000cea:	230f      	movs	r3, #15
 8000cec:	18fb      	adds	r3, r7, r3
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]
 8000cf2:	e002      	b.n	8000cfa <NRF24_setDataRate+0xa6>
  }
  else
  {
    wide_band = false;
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <NRF24_setDataRate+0xb4>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000cfa:	230f      	movs	r3, #15
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	781b      	ldrb	r3, [r3, #0]
}
 8000d00:	0018      	movs	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b004      	add	sp, #16
 8000d06:	bdb0      	pop	{r4, r5, r7, pc}
 8000d08:	2000002c 	.word	0x2000002c

08000d0c <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	0002      	movs	r2, r0
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	701a      	strb	r2, [r3, #0]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f7ff fc1f 	bl	800055c <NRF24_read_register>
 8000d1e:	0003      	movs	r3, r0
 8000d20:	0019      	movs	r1, r3
 8000d22:	200f      	movs	r0, #15
 8000d24:	183b      	adds	r3, r7, r0
 8000d26:	220c      	movs	r2, #12
 8000d28:	4391      	bics	r1, r2
 8000d2a:	000a      	movs	r2, r1
 8000d2c:	701a      	strb	r2, [r3, #0]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d017      	beq.n	8000d66 <NRF24_setCRCLength+0x5a>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8000d36:	1dfb      	adds	r3, r7, #7
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d106      	bne.n	8000d4c <NRF24_setCRCLength+0x40>
  {
    config |= _BV(BIT_EN_CRC);
 8000d3e:	183b      	adds	r3, r7, r0
 8000d40:	183a      	adds	r2, r7, r0
 8000d42:	7812      	ldrb	r2, [r2, #0]
 8000d44:	2108      	movs	r1, #8
 8000d46:	430a      	orrs	r2, r1
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	e00c      	b.n	8000d66 <NRF24_setCRCLength+0x5a>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000d4c:	200f      	movs	r0, #15
 8000d4e:	183b      	adds	r3, r7, r0
 8000d50:	183a      	adds	r2, r7, r0
 8000d52:	7812      	ldrb	r2, [r2, #0]
 8000d54:	2108      	movs	r1, #8
 8000d56:	430a      	orrs	r2, r1
 8000d58:	701a      	strb	r2, [r3, #0]
    config |= _BV( BIT_CRCO );
 8000d5a:	183b      	adds	r3, r7, r0
 8000d5c:	183a      	adds	r2, r7, r0
 8000d5e:	7812      	ldrb	r2, [r2, #0]
 8000d60:	2104      	movs	r1, #4
 8000d62:	430a      	orrs	r2, r1
 8000d64:	701a      	strb	r2, [r3, #0]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000d66:	230f      	movs	r3, #15
 8000d68:	18fb      	adds	r3, r7, r3
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	0019      	movs	r1, r3
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f7ff fc50 	bl	8000614 <NRF24_write_register>
}
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b004      	add	sp, #16
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000d80:	2000      	movs	r0, #0
 8000d82:	f7ff fbeb 	bl	800055c <NRF24_read_register>
 8000d86:	0003      	movs	r3, r0
 8000d88:	001a      	movs	r2, r3
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	439a      	bics	r2, r3
 8000d8e:	0013      	movs	r3, r2
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	0019      	movs	r1, r3
 8000d94:	2000      	movs	r0, #0
 8000d96:	f7ff fc3d 	bl	8000614 <NRF24_write_register>
}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000da0:	b5b0      	push	{r4, r5, r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000da8:	250f      	movs	r5, #15
 8000daa:	197c      	adds	r4, r7, r5
 8000dac:	f7ff fcc0 	bl	8000730 <NRF24_get_status>
 8000db0:	0003      	movs	r3, r0
 8000db2:	7023      	strb	r3, [r4, #0]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000db4:	0028      	movs	r0, r5
 8000db6:	183b      	adds	r3, r7, r0
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2240      	movs	r2, #64	; 0x40
 8000dbc:	401a      	ands	r2, r3
 8000dbe:	240e      	movs	r4, #14
 8000dc0:	193b      	adds	r3, r7, r4
 8000dc2:	1e51      	subs	r1, r2, #1
 8000dc4:	418a      	sbcs	r2, r1
 8000dc6:	701a      	strb	r2, [r3, #0]

  if (result)
 8000dc8:	193b      	adds	r3, r7, r4
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d019      	beq.n	8000e04 <NRF24_availablePipe+0x64>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d008      	beq.n	8000de8 <NRF24_availablePipe+0x48>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000dd6:	183b      	adds	r3, r7, r0
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	085b      	lsrs	r3, r3, #1
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2207      	movs	r2, #7
 8000de0:	4013      	ands	r3, r2
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000de8:	2140      	movs	r1, #64	; 0x40
 8000dea:	2007      	movs	r0, #7
 8000dec:	f7ff fc12 	bl	8000614 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000df0:	230f      	movs	r3, #15
 8000df2:	18fb      	adds	r3, r7, r3
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2220      	movs	r2, #32
 8000df8:	4013      	ands	r3, r2
 8000dfa:	d003      	beq.n	8000e04 <NRF24_availablePipe+0x64>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000dfc:	2120      	movs	r1, #32
 8000dfe:	2007      	movs	r0, #7
 8000e00:	f7ff fc08 	bl	8000614 <NRF24_write_register>
    }
  }
  return result;
 8000e04:	230e      	movs	r3, #14
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	781b      	ldrb	r3, [r3, #0]
}
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	b004      	add	sp, #16
 8000e10:	bdb0      	pop	{r4, r5, r7, pc}

08000e12 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
 8000e1a:	000a      	movs	r2, r1
 8000e1c:	1cfb      	adds	r3, r7, #3
 8000e1e:	701a      	strb	r2, [r3, #0]
  // Transmitter power-up
  NRF24_ce(0);
 8000e20:	2000      	movs	r0, #0
 8000e22:	f7ff fb7b 	bl	800051c <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8000e26:	2000      	movs	r0, #0
 8000e28:	f7ff fb98 	bl	800055c <NRF24_read_register>
 8000e2c:	0003      	movs	r3, r0
 8000e2e:	001a      	movs	r2, r3
 8000e30:	2302      	movs	r3, #2
 8000e32:	4313      	orrs	r3, r2
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2201      	movs	r2, #1
 8000e38:	4393      	bics	r3, r2
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	0019      	movs	r1, r3
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f7ff fbe8 	bl	8000614 <NRF24_write_register>
  NRF24_ce(1);
 8000e44:	2001      	movs	r0, #1
 8000e46:	f7ff fb69 	bl	800051c <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8000e4a:	2096      	movs	r0, #150	; 0x96
 8000e4c:	f7ff fb26 	bl	800049c <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8000e50:	1cfb      	adds	r3, r7, #3
 8000e52:	781a      	ldrb	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	0011      	movs	r1, r2
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff fc31 	bl	80006c0 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8000e5e:	2001      	movs	r0, #1
 8000e60:	f7ff fb5c 	bl	800051c <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8000e64:	200f      	movs	r0, #15
 8000e66:	f7ff fb19 	bl	800049c <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f7ff fb56 	bl	800051c <NRF24_ce>
}
 8000e70:	46c0      	nop			; (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b002      	add	sp, #8
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8000e78:	b5b0      	push	{r4, r5, r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000e84:	2517      	movs	r5, #23
 8000e86:	197c      	adds	r4, r7, r5
 8000e88:	f7ff fc52 	bl	8000730 <NRF24_get_status>
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	7023      	strb	r3, [r4, #0]
	*tx_ok = 0;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000e96:	2170      	movs	r1, #112	; 0x70
 8000e98:	2007      	movs	r0, #7
 8000e9a:	f7ff fbbb 	bl	8000614 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8000e9e:	0029      	movs	r1, r5
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2220      	movs	r2, #32
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	1e5a      	subs	r2, r3, #1
 8000eaa:	4193      	sbcs	r3, r2
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8000eb2:	187b      	adds	r3, r7, r1
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2210      	movs	r2, #16
 8000eb8:	4013      	ands	r3, r2
 8000eba:	1e5a      	subs	r2, r3, #1
 8000ebc:	4193      	sbcs	r3, r2
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2240      	movs	r2, #64	; 0x40
 8000eca:	4013      	ands	r3, r2
 8000ecc:	1e5a      	subs	r2, r3, #1
 8000ece:	4193      	sbcs	r3, r2
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	701a      	strb	r2, [r3, #0]
}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b006      	add	sp, #24
 8000edc:	bdb0      	pop	{r4, r5, r7, pc}

08000ede <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000ee2:	2170      	movs	r1, #112	; 0x70
 8000ee4:	2007      	movs	r0, #7
 8000ee6:	f7ff fb95 	bl	8000614 <NRF24_write_register>
}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f7ff faf0 	bl	80004dc <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	2250      	movs	r2, #80	; 0x50
 8000f00:	701a      	strb	r2, [r3, #0]
	cmdRxBuf[1] = 0x73;
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2273      	movs	r2, #115	; 0x73
 8000f06:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000f08:	1d39      	adds	r1, r7, #4
 8000f0a:	4806      	ldr	r0, [pc, #24]	; (8000f24 <NRF24_ACTIVATE_cmd+0x34>)
 8000f0c:	2364      	movs	r3, #100	; 0x64
 8000f0e:	2202      	movs	r2, #2
 8000f10:	f002 f979 	bl	8003206 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f7ff fae1 	bl	80004dc <NRF24_csn>
}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b002      	add	sp, #8
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	20000038 	.word	0x20000038

08000f28 <send_RF_packet>:
	HAL_Delay(100);
	NRF24_ce(1);
}

void send_RF_packet(uint8_t command, uint64_t addr)
{
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	0001      	movs	r1, r0
 8000f30:	603a      	str	r2, [r7, #0]
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	200f      	movs	r0, #15
 8000f36:	183b      	adds	r3, r7, r0
 8000f38:	1c0a      	adds	r2, r1, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
  uint8_t tx_data[5] = "Hello";
 8000f3c:	2410      	movs	r4, #16
 8000f3e:	193b      	adds	r3, r7, r4
 8000f40:	4a1e      	ldr	r2, [pc, #120]	; (8000fbc <send_RF_packet+0x94>)
 8000f42:	6811      	ldr	r1, [r2, #0]
 8000f44:	6019      	str	r1, [r3, #0]
 8000f46:	7912      	ldrb	r2, [r2, #4]
 8000f48:	711a      	strb	r2, [r3, #4]
  tx_data[0] = command;
 8000f4a:	193b      	adds	r3, r7, r4
 8000f4c:	183a      	adds	r2, r7, r0
 8000f4e:	7812      	ldrb	r2, [r2, #0]
 8000f50:	701a      	strb	r2, [r3, #0]
  NRF24_stopListening();
 8000f52:	f7ff fd05 	bl	8000960 <NRF24_stopListening>

  NRF24_openWritingPipe(addr);
 8000f56:	683a      	ldr	r2, [r7, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	0010      	movs	r0, r2
 8000f5c:	0019      	movs	r1, r3
 8000f5e:	f7ff fd6b 	bl	8000a38 <NRF24_openWritingPipe>

  NRF24_write(tx_data,5);
 8000f62:	193b      	adds	r3, r7, r4
 8000f64:	2105      	movs	r1, #5
 8000f66:	0018      	movs	r0, r3
 8000f68:	f7ff fd06 	bl	8000978 <NRF24_write>
  HAL_Delay(50);
 8000f6c:	2032      	movs	r0, #50	; 0x32
 8000f6e:	f000 fd8d 	bl	8001a8c <HAL_Delay>
  NRF24_write(tx_data,5);
 8000f72:	193b      	adds	r3, r7, r4
 8000f74:	2105      	movs	r1, #5
 8000f76:	0018      	movs	r0, r3
 8000f78:	f7ff fcfe 	bl	8000978 <NRF24_write>
  HAL_Delay(50);
 8000f7c:	2032      	movs	r0, #50	; 0x32
 8000f7e:	f000 fd85 	bl	8001a8c <HAL_Delay>
  NRF24_write(tx_data,5);
 8000f82:	193b      	adds	r3, r7, r4
 8000f84:	2105      	movs	r1, #5
 8000f86:	0018      	movs	r0, r3
 8000f88:	f7ff fcf6 	bl	8000978 <NRF24_write>
  HAL_Delay(50);
 8000f8c:	2032      	movs	r0, #50	; 0x32
 8000f8e:	f000 fd7d 	bl	8001a8c <HAL_Delay>
  NRF24_write(tx_data,5);
 8000f92:	193b      	adds	r3, r7, r4
 8000f94:	2105      	movs	r1, #5
 8000f96:	0018      	movs	r0, r3
 8000f98:	f7ff fcee 	bl	8000978 <NRF24_write>
  HAL_Delay(50);
 8000f9c:	2032      	movs	r0, #50	; 0x32
 8000f9e:	f000 fd75 	bl	8001a8c <HAL_Delay>
  NRF24_write(tx_data,5);
 8000fa2:	193b      	adds	r3, r7, r4
 8000fa4:	2105      	movs	r1, #5
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f7ff fce6 	bl	8000978 <NRF24_write>
  HAL_Delay(50);
 8000fac:	2032      	movs	r0, #50	; 0x32
 8000fae:	f000 fd6d 	bl	8001a8c <HAL_Delay>

  return;
 8000fb2:	46c0      	nop			; (mov r8, r8)
}
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	b007      	add	sp, #28
 8000fb8:	bd90      	pop	{r4, r7, pc}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	08003d78 	.word	0x08003d78

08000fc0 <send_RF_corner>:

void send_RF_corner(uint8_t corner_num)
{
 8000fc0:	b590      	push	{r4, r7, lr}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	0002      	movs	r2, r0
 8000fc8:	1dfb      	adds	r3, r7, #7
 8000fca:	701a      	strb	r2, [r3, #0]
  uint8_t tx_data[5] = "Hello";
 8000fcc:	2008      	movs	r0, #8
 8000fce:	183b      	adds	r3, r7, r0
 8000fd0:	4a20      	ldr	r2, [pc, #128]	; (8001054 <send_RF_corner+0x94>)
 8000fd2:	6811      	ldr	r1, [r2, #0]
 8000fd4:	6019      	str	r1, [r3, #0]
 8000fd6:	7912      	ldrb	r2, [r2, #4]
 8000fd8:	711a      	strb	r2, [r3, #4]
  tx_data[0] = RF_CALIBRATE_CORNER;
 8000fda:	183b      	adds	r3, r7, r0
 8000fdc:	2211      	movs	r2, #17
 8000fde:	701a      	strb	r2, [r3, #0]
  tx_data[1] = corner_num;
 8000fe0:	0004      	movs	r4, r0
 8000fe2:	183b      	adds	r3, r7, r0
 8000fe4:	1dfa      	adds	r2, r7, #7
 8000fe6:	7812      	ldrb	r2, [r2, #0]
 8000fe8:	705a      	strb	r2, [r3, #1]
  NRF24_stopListening();
 8000fea:	f7ff fcb9 	bl	8000960 <NRF24_stopListening>

  NRF24_openWritingPipe(PI_ADDR);
 8000fee:	4a1a      	ldr	r2, [pc, #104]	; (8001058 <send_RF_corner+0x98>)
 8000ff0:	2355      	movs	r3, #85	; 0x55
 8000ff2:	0010      	movs	r0, r2
 8000ff4:	0019      	movs	r1, r3
 8000ff6:	f7ff fd1f 	bl	8000a38 <NRF24_openWritingPipe>

  NRF24_write(tx_data,5);
 8000ffa:	193b      	adds	r3, r7, r4
 8000ffc:	2105      	movs	r1, #5
 8000ffe:	0018      	movs	r0, r3
 8001000:	f7ff fcba 	bl	8000978 <NRF24_write>
  HAL_Delay(50);
 8001004:	2032      	movs	r0, #50	; 0x32
 8001006:	f000 fd41 	bl	8001a8c <HAL_Delay>
  NRF24_write(tx_data,5);
 800100a:	193b      	adds	r3, r7, r4
 800100c:	2105      	movs	r1, #5
 800100e:	0018      	movs	r0, r3
 8001010:	f7ff fcb2 	bl	8000978 <NRF24_write>
  HAL_Delay(50);
 8001014:	2032      	movs	r0, #50	; 0x32
 8001016:	f000 fd39 	bl	8001a8c <HAL_Delay>
  NRF24_write(tx_data,5);
 800101a:	193b      	adds	r3, r7, r4
 800101c:	2105      	movs	r1, #5
 800101e:	0018      	movs	r0, r3
 8001020:	f7ff fcaa 	bl	8000978 <NRF24_write>
  HAL_Delay(50);
 8001024:	2032      	movs	r0, #50	; 0x32
 8001026:	f000 fd31 	bl	8001a8c <HAL_Delay>
  NRF24_write(tx_data,5);
 800102a:	193b      	adds	r3, r7, r4
 800102c:	2105      	movs	r1, #5
 800102e:	0018      	movs	r0, r3
 8001030:	f7ff fca2 	bl	8000978 <NRF24_write>
  HAL_Delay(50);
 8001034:	2032      	movs	r0, #50	; 0x32
 8001036:	f000 fd29 	bl	8001a8c <HAL_Delay>
  NRF24_write(tx_data,5);
 800103a:	193b      	adds	r3, r7, r4
 800103c:	2105      	movs	r1, #5
 800103e:	0018      	movs	r0, r3
 8001040:	f7ff fc9a 	bl	8000978 <NRF24_write>
  HAL_Delay(50);
 8001044:	2032      	movs	r0, #50	; 0x32
 8001046:	f000 fd21 	bl	8001a8c <HAL_Delay>




  return;
 800104a:	46c0      	nop			; (mov r8, r8)
}
 800104c:	46bd      	mov	sp, r7
 800104e:	b005      	add	sp, #20
 8001050:	bd90      	pop	{r4, r7, pc}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	08003d78 	.word	0x08003d78
 8001058:	66778899 	.word	0x66778899

0800105c <corner>:

void corner(uint16_t led_number, int payloadSize, int corner_num) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	60b9      	str	r1, [r7, #8]
 8001064:	607a      	str	r2, [r7, #4]
 8001066:	210e      	movs	r1, #14
 8001068:	187b      	adds	r3, r7, r1
 800106a:	1c02      	adds	r2, r0, #0
 800106c:	801a      	strh	r2, [r3, #0]
	// Turn on LED while processing this corner
	HAL_GPIO_WritePin(GPIOA, led_number, GPIO_PIN_SET);
 800106e:	187b      	adds	r3, r7, r1
 8001070:	8819      	ldrh	r1, [r3, #0]
 8001072:	23a0      	movs	r3, #160	; 0xa0
 8001074:	05db      	lsls	r3, r3, #23
 8001076:	2201      	movs	r2, #1
 8001078:	0018      	movs	r0, r3
 800107a:	f001 fab4 	bl	80025e6 <HAL_GPIO_WritePin>

	// wait for DOWN press, then debounce
	while(HAL_GPIO_ReadPin(BUTTON_DOWN_GPIO_Port, BUTTON_DOWN_Pin) == 0);
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	23a0      	movs	r3, #160	; 0xa0
 8001082:	05db      	lsls	r3, r3, #23
 8001084:	2110      	movs	r1, #16
 8001086:	0018      	movs	r0, r3
 8001088:	f001 fa90 	bl	80025ac <HAL_GPIO_ReadPin>
 800108c:	1e03      	subs	r3, r0, #0
 800108e:	d0f7      	beq.n	8001080 <corner+0x24>
	HAL_Delay(100);
 8001090:	2064      	movs	r0, #100	; 0x64
 8001092:	f000 fcfb 	bl	8001a8c <HAL_Delay>
	// turn laser on, sending GET_BASE, delaying, and LASER_ON
	send_RF_packet(RF_GET_BASE, PI_ADDR); // Send that the lasers are about to toggle
 8001096:	4a28      	ldr	r2, [pc, #160]	; (8001138 <corner+0xdc>)
 8001098:	2355      	movs	r3, #85	; 0x55
 800109a:	2030      	movs	r0, #48	; 0x30
 800109c:	f7ff ff44 	bl	8000f28 <send_RF_packet>
	HAL_Delay(500); // delay, instead of ACK
 80010a0:	23fa      	movs	r3, #250	; 0xfa
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	0018      	movs	r0, r3
 80010a6:	f000 fcf1 	bl	8001a8c <HAL_Delay>
	send_RF_packet(RF_LASERS_ON, PI_ADDR);
 80010aa:	4a23      	ldr	r2, [pc, #140]	; (8001138 <corner+0xdc>)
 80010ac:	2355      	movs	r3, #85	; 0x55
 80010ae:	2020      	movs	r0, #32
 80010b0:	f7ff ff3a 	bl	8000f28 <send_RF_packet>

	HAL_GPIO_WritePin(RED_LASER_GPIO_Port, RED_LASER_Pin, GPIO_PIN_SET); // Turn red laser ON
 80010b4:	23a0      	movs	r3, #160	; 0xa0
 80010b6:	05db      	lsls	r3, r3, #23
 80010b8:	2201      	movs	r2, #1
 80010ba:	2108      	movs	r1, #8
 80010bc:	0018      	movs	r0, r3
 80010be:	f001 fa92 	bl	80025e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IR_LASER_GPIO_Port, IR_LASER_Pin, GPIO_PIN_SET); // Turn IR laser ON
 80010c2:	4b1e      	ldr	r3, [pc, #120]	; (800113c <corner+0xe0>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	2101      	movs	r1, #1
 80010c8:	0018      	movs	r0, r3
 80010ca:	f001 fa8c 	bl	80025e6 <HAL_GPIO_WritePin>

	// wait for B to send CORNER
	while(HAL_GPIO_ReadPin(BUTTON_HOME_GPIO_Port, BUTTON_HOME_Pin) == 0);
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	23a0      	movs	r3, #160	; 0xa0
 80010d2:	05db      	lsls	r3, r3, #23
 80010d4:	2180      	movs	r1, #128	; 0x80
 80010d6:	0018      	movs	r0, r3
 80010d8:	f001 fa68 	bl	80025ac <HAL_GPIO_ReadPin>
 80010dc:	1e03      	subs	r3, r0, #0
 80010de:	d0f7      	beq.n	80010d0 <corner+0x74>
	// THen send calibration signals
	send_RF_corner(corner_num);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	0018      	movs	r0, r3
 80010e6:	f7ff ff6b 	bl	8000fc0 <send_RF_corner>

	HAL_Delay(500); // delay, instead of ACK
 80010ea:	23fa      	movs	r3, #250	; 0xfa
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	0018      	movs	r0, r3
 80010f0:	f000 fccc 	bl	8001a8c <HAL_Delay>

	// turn laser off
	send_RF_packet(RF_LASERS_OFF, PI_ADDR);
 80010f4:	4a10      	ldr	r2, [pc, #64]	; (8001138 <corner+0xdc>)
 80010f6:	2355      	movs	r3, #85	; 0x55
 80010f8:	2021      	movs	r0, #33	; 0x21
 80010fa:	f7ff ff15 	bl	8000f28 <send_RF_packet>


  HAL_GPIO_WritePin(RED_LASER_GPIO_Port, RED_LASER_Pin, GPIO_PIN_RESET); // Turn red laser ON
 80010fe:	23a0      	movs	r3, #160	; 0xa0
 8001100:	05db      	lsls	r3, r3, #23
 8001102:	2200      	movs	r2, #0
 8001104:	2108      	movs	r1, #8
 8001106:	0018      	movs	r0, r3
 8001108:	f001 fa6d 	bl	80025e6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IR_LASER_GPIO_Port, IR_LASER_Pin, GPIO_PIN_RESET); // Turn IR laser ON
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <corner+0xe0>)
 800110e:	2200      	movs	r2, #0
 8001110:	2101      	movs	r1, #1
 8001112:	0018      	movs	r0, r3
 8001114:	f001 fa67 	bl	80025e6 <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(GPIOA, led_number, GPIO_PIN_RESET);
 8001118:	230e      	movs	r3, #14
 800111a:	18fb      	adds	r3, r7, r3
 800111c:	8819      	ldrh	r1, [r3, #0]
 800111e:	23a0      	movs	r3, #160	; 0xa0
 8001120:	05db      	lsls	r3, r3, #23
 8001122:	2200      	movs	r2, #0
 8001124:	0018      	movs	r0, r3
 8001126:	f001 fa5e 	bl	80025e6 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800112a:	2064      	movs	r0, #100	; 0x64
 800112c:	f000 fcae 	bl	8001a8c <HAL_Delay>
}
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	b004      	add	sp, #16
 8001136:	bd80      	pop	{r7, pc}
 8001138:	66778899 	.word	0x66778899
 800113c:	50000400 	.word	0x50000400

08001140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001142:	b099      	sub	sp, #100	; 0x64
 8001144:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001146:	f000 fc31 	bl	80019ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114a:	f000 f98d 	bl	8001468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114e:	f000 fa7b 	bl	8001648 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001152:	f000 fa41 	bl	80015d8 <MX_SPI1_Init>
  MX_ADC_Init();
 8001156:	f000 f9db 	bl	8001510 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  NRF24_begin(CSN_GPIO_Port, CSN_Pin, CE_Pin, hspi1);
 800115a:	4cbb      	ldr	r4, [pc, #748]	; (8001448 <main+0x308>)
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	021e      	lsls	r6, r3, #8
 8001160:	23a0      	movs	r3, #160	; 0xa0
 8001162:	05dd      	lsls	r5, r3, #23
 8001164:	466b      	mov	r3, sp
 8001166:	0018      	movs	r0, r3
 8001168:	1d23      	adds	r3, r4, #4
 800116a:	2254      	movs	r2, #84	; 0x54
 800116c:	0019      	movs	r1, r3
 800116e:	f002 fde5 	bl	8003d3c <memcpy>
 8001172:	6823      	ldr	r3, [r4, #0]
 8001174:	2204      	movs	r2, #4
 8001176:	0031      	movs	r1, r6
 8001178:	0028      	movs	r0, r5
 800117a:	f7ff fae9 	bl	8000750 <NRF24_begin>

  int LASER_ON = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]


  NRF24_stopListening();
 8001182:	f7ff fbed 	bl	8000960 <NRF24_stopListening>
  NRF24_openWritingPipe(PI_ADDR);
 8001186:	4ab1      	ldr	r2, [pc, #708]	; (800144c <main+0x30c>)
 8001188:	2355      	movs	r3, #85	; 0x55
 800118a:	0010      	movs	r0, r2
 800118c:	0019      	movs	r1, r3
 800118e:	f7ff fc53 	bl	8000a38 <NRF24_openWritingPipe>
  NRF24_setAutoAck(true);
 8001192:	2001      	movs	r0, #1
 8001194:	f7ff fcf6 	bl	8000b84 <NRF24_setAutoAck>
  NRF24_setChannel(CHANNEL);
 8001198:	2078      	movs	r0, #120	; 0x78
 800119a:	f7ff fc95 	bl	8000ac8 <NRF24_setChannel>
  NRF24_setPayloadSize(PAYLOAD_SIZE);
 800119e:	2005      	movs	r0, #5
 80011a0:	f7ff fcae 	bl	8000b00 <NRF24_setPayloadSize>
  NRF24_setDataRate(RF24_250KBPS);
 80011a4:	2002      	movs	r0, #2
 80011a6:	f7ff fd55 	bl	8000c54 <NRF24_setDataRate>
  //NRF24_write(myTxData, 5);
  //send_RF_packet(RF_GET_BASE, PI_ADDR);
  //send_RF_packet(RF_CLICK_LEFT, USB_ADDR);
  HAL_Delay(250);
 80011aa:	20fa      	movs	r0, #250	; 0xfa
 80011ac:	f000 fc6e 	bl	8001a8c <HAL_Delay>
    //		}
    //
    //		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
    //		HAL_Delay(250);

    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4))
 80011b0:	23a0      	movs	r3, #160	; 0xa0
 80011b2:	05db      	lsls	r3, r3, #23
 80011b4:	2110      	movs	r1, #16
 80011b6:	0018      	movs	r0, r3
 80011b8:	f001 f9f8 	bl	80025ac <HAL_GPIO_ReadPin>
 80011bc:	1e03      	subs	r3, r0, #0
 80011be:	d04d      	beq.n	800125c <main+0x11c>
    {
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);	//Turn on yellow pin
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	0159      	lsls	r1, r3, #5
 80011c4:	23a0      	movs	r3, #160	; 0xa0
 80011c6:	05db      	lsls	r3, r3, #23
 80011c8:	2201      	movs	r2, #1
 80011ca:	0018      	movs	r0, r3
 80011cc:	f001 fa0b 	bl	80025e6 <HAL_GPIO_WritePin>
      HAL_Delay(100); // debounce
 80011d0:	2064      	movs	r0, #100	; 0x64
 80011d2:	f000 fc5b 	bl	8001a8c <HAL_Delay>


      if (LASER_ON) {
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d014      	beq.n	8001206 <main+0xc6>
		send_RF_packet(RF_LASERS_OFF, PI_ADDR); // Send that the lasers are about to toggle
 80011dc:	4a9b      	ldr	r2, [pc, #620]	; (800144c <main+0x30c>)
 80011de:	2355      	movs	r3, #85	; 0x55
 80011e0:	2021      	movs	r0, #33	; 0x21
 80011e2:	f7ff fea1 	bl	8000f28 <send_RF_packet>
		LASER_ON = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); // Turn red laser ON
 80011ea:	23a0      	movs	r3, #160	; 0xa0
 80011ec:	05db      	lsls	r3, r3, #23
 80011ee:	2200      	movs	r2, #0
 80011f0:	2108      	movs	r1, #8
 80011f2:	0018      	movs	r0, r3
 80011f4:	f001 f9f7 	bl	80025e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // Turn IR laser ON
 80011f8:	4b95      	ldr	r3, [pc, #596]	; (8001450 <main+0x310>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	2101      	movs	r1, #1
 80011fe:	0018      	movs	r0, r3
 8001200:	f001 f9f1 	bl	80025e6 <HAL_GPIO_WritePin>
 8001204:	e018      	b.n	8001238 <main+0xf8>
      }
      else {
		send_RF_packet(RF_GET_BASE, PI_ADDR); // Send that the lasers are about to turn on
 8001206:	4a91      	ldr	r2, [pc, #580]	; (800144c <main+0x30c>)
 8001208:	2355      	movs	r3, #85	; 0x55
 800120a:	2030      	movs	r0, #48	; 0x30
 800120c:	f7ff fe8c 	bl	8000f28 <send_RF_packet>
		LASER_ON = 1;
 8001210:	2301      	movs	r3, #1
 8001212:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET); // Turn red laser ON
 8001214:	23a0      	movs	r3, #160	; 0xa0
 8001216:	05db      	lsls	r3, r3, #23
 8001218:	2201      	movs	r2, #1
 800121a:	2108      	movs	r1, #8
 800121c:	0018      	movs	r0, r3
 800121e:	f001 f9e2 	bl	80025e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Turn IR laser ON
 8001222:	4b8b      	ldr	r3, [pc, #556]	; (8001450 <main+0x310>)
 8001224:	2201      	movs	r2, #1
 8001226:	2101      	movs	r1, #1
 8001228:	0018      	movs	r0, r3
 800122a:	f001 f9dc 	bl	80025e6 <HAL_GPIO_WritePin>
		send_RF_packet(RF_LASERS_ON, PI_ADDR); // Send that the lasers are on
 800122e:	4a87      	ldr	r2, [pc, #540]	; (800144c <main+0x30c>)
 8001230:	2355      	movs	r3, #85	; 0x55
 8001232:	2020      	movs	r0, #32
 8001234:	f7ff fe78 	bl	8000f28 <send_RF_packet>

      }
      HAL_Delay(1000);
 8001238:	23fa      	movs	r3, #250	; 0xfa
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	0018      	movs	r0, r3
 800123e:	f000 fc25 	bl	8001a8c <HAL_Delay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // Turn off yellow 4
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	0159      	lsls	r1, r3, #5
 8001246:	23a0      	movs	r3, #160	; 0xa0
 8001248:	05db      	lsls	r3, r3, #23
 800124a:	2200      	movs	r2, #0
 800124c:	0018      	movs	r0, r3
 800124e:	f001 f9ca 	bl	80025e6 <HAL_GPIO_WritePin>


      HAL_Delay(1000);
 8001252:	23fa      	movs	r3, #250	; 0xfa
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	0018      	movs	r0, r3
 8001258:	f000 fc18 	bl	8001a8c <HAL_Delay>

    }

    // A is PA6
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6))
 800125c:	23a0      	movs	r3, #160	; 0xa0
 800125e:	05db      	lsls	r3, r3, #23
 8001260:	2140      	movs	r1, #64	; 0x40
 8001262:	0018      	movs	r0, r3
 8001264:	f001 f9a2 	bl	80025ac <HAL_GPIO_ReadPin>
 8001268:	1e03      	subs	r3, r0, #0
 800126a:	d02d      	beq.n	80012c8 <main+0x188>
    {
      send_RF_packet(RF_CLICK_LEFT, USB_ADDR); // Send left click
 800126c:	4a79      	ldr	r2, [pc, #484]	; (8001454 <main+0x314>)
 800126e:	2311      	movs	r3, #17
 8001270:	2001      	movs	r0, #1
 8001272:	f7ff fe59 	bl	8000f28 <send_RF_packet>
      //send_RF_packet(RF_GET_BASE, PI_ADDR); // Send left click
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET); // Turn off yellow 4
 8001276:	2380      	movs	r3, #128	; 0x80
 8001278:	0159      	lsls	r1, r3, #5
 800127a:	23a0      	movs	r3, #160	; 0xa0
 800127c:	05db      	lsls	r3, r3, #23
 800127e:	2201      	movs	r2, #1
 8001280:	0018      	movs	r0, r3
 8001282:	f001 f9b0 	bl	80025e6 <HAL_GPIO_WritePin>
      HAL_Delay(500);
 8001286:	23fa      	movs	r3, #250	; 0xfa
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	0018      	movs	r0, r3
 800128c:	f000 fbfe 	bl	8001a8c <HAL_Delay>
      while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)) {
 8001290:	e002      	b.n	8001298 <main+0x158>
        HAL_Delay(100);
 8001292:	2064      	movs	r0, #100	; 0x64
 8001294:	f000 fbfa 	bl	8001a8c <HAL_Delay>
      while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)) {
 8001298:	23a0      	movs	r3, #160	; 0xa0
 800129a:	05db      	lsls	r3, r3, #23
 800129c:	2140      	movs	r1, #64	; 0x40
 800129e:	0018      	movs	r0, r3
 80012a0:	f001 f984 	bl	80025ac <HAL_GPIO_ReadPin>
 80012a4:	1e03      	subs	r3, r0, #0
 80012a6:	d1f4      	bne.n	8001292 <main+0x152>
      }
      send_RF_packet(RF_CLICK_LEFT_RELEASE, USB_ADDR);
 80012a8:	4a6a      	ldr	r2, [pc, #424]	; (8001454 <main+0x314>)
 80012aa:	2311      	movs	r3, #17
 80012ac:	2003      	movs	r0, #3
 80012ae:	f7ff fe3b 	bl	8000f28 <send_RF_packet>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // Turn off yellow 4
 80012b2:	2380      	movs	r3, #128	; 0x80
 80012b4:	0159      	lsls	r1, r3, #5
 80012b6:	23a0      	movs	r3, #160	; 0xa0
 80012b8:	05db      	lsls	r3, r3, #23
 80012ba:	2200      	movs	r2, #0
 80012bc:	0018      	movs	r0, r3
 80012be:	f001 f992 	bl	80025e6 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 80012c2:	2064      	movs	r0, #100	; 0x64
 80012c4:	f000 fbe2 	bl	8001a8c <HAL_Delay>
    }

    // B is PA5
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5))
 80012c8:	23a0      	movs	r3, #160	; 0xa0
 80012ca:	05db      	lsls	r3, r3, #23
 80012cc:	2120      	movs	r1, #32
 80012ce:	0018      	movs	r0, r3
 80012d0:	f001 f96c 	bl	80025ac <HAL_GPIO_ReadPin>
 80012d4:	1e03      	subs	r3, r0, #0
 80012d6:	d01b      	beq.n	8001310 <main+0x1d0>
    {
      send_RF_packet(RF_CLICK_RIGHT, USB_ADDR); // Send right click
 80012d8:	4a5e      	ldr	r2, [pc, #376]	; (8001454 <main+0x314>)
 80012da:	2311      	movs	r3, #17
 80012dc:	2002      	movs	r0, #2
 80012de:	f7ff fe23 	bl	8000f28 <send_RF_packet>
      HAL_Delay(100);
 80012e2:	2064      	movs	r0, #100	; 0x64
 80012e4:	f000 fbd2 	bl	8001a8c <HAL_Delay>
      while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)) {
 80012e8:	e002      	b.n	80012f0 <main+0x1b0>
        HAL_Delay(100);
 80012ea:	2064      	movs	r0, #100	; 0x64
 80012ec:	f000 fbce 	bl	8001a8c <HAL_Delay>
      while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)) {
 80012f0:	23a0      	movs	r3, #160	; 0xa0
 80012f2:	05db      	lsls	r3, r3, #23
 80012f4:	2120      	movs	r1, #32
 80012f6:	0018      	movs	r0, r3
 80012f8:	f001 f958 	bl	80025ac <HAL_GPIO_ReadPin>
 80012fc:	1e03      	subs	r3, r0, #0
 80012fe:	d1f4      	bne.n	80012ea <main+0x1aa>
      }
      send_RF_packet(RF_CLICK_RIGHT_RELEASE, USB_ADDR);
 8001300:	4a54      	ldr	r2, [pc, #336]	; (8001454 <main+0x314>)
 8001302:	2311      	movs	r3, #17
 8001304:	2004      	movs	r0, #4
 8001306:	f7ff fe0f 	bl	8000f28 <send_RF_packet>
      HAL_Delay(100);
 800130a:	2064      	movs	r0, #100	; 0x64
 800130c:	f000 fbbe 	bl	8001a8c <HAL_Delay>
    }

    // 2 is PC14
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14))
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	01db      	lsls	r3, r3, #7
 8001314:	4a50      	ldr	r2, [pc, #320]	; (8001458 <main+0x318>)
 8001316:	0019      	movs	r1, r3
 8001318:	0010      	movs	r0, r2
 800131a:	f001 f947 	bl	80025ac <HAL_GPIO_ReadPin>
 800131e:	1e03      	subs	r3, r0, #0
 8001320:	d037      	beq.n	8001392 <main+0x252>
    {
      // ADC stuff
      HAL_ADC_Start(&hadc);
 8001322:	4b4e      	ldr	r3, [pc, #312]	; (800145c <main+0x31c>)
 8001324:	0018      	movs	r0, r3
 8001326:	f000 fd49 	bl	8001dbc <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800132a:	2301      	movs	r3, #1
 800132c:	425a      	negs	r2, r3
 800132e:	4b4b      	ldr	r3, [pc, #300]	; (800145c <main+0x31c>)
 8001330:	0011      	movs	r1, r2
 8001332:	0018      	movs	r0, r3
 8001334:	f000 fd96 	bl	8001e64 <HAL_ADC_PollForConversion>
      raw = HAL_ADC_GetValue(&hadc);
 8001338:	4b48      	ldr	r3, [pc, #288]	; (800145c <main+0x31c>)
 800133a:	0018      	movs	r0, r3
 800133c:	f000 fe28 	bl	8001f90 <HAL_ADC_GetValue>
 8001340:	0002      	movs	r2, r0
 8001342:	1cbb      	adds	r3, r7, #2
 8001344:	801a      	strh	r2, [r3, #0]

      if (raw >= 2950) // red at 2950, green anywhere below that. 2.2 V
 8001346:	1cbb      	adds	r3, r7, #2
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	4a45      	ldr	r2, [pc, #276]	; (8001460 <main+0x320>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d907      	bls.n	8001360 <main+0x220>
      {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // Turn on the green LEDs
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	021b      	lsls	r3, r3, #8
 8001354:	4840      	ldr	r0, [pc, #256]	; (8001458 <main+0x318>)
 8001356:	2201      	movs	r2, #1
 8001358:	0019      	movs	r1, r3
 800135a:	f001 f944 	bl	80025e6 <HAL_GPIO_WritePin>
 800135e:	e006      	b.n	800136e <main+0x22e>
      }
      else
      {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); // Turn on the red LEDs
 8001360:	23a0      	movs	r3, #160	; 0xa0
 8001362:	05db      	lsls	r3, r3, #23
 8001364:	2201      	movs	r2, #1
 8001366:	2102      	movs	r1, #2
 8001368:	0018      	movs	r0, r3
 800136a:	f001 f93c 	bl	80025e6 <HAL_GPIO_WritePin>
      }

      HAL_Delay(3000);
 800136e:	4b3d      	ldr	r3, [pc, #244]	; (8001464 <main+0x324>)
 8001370:	0018      	movs	r0, r3
 8001372:	f000 fb8b 	bl	8001a8c <HAL_Delay>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // Turn off the red LEDs
 8001376:	2380      	movs	r3, #128	; 0x80
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	4837      	ldr	r0, [pc, #220]	; (8001458 <main+0x318>)
 800137c:	2200      	movs	r2, #0
 800137e:	0019      	movs	r1, r3
 8001380:	f001 f931 	bl	80025e6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // Turn off the red LEDs
 8001384:	23a0      	movs	r3, #160	; 0xa0
 8001386:	05db      	lsls	r3, r3, #23
 8001388:	2200      	movs	r2, #0
 800138a:	2102      	movs	r1, #2
 800138c:	0018      	movs	r0, r3
 800138e:	f001 f92a 	bl	80025e6 <HAL_GPIO_WritePin>
    }

    // 1 is PB7
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 8001392:	4b2f      	ldr	r3, [pc, #188]	; (8001450 <main+0x310>)
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	0018      	movs	r0, r3
 8001398:	f001 f908 	bl	80025ac <HAL_GPIO_ReadPin>
 800139c:	1e03      	subs	r3, r0, #0
 800139e:	d100      	bne.n	80013a2 <main+0x262>
 80013a0:	e706      	b.n	80011b0 <main+0x70>
    {

		if (LASER_ON) {
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d016      	beq.n	80013d6 <main+0x296>
			send_RF_packet(RF_LASERS_OFF, PI_ADDR); // Send that the lasers are about to toggle
 80013a8:	4a28      	ldr	r2, [pc, #160]	; (800144c <main+0x30c>)
 80013aa:	2355      	movs	r3, #85	; 0x55
 80013ac:	2021      	movs	r0, #33	; 0x21
 80013ae:	f7ff fdbb 	bl	8000f28 <send_RF_packet>
			HAL_Delay(250);
 80013b2:	20fa      	movs	r0, #250	; 0xfa
 80013b4:	f000 fb6a 	bl	8001a8c <HAL_Delay>
			LASER_ON = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	607b      	str	r3, [r7, #4]
			HAL_GPIO_WritePin(RED_LASER_GPIO_Port, RED_LASER_Pin, GPIO_PIN_RESET); // Turn red laser OFF
 80013bc:	23a0      	movs	r3, #160	; 0xa0
 80013be:	05db      	lsls	r3, r3, #23
 80013c0:	2200      	movs	r2, #0
 80013c2:	2108      	movs	r1, #8
 80013c4:	0018      	movs	r0, r3
 80013c6:	f001 f90e 	bl	80025e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IR_LASER_GPIO_Port , IR_LASER_Pin , GPIO_PIN_RESET); // Turn IR  laser OFF
 80013ca:	4b21      	ldr	r3, [pc, #132]	; (8001450 <main+0x310>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	2101      	movs	r1, #1
 80013d0:	0018      	movs	r0, r3
 80013d2:	f001 f908 	bl	80025e6 <HAL_GPIO_WritePin>
		}

      send_RF_packet(RF_CALIBRATE_START, PI_ADDR); // Send calibration mode
 80013d6:	4a1d      	ldr	r2, [pc, #116]	; (800144c <main+0x30c>)
 80013d8:	2355      	movs	r3, #85	; 0x55
 80013da:	2010      	movs	r0, #16
 80013dc:	f7ff fda4 	bl	8000f28 <send_RF_packet>

      // Press B on the top left corner of the screen
      corner(GPIO_PIN_12, PAYLOAD_SIZE, 1);
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	015b      	lsls	r3, r3, #5
 80013e4:	2201      	movs	r2, #1
 80013e6:	2105      	movs	r1, #5
 80013e8:	0018      	movs	r0, r3
 80013ea:	f7ff fe37 	bl	800105c <corner>
      corner(GPIO_PIN_11, PAYLOAD_SIZE, 2);
 80013ee:	2380      	movs	r3, #128	; 0x80
 80013f0:	011b      	lsls	r3, r3, #4
 80013f2:	2202      	movs	r2, #2
 80013f4:	2105      	movs	r1, #5
 80013f6:	0018      	movs	r0, r3
 80013f8:	f7ff fe30 	bl	800105c <corner>
      corner(GPIO_PIN_10, PAYLOAD_SIZE, 3);
 80013fc:	2380      	movs	r3, #128	; 0x80
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	2203      	movs	r2, #3
 8001402:	2105      	movs	r1, #5
 8001404:	0018      	movs	r0, r3
 8001406:	f7ff fe29 	bl	800105c <corner>
      corner(GPIO_PIN_9,  PAYLOAD_SIZE, 4);
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	2204      	movs	r2, #4
 8001410:	2105      	movs	r1, #5
 8001412:	0018      	movs	r0, r3
 8001414:	f7ff fe22 	bl	800105c <corner>

      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // Turn on the green LEDs
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	480e      	ldr	r0, [pc, #56]	; (8001458 <main+0x318>)
 800141e:	2201      	movs	r2, #1
 8001420:	0019      	movs	r1, r3
 8001422:	f001 f8e0 	bl	80025e6 <HAL_GPIO_WritePin>
      HAL_Delay(3000);
 8001426:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <main+0x324>)
 8001428:	0018      	movs	r0, r3
 800142a:	f000 fb2f 	bl	8001a8c <HAL_Delay>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // Turn off the red LEDs
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	4809      	ldr	r0, [pc, #36]	; (8001458 <main+0x318>)
 8001434:	2200      	movs	r2, #0
 8001436:	0019      	movs	r1, r3
 8001438:	f001 f8d5 	bl	80025e6 <HAL_GPIO_WritePin>

      send_RF_packet(RF_CALIBRATE_EXIT, PI_ADDR); // Send calibration mode
 800143c:	4a03      	ldr	r2, [pc, #12]	; (800144c <main+0x30c>)
 800143e:	2355      	movs	r3, #85	; 0x55
 8001440:	2014      	movs	r0, #20
 8001442:	f7ff fd71 	bl	8000f28 <send_RF_packet>
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4))
 8001446:	e6b3      	b.n	80011b0 <main+0x70>
 8001448:	20000090 	.word	0x20000090
 800144c:	66778899 	.word	0x66778899
 8001450:	50000400 	.word	0x50000400
 8001454:	223344aa 	.word	0x223344aa
 8001458:	50000800 	.word	0x50000800
 800145c:	200000e8 	.word	0x200000e8
 8001460:	00000b85 	.word	0x00000b85
 8001464:	00000bb8 	.word	0x00000bb8

08001468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b093      	sub	sp, #76	; 0x4c
 800146c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146e:	2414      	movs	r4, #20
 8001470:	193b      	adds	r3, r7, r4
 8001472:	0018      	movs	r0, r3
 8001474:	2334      	movs	r3, #52	; 0x34
 8001476:	001a      	movs	r2, r3
 8001478:	2100      	movs	r1, #0
 800147a:	f002 fc68 	bl	8003d4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800147e:	003b      	movs	r3, r7
 8001480:	0018      	movs	r0, r3
 8001482:	2314      	movs	r3, #20
 8001484:	001a      	movs	r2, r3
 8001486:	2100      	movs	r1, #0
 8001488:	f002 fc61 	bl	8003d4e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800148c:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <SystemClock_Config+0xa0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a1e      	ldr	r2, [pc, #120]	; (800150c <SystemClock_Config+0xa4>)
 8001492:	401a      	ands	r2, r3
 8001494:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <SystemClock_Config+0xa0>)
 8001496:	2180      	movs	r1, #128	; 0x80
 8001498:	0109      	lsls	r1, r1, #4
 800149a:	430a      	orrs	r2, r1
 800149c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800149e:	0021      	movs	r1, r4
 80014a0:	187b      	adds	r3, r7, r1
 80014a2:	2210      	movs	r2, #16
 80014a4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014a6:	187b      	adds	r3, r7, r1
 80014a8:	2201      	movs	r2, #1
 80014aa:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80014ac:	187b      	adds	r3, r7, r1
 80014ae:	2200      	movs	r2, #0
 80014b0:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80014b2:	187b      	adds	r3, r7, r1
 80014b4:	22a0      	movs	r2, #160	; 0xa0
 80014b6:	0212      	lsls	r2, r2, #8
 80014b8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014ba:	187b      	adds	r3, r7, r1
 80014bc:	2200      	movs	r2, #0
 80014be:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c0:	187b      	adds	r3, r7, r1
 80014c2:	0018      	movs	r0, r3
 80014c4:	f001 f8ac 	bl	8002620 <HAL_RCC_OscConfig>
 80014c8:	1e03      	subs	r3, r0, #0
 80014ca:	d001      	beq.n	80014d0 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80014cc:	f000 f976 	bl	80017bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d0:	003b      	movs	r3, r7
 80014d2:	220f      	movs	r2, #15
 80014d4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80014d6:	003b      	movs	r3, r7
 80014d8:	2200      	movs	r2, #0
 80014da:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014dc:	003b      	movs	r3, r7
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014e2:	003b      	movs	r3, r7
 80014e4:	2200      	movs	r2, #0
 80014e6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e8:	003b      	movs	r3, r7
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014ee:	003b      	movs	r3, r7
 80014f0:	2100      	movs	r1, #0
 80014f2:	0018      	movs	r0, r3
 80014f4:	f001 fc10 	bl	8002d18 <HAL_RCC_ClockConfig>
 80014f8:	1e03      	subs	r3, r0, #0
 80014fa:	d001      	beq.n	8001500 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014fc:	f000 f95e 	bl	80017bc <Error_Handler>
  }
}
 8001500:	46c0      	nop			; (mov r8, r8)
 8001502:	46bd      	mov	sp, r7
 8001504:	b013      	add	sp, #76	; 0x4c
 8001506:	bd90      	pop	{r4, r7, pc}
 8001508:	40007000 	.word	0x40007000
 800150c:	ffffe7ff 	.word	0xffffe7ff

08001510 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001516:	003b      	movs	r3, r7
 8001518:	0018      	movs	r0, r3
 800151a:	2308      	movs	r3, #8
 800151c:	001a      	movs	r2, r3
 800151e:	2100      	movs	r1, #0
 8001520:	f002 fc15 	bl	8003d4e <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001524:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <MX_ADC_Init+0xc0>)
 8001526:	4a2b      	ldr	r2, [pc, #172]	; (80015d4 <MX_ADC_Init+0xc4>)
 8001528:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800152a:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <MX_ADC_Init+0xc0>)
 800152c:	2200      	movs	r2, #0
 800152e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001530:	4b27      	ldr	r3, [pc, #156]	; (80015d0 <MX_ADC_Init+0xc0>)
 8001532:	22c0      	movs	r2, #192	; 0xc0
 8001534:	0612      	lsls	r2, r2, #24
 8001536:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001538:	4b25      	ldr	r3, [pc, #148]	; (80015d0 <MX_ADC_Init+0xc0>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800153e:	4b24      	ldr	r3, [pc, #144]	; (80015d0 <MX_ADC_Init+0xc0>)
 8001540:	2200      	movs	r2, #0
 8001542:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001544:	4b22      	ldr	r3, [pc, #136]	; (80015d0 <MX_ADC_Init+0xc0>)
 8001546:	2201      	movs	r2, #1
 8001548:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800154a:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <MX_ADC_Init+0xc0>)
 800154c:	2200      	movs	r2, #0
 800154e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001550:	4b1f      	ldr	r3, [pc, #124]	; (80015d0 <MX_ADC_Init+0xc0>)
 8001552:	2220      	movs	r2, #32
 8001554:	2100      	movs	r1, #0
 8001556:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001558:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <MX_ADC_Init+0xc0>)
 800155a:	2221      	movs	r2, #33	; 0x21
 800155c:	2100      	movs	r1, #0
 800155e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001560:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <MX_ADC_Init+0xc0>)
 8001562:	2200      	movs	r2, #0
 8001564:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001566:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <MX_ADC_Init+0xc0>)
 8001568:	22c2      	movs	r2, #194	; 0xc2
 800156a:	32ff      	adds	r2, #255	; 0xff
 800156c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <MX_ADC_Init+0xc0>)
 8001570:	222c      	movs	r2, #44	; 0x2c
 8001572:	2100      	movs	r1, #0
 8001574:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001576:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <MX_ADC_Init+0xc0>)
 8001578:	2204      	movs	r2, #4
 800157a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <MX_ADC_Init+0xc0>)
 800157e:	2200      	movs	r2, #0
 8001580:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <MX_ADC_Init+0xc0>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_ADC_Init+0xc0>)
 800158a:	2201      	movs	r2, #1
 800158c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <MX_ADC_Init+0xc0>)
 8001590:	2200      	movs	r2, #0
 8001592:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001594:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <MX_ADC_Init+0xc0>)
 8001596:	0018      	movs	r0, r3
 8001598:	f000 fa9c 	bl	8001ad4 <HAL_ADC_Init>
 800159c:	1e03      	subs	r3, r0, #0
 800159e:	d001      	beq.n	80015a4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80015a0:	f000 f90c 	bl	80017bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015a4:	003b      	movs	r3, r7
 80015a6:	2201      	movs	r2, #1
 80015a8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80015aa:	003b      	movs	r3, r7
 80015ac:	2280      	movs	r2, #128	; 0x80
 80015ae:	0152      	lsls	r2, r2, #5
 80015b0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015b2:	003a      	movs	r2, r7
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_ADC_Init+0xc0>)
 80015b6:	0011      	movs	r1, r2
 80015b8:	0018      	movs	r0, r3
 80015ba:	f000 fcf5 	bl	8001fa8 <HAL_ADC_ConfigChannel>
 80015be:	1e03      	subs	r3, r0, #0
 80015c0:	d001      	beq.n	80015c6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80015c2:	f000 f8fb 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	46bd      	mov	sp, r7
 80015ca:	b002      	add	sp, #8
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	200000e8 	.word	0x200000e8
 80015d4:	40012400 	.word	0x40012400

080015d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015dc:	4b18      	ldr	r3, [pc, #96]	; (8001640 <MX_SPI1_Init+0x68>)
 80015de:	4a19      	ldr	r2, [pc, #100]	; (8001644 <MX_SPI1_Init+0x6c>)
 80015e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015e2:	4b17      	ldr	r3, [pc, #92]	; (8001640 <MX_SPI1_Init+0x68>)
 80015e4:	2282      	movs	r2, #130	; 0x82
 80015e6:	0052      	lsls	r2, r2, #1
 80015e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <MX_SPI1_Init+0x68>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015f0:	4b13      	ldr	r3, [pc, #76]	; (8001640 <MX_SPI1_Init+0x68>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <MX_SPI1_Init+0x68>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015fc:	4b10      	ldr	r3, [pc, #64]	; (8001640 <MX_SPI1_Init+0x68>)
 80015fe:	2200      	movs	r2, #0
 8001600:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001602:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <MX_SPI1_Init+0x68>)
 8001604:	2280      	movs	r2, #128	; 0x80
 8001606:	0092      	lsls	r2, r2, #2
 8001608:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800160a:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <MX_SPI1_Init+0x68>)
 800160c:	2238      	movs	r2, #56	; 0x38
 800160e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <MX_SPI1_Init+0x68>)
 8001612:	2200      	movs	r2, #0
 8001614:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001616:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <MX_SPI1_Init+0x68>)
 8001618:	2200      	movs	r2, #0
 800161a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <MX_SPI1_Init+0x68>)
 800161e:	2200      	movs	r2, #0
 8001620:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001622:	4b07      	ldr	r3, [pc, #28]	; (8001640 <MX_SPI1_Init+0x68>)
 8001624:	2207      	movs	r2, #7
 8001626:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <MX_SPI1_Init+0x68>)
 800162a:	0018      	movs	r0, r3
 800162c:	f001 fd62 	bl	80030f4 <HAL_SPI_Init>
 8001630:	1e03      	subs	r3, r0, #0
 8001632:	d001      	beq.n	8001638 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001634:	f000 f8c2 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001638:	46c0      	nop			; (mov r8, r8)
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	20000090 	.word	0x20000090
 8001644:	40013000 	.word	0x40013000

08001648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b089      	sub	sp, #36	; 0x24
 800164c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164e:	240c      	movs	r4, #12
 8001650:	193b      	adds	r3, r7, r4
 8001652:	0018      	movs	r0, r3
 8001654:	2314      	movs	r3, #20
 8001656:	001a      	movs	r2, r3
 8001658:	2100      	movs	r1, #0
 800165a:	f002 fb78 	bl	8003d4e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800165e:	4b53      	ldr	r3, [pc, #332]	; (80017ac <MX_GPIO_Init+0x164>)
 8001660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001662:	4b52      	ldr	r3, [pc, #328]	; (80017ac <MX_GPIO_Init+0x164>)
 8001664:	2104      	movs	r1, #4
 8001666:	430a      	orrs	r2, r1
 8001668:	62da      	str	r2, [r3, #44]	; 0x2c
 800166a:	4b50      	ldr	r3, [pc, #320]	; (80017ac <MX_GPIO_Init+0x164>)
 800166c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166e:	2204      	movs	r2, #4
 8001670:	4013      	ands	r3, r2
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001676:	4b4d      	ldr	r3, [pc, #308]	; (80017ac <MX_GPIO_Init+0x164>)
 8001678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800167a:	4b4c      	ldr	r3, [pc, #304]	; (80017ac <MX_GPIO_Init+0x164>)
 800167c:	2101      	movs	r1, #1
 800167e:	430a      	orrs	r2, r1
 8001680:	62da      	str	r2, [r3, #44]	; 0x2c
 8001682:	4b4a      	ldr	r3, [pc, #296]	; (80017ac <MX_GPIO_Init+0x164>)
 8001684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001686:	2201      	movs	r2, #1
 8001688:	4013      	ands	r3, r2
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800168e:	4b47      	ldr	r3, [pc, #284]	; (80017ac <MX_GPIO_Init+0x164>)
 8001690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001692:	4b46      	ldr	r3, [pc, #280]	; (80017ac <MX_GPIO_Init+0x164>)
 8001694:	2102      	movs	r1, #2
 8001696:	430a      	orrs	r2, r1
 8001698:	62da      	str	r2, [r3, #44]	; 0x2c
 800169a:	4b44      	ldr	r3, [pc, #272]	; (80017ac <MX_GPIO_Init+0x164>)
 800169c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169e:	2202      	movs	r2, #2
 80016a0:	4013      	ands	r3, r2
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	4841      	ldr	r0, [pc, #260]	; (80017b0 <MX_GPIO_Init+0x168>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	0019      	movs	r1, r3
 80016b0:	f000 ff99 	bl	80025e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|CE_Pin|RED_LASER_Pin|Y4_Pin
 80016b4:	493f      	ldr	r1, [pc, #252]	; (80017b4 <MX_GPIO_Init+0x16c>)
 80016b6:	23a0      	movs	r3, #160	; 0xa0
 80016b8:	05db      	lsls	r3, r3, #23
 80016ba:	2200      	movs	r2, #0
 80016bc:	0018      	movs	r0, r3
 80016be:	f000 ff92 	bl	80025e6 <HAL_GPIO_WritePin>
                          |Y3_Pin|Y2_Pin|Y1_Pin|CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IR_LASER_GPIO_Port, IR_LASER_Pin, GPIO_PIN_RESET);
 80016c2:	4b3d      	ldr	r3, [pc, #244]	; (80017b8 <MX_GPIO_Init+0x170>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	2101      	movs	r1, #1
 80016c8:	0018      	movs	r0, r3
 80016ca:	f000 ff8c 	bl	80025e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80016ce:	193b      	adds	r3, r7, r4
 80016d0:	2280      	movs	r2, #128	; 0x80
 80016d2:	01d2      	lsls	r2, r2, #7
 80016d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d6:	193b      	adds	r3, r7, r4
 80016d8:	2200      	movs	r2, #0
 80016da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	193b      	adds	r3, r7, r4
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e2:	193b      	adds	r3, r7, r4
 80016e4:	4a32      	ldr	r2, [pc, #200]	; (80017b0 <MX_GPIO_Init+0x168>)
 80016e6:	0019      	movs	r1, r3
 80016e8:	0010      	movs	r0, r2
 80016ea:	f000 fdf9 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016ee:	0021      	movs	r1, r4
 80016f0:	187b      	adds	r3, r7, r1
 80016f2:	2280      	movs	r2, #128	; 0x80
 80016f4:	0212      	lsls	r2, r2, #8
 80016f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f8:	000c      	movs	r4, r1
 80016fa:	193b      	adds	r3, r7, r4
 80016fc:	2201      	movs	r2, #1
 80016fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	193b      	adds	r3, r7, r4
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	193b      	adds	r3, r7, r4
 8001708:	2200      	movs	r2, #0
 800170a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170c:	193b      	adds	r3, r7, r4
 800170e:	4a28      	ldr	r2, [pc, #160]	; (80017b0 <MX_GPIO_Init+0x168>)
 8001710:	0019      	movs	r1, r3
 8001712:	0010      	movs	r0, r2
 8001714:	f000 fde4 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 CE_Pin RED_LASER_Pin Y4_Pin
                           Y3_Pin Y2_Pin Y1_Pin CSN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|CE_Pin|RED_LASER_Pin|Y4_Pin
 8001718:	193b      	adds	r3, r7, r4
 800171a:	4a26      	ldr	r2, [pc, #152]	; (80017b4 <MX_GPIO_Init+0x16c>)
 800171c:	601a      	str	r2, [r3, #0]
                          |Y3_Pin|Y2_Pin|Y1_Pin|CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171e:	193b      	adds	r3, r7, r4
 8001720:	2201      	movs	r2, #1
 8001722:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	193b      	adds	r3, r7, r4
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	193b      	adds	r3, r7, r4
 800172c:	2200      	movs	r2, #0
 800172e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	193a      	adds	r2, r7, r4
 8001732:	23a0      	movs	r3, #160	; 0xa0
 8001734:	05db      	lsls	r3, r3, #23
 8001736:	0011      	movs	r1, r2
 8001738:	0018      	movs	r0, r3
 800173a:	f000 fdd1 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_DOWN_Pin BUTTON_B_Pin BUTTON_A_Pin BUTTON_HOME_Pin */
  GPIO_InitStruct.Pin = BUTTON_DOWN_Pin|BUTTON_B_Pin|BUTTON_A_Pin|BUTTON_HOME_Pin;
 800173e:	193b      	adds	r3, r7, r4
 8001740:	22f0      	movs	r2, #240	; 0xf0
 8001742:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001744:	193b      	adds	r3, r7, r4
 8001746:	2200      	movs	r2, #0
 8001748:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	193b      	adds	r3, r7, r4
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001750:	193a      	adds	r2, r7, r4
 8001752:	23a0      	movs	r3, #160	; 0xa0
 8001754:	05db      	lsls	r3, r3, #23
 8001756:	0011      	movs	r1, r2
 8001758:	0018      	movs	r0, r3
 800175a:	f000 fdc1 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_LASER_Pin */
  GPIO_InitStruct.Pin = IR_LASER_Pin;
 800175e:	193b      	adds	r3, r7, r4
 8001760:	2201      	movs	r2, #1
 8001762:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001764:	193b      	adds	r3, r7, r4
 8001766:	2201      	movs	r2, #1
 8001768:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	193b      	adds	r3, r7, r4
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	193b      	adds	r3, r7, r4
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(IR_LASER_GPIO_Port, &GPIO_InitStruct);
 8001776:	193b      	adds	r3, r7, r4
 8001778:	4a0f      	ldr	r2, [pc, #60]	; (80017b8 <MX_GPIO_Init+0x170>)
 800177a:	0019      	movs	r1, r3
 800177c:	0010      	movs	r0, r2
 800177e:	f000 fdaf 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8001782:	0021      	movs	r1, r4
 8001784:	187b      	adds	r3, r7, r1
 8001786:	22c2      	movs	r2, #194	; 0xc2
 8001788:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800178a:	187b      	adds	r3, r7, r1
 800178c:	2200      	movs	r2, #0
 800178e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	187b      	adds	r3, r7, r1
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001796:	187b      	adds	r3, r7, r1
 8001798:	4a07      	ldr	r2, [pc, #28]	; (80017b8 <MX_GPIO_Init+0x170>)
 800179a:	0019      	movs	r1, r3
 800179c:	0010      	movs	r0, r2
 800179e:	f000 fd9f 	bl	80022e0 <HAL_GPIO_Init>

}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b009      	add	sp, #36	; 0x24
 80017a8:	bd90      	pop	{r4, r7, pc}
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	40021000 	.word	0x40021000
 80017b0:	50000800 	.word	0x50000800
 80017b4:	00009e0e 	.word	0x00009e0e
 80017b8:	50000400 	.word	0x50000400

080017bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c0:	b672      	cpsid	i
}
 80017c2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80017c4:	e7fe      	b.n	80017c4 <Error_Handler+0x8>
	...

080017c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017cc:	4b07      	ldr	r3, [pc, #28]	; (80017ec <HAL_MspInit+0x24>)
 80017ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_MspInit+0x24>)
 80017d2:	2101      	movs	r1, #1
 80017d4:	430a      	orrs	r2, r1
 80017d6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <HAL_MspInit+0x24>)
 80017da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <HAL_MspInit+0x24>)
 80017de:	2180      	movs	r1, #128	; 0x80
 80017e0:	0549      	lsls	r1, r1, #21
 80017e2:	430a      	orrs	r2, r1
 80017e4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40021000 	.word	0x40021000

080017f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017f0:	b590      	push	{r4, r7, lr}
 80017f2:	b089      	sub	sp, #36	; 0x24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	240c      	movs	r4, #12
 80017fa:	193b      	adds	r3, r7, r4
 80017fc:	0018      	movs	r0, r3
 80017fe:	2314      	movs	r3, #20
 8001800:	001a      	movs	r2, r3
 8001802:	2100      	movs	r1, #0
 8001804:	f002 faa3 	bl	8003d4e <memset>
  if(hadc->Instance==ADC1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a14      	ldr	r2, [pc, #80]	; (8001860 <HAL_ADC_MspInit+0x70>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d122      	bne.n	8001858 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001812:	4b14      	ldr	r3, [pc, #80]	; (8001864 <HAL_ADC_MspInit+0x74>)
 8001814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001816:	4b13      	ldr	r3, [pc, #76]	; (8001864 <HAL_ADC_MspInit+0x74>)
 8001818:	2180      	movs	r1, #128	; 0x80
 800181a:	0089      	lsls	r1, r1, #2
 800181c:	430a      	orrs	r2, r1
 800181e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001820:	4b10      	ldr	r3, [pc, #64]	; (8001864 <HAL_ADC_MspInit+0x74>)
 8001822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001824:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <HAL_ADC_MspInit+0x74>)
 8001826:	2101      	movs	r1, #1
 8001828:	430a      	orrs	r2, r1
 800182a:	62da      	str	r2, [r3, #44]	; 0x2c
 800182c:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <HAL_ADC_MspInit+0x74>)
 800182e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001830:	2201      	movs	r2, #1
 8001832:	4013      	ands	r3, r2
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0-CK_IN     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001838:	193b      	adds	r3, r7, r4
 800183a:	2201      	movs	r2, #1
 800183c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800183e:	193b      	adds	r3, r7, r4
 8001840:	2203      	movs	r2, #3
 8001842:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	193b      	adds	r3, r7, r4
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	193a      	adds	r2, r7, r4
 800184c:	23a0      	movs	r3, #160	; 0xa0
 800184e:	05db      	lsls	r3, r3, #23
 8001850:	0011      	movs	r1, r2
 8001852:	0018      	movs	r0, r3
 8001854:	f000 fd44 	bl	80022e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001858:	46c0      	nop			; (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	b009      	add	sp, #36	; 0x24
 800185e:	bd90      	pop	{r4, r7, pc}
 8001860:	40012400 	.word	0x40012400
 8001864:	40021000 	.word	0x40021000

08001868 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b089      	sub	sp, #36	; 0x24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	240c      	movs	r4, #12
 8001872:	193b      	adds	r3, r7, r4
 8001874:	0018      	movs	r0, r3
 8001876:	2314      	movs	r3, #20
 8001878:	001a      	movs	r2, r3
 800187a:	2100      	movs	r1, #0
 800187c:	f002 fa67 	bl	8003d4e <memset>
  if(hspi->Instance==SPI1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a17      	ldr	r2, [pc, #92]	; (80018e4 <HAL_SPI_MspInit+0x7c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d128      	bne.n	80018dc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <HAL_SPI_MspInit+0x80>)
 800188c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800188e:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <HAL_SPI_MspInit+0x80>)
 8001890:	2180      	movs	r1, #128	; 0x80
 8001892:	0149      	lsls	r1, r1, #5
 8001894:	430a      	orrs	r2, r1
 8001896:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <HAL_SPI_MspInit+0x80>)
 800189a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_SPI_MspInit+0x80>)
 800189e:	2102      	movs	r1, #2
 80018a0:	430a      	orrs	r2, r1
 80018a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80018a4:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <HAL_SPI_MspInit+0x80>)
 80018a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a8:	2202      	movs	r2, #2
 80018aa:	4013      	ands	r3, r2
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80018b0:	0021      	movs	r1, r4
 80018b2:	187b      	adds	r3, r7, r1
 80018b4:	2238      	movs	r2, #56	; 0x38
 80018b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	187b      	adds	r3, r7, r1
 80018ba:	2202      	movs	r2, #2
 80018bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	187b      	adds	r3, r7, r1
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c4:	187b      	adds	r3, r7, r1
 80018c6:	2203      	movs	r2, #3
 80018c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80018ca:	187b      	adds	r3, r7, r1
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d0:	187b      	adds	r3, r7, r1
 80018d2:	4a06      	ldr	r2, [pc, #24]	; (80018ec <HAL_SPI_MspInit+0x84>)
 80018d4:	0019      	movs	r1, r3
 80018d6:	0010      	movs	r0, r2
 80018d8:	f000 fd02 	bl	80022e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018dc:	46c0      	nop			; (mov r8, r8)
 80018de:	46bd      	mov	sp, r7
 80018e0:	b009      	add	sp, #36	; 0x24
 80018e2:	bd90      	pop	{r4, r7, pc}
 80018e4:	40013000 	.word	0x40013000
 80018e8:	40021000 	.word	0x40021000
 80018ec:	50000400 	.word	0x50000400

080018f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <NMI_Handler+0x4>

080018f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018fa:	e7fe      	b.n	80018fa <HardFault_Handler+0x4>

080018fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001900:	46c0      	nop			; (mov r8, r8)
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800190a:	46c0      	nop			; (mov r8, r8)
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001914:	f000 f89e 	bl	8001a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001918:	46c0      	nop			; (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001928:	4813      	ldr	r0, [pc, #76]	; (8001978 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800192a:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 800192c:	4813      	ldr	r0, [pc, #76]	; (800197c <LoopForever+0x6>)
    LDR R1, [R0]
 800192e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001930:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001932:	4a13      	ldr	r2, [pc, #76]	; (8001980 <LoopForever+0xa>)
    CMP R1, R2
 8001934:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001936:	d105      	bne.n	8001944 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001938:	4812      	ldr	r0, [pc, #72]	; (8001984 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800193a:	4913      	ldr	r1, [pc, #76]	; (8001988 <LoopForever+0x12>)
    STR R1, [R0]
 800193c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800193e:	4813      	ldr	r0, [pc, #76]	; (800198c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001940:	4913      	ldr	r1, [pc, #76]	; (8001990 <LoopForever+0x1a>)
    STR R1, [R0]
 8001942:	6001      	str	r1, [r0, #0]

08001944 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001944:	4813      	ldr	r0, [pc, #76]	; (8001994 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001946:	4914      	ldr	r1, [pc, #80]	; (8001998 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001948:	4a14      	ldr	r2, [pc, #80]	; (800199c <LoopForever+0x26>)
  movs r3, #0
 800194a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800194c:	e002      	b.n	8001954 <LoopCopyDataInit>

0800194e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001952:	3304      	adds	r3, #4

08001954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001958:	d3f9      	bcc.n	800194e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195a:	4a11      	ldr	r2, [pc, #68]	; (80019a0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 800195c:	4c11      	ldr	r4, [pc, #68]	; (80019a4 <LoopForever+0x2e>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001960:	e001      	b.n	8001966 <LoopFillZerobss>

08001962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001964:	3204      	adds	r2, #4

08001966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001968:	d3fb      	bcc.n	8001962 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800196a:	f7ff ffd8 	bl	800191e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800196e:	f002 f9c1 	bl	8003cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001972:	f7ff fbe5 	bl	8001140 <main>

08001976 <LoopForever>:

LoopForever:
    b LoopForever
 8001976:	e7fe      	b.n	8001976 <LoopForever>
   ldr   r0, =_estack
 8001978:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 800197c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001980:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8001984:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001988:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800198c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001990:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001998:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800199c:	08003dac 	.word	0x08003dac
  ldr r2, =_sbss
 80019a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80019a4:	20000148 	.word	0x20000148

080019a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019a8:	e7fe      	b.n	80019a8 <ADC1_IRQHandler>
	...

080019ac <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019b2:	1dfb      	adds	r3, r7, #7
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_Init+0x3c>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_Init+0x3c>)
 80019be:	2140      	movs	r1, #64	; 0x40
 80019c0:	430a      	orrs	r2, r1
 80019c2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019c4:	2000      	movs	r0, #0
 80019c6:	f000 f811 	bl	80019ec <HAL_InitTick>
 80019ca:	1e03      	subs	r3, r0, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80019ce:	1dfb      	adds	r3, r7, #7
 80019d0:	2201      	movs	r2, #1
 80019d2:	701a      	strb	r2, [r3, #0]
 80019d4:	e001      	b.n	80019da <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019d6:	f7ff fef7 	bl	80017c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019da:	1dfb      	adds	r3, r7, #7
 80019dc:	781b      	ldrb	r3, [r3, #0]
}
 80019de:	0018      	movs	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	b002      	add	sp, #8
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	40022000 	.word	0x40022000

080019ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ec:	b590      	push	{r4, r7, lr}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019f4:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <HAL_InitTick+0x5c>)
 80019f6:	681c      	ldr	r4, [r3, #0]
 80019f8:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <HAL_InitTick+0x60>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	0019      	movs	r1, r3
 80019fe:	23fa      	movs	r3, #250	; 0xfa
 8001a00:	0098      	lsls	r0, r3, #2
 8001a02:	f7fe fb81 	bl	8000108 <__udivsi3>
 8001a06:	0003      	movs	r3, r0
 8001a08:	0019      	movs	r1, r3
 8001a0a:	0020      	movs	r0, r4
 8001a0c:	f7fe fb7c 	bl	8000108 <__udivsi3>
 8001a10:	0003      	movs	r3, r0
 8001a12:	0018      	movs	r0, r3
 8001a14:	f000 fc57 	bl	80022c6 <HAL_SYSTICK_Config>
 8001a18:	1e03      	subs	r3, r0, #0
 8001a1a:	d001      	beq.n	8001a20 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e00f      	b.n	8001a40 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	d80b      	bhi.n	8001a3e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	2301      	movs	r3, #1
 8001a2a:	425b      	negs	r3, r3
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f000 fc34 	bl	800229c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_InitTick+0x64>)
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e000      	b.n	8001a40 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
}
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b003      	add	sp, #12
 8001a46:	bd90      	pop	{r4, r7, pc}
 8001a48:	20000000 	.word	0x20000000
 8001a4c:	20000008 	.word	0x20000008
 8001a50:	20000004 	.word	0x20000004

08001a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_IncTick+0x1c>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	001a      	movs	r2, r3
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_IncTick+0x20>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	18d2      	adds	r2, r2, r3
 8001a64:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <HAL_IncTick+0x20>)
 8001a66:	601a      	str	r2, [r3, #0]
}
 8001a68:	46c0      	nop			; (mov r8, r8)
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	20000008 	.word	0x20000008
 8001a74:	20000144 	.word	0x20000144

08001a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a7c:	4b02      	ldr	r3, [pc, #8]	; (8001a88 <HAL_GetTick+0x10>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
}
 8001a80:	0018      	movs	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	20000144 	.word	0x20000144

08001a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a94:	f7ff fff0 	bl	8001a78 <HAL_GetTick>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	d005      	beq.n	8001ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <HAL_Delay+0x44>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	001a      	movs	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	189b      	adds	r3, r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	f7ff ffe0 	bl	8001a78 <HAL_GetTick>
 8001ab8:	0002      	movs	r2, r0
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d8f7      	bhi.n	8001ab4 <HAL_Delay+0x28>
  {
  }
}
 8001ac4:	46c0      	nop			; (mov r8, r8)
 8001ac6:	46c0      	nop			; (mov r8, r8)
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	b004      	add	sp, #16
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	20000008 	.word	0x20000008

08001ad4 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e159      	b.n	8001d9a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10a      	bne.n	8001b04 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2250      	movs	r2, #80	; 0x50
 8001af8:	2100      	movs	r1, #0
 8001afa:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	0018      	movs	r0, r3
 8001b00:	f7ff fe76 	bl	80017f0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b08:	2210      	movs	r2, #16
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b10      	cmp	r3, #16
 8001b0e:	d005      	beq.n	8001b1c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2204      	movs	r2, #4
 8001b18:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001b1a:	d00b      	beq.n	8001b34 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b20:	2210      	movs	r2, #16
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2250      	movs	r2, #80	; 0x50
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e132      	b.n	8001d9a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b38:	4a9a      	ldr	r2, [pc, #616]	; (8001da4 <HAL_ADC_Init+0x2d0>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d108      	bne.n	8001b64 <HAL_ADC_Init+0x90>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_ADC_Init+0x90>
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <HAL_ADC_Init+0x92>
 8001b64:	2300      	movs	r3, #0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d149      	bne.n	8001bfe <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	23c0      	movs	r3, #192	; 0xc0
 8001b70:	061b      	lsls	r3, r3, #24
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d00b      	beq.n	8001b8e <HAL_ADC_Init+0xba>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	05db      	lsls	r3, r3, #23
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d005      	beq.n	8001b8e <HAL_ADC_Init+0xba>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	2380      	movs	r3, #128	; 0x80
 8001b88:	061b      	lsls	r3, r3, #24
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d111      	bne.n	8001bb2 <HAL_ADC_Init+0xde>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	691a      	ldr	r2, [r3, #16]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	0092      	lsls	r2, r2, #2
 8001b9a:	0892      	lsrs	r2, r2, #2
 8001b9c:	611a      	str	r2, [r3, #16]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6919      	ldr	r1, [r3, #16]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	611a      	str	r2, [r3, #16]
 8001bb0:	e014      	b.n	8001bdc <HAL_ADC_Init+0x108>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	691a      	ldr	r2, [r3, #16]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	0092      	lsls	r2, r2, #2
 8001bbe:	0892      	lsrs	r2, r2, #2
 8001bc0:	611a      	str	r2, [r3, #16]
 8001bc2:	4b79      	ldr	r3, [pc, #484]	; (8001da8 <HAL_ADC_Init+0x2d4>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	4b78      	ldr	r3, [pc, #480]	; (8001da8 <HAL_ADC_Init+0x2d4>)
 8001bc8:	4978      	ldr	r1, [pc, #480]	; (8001dac <HAL_ADC_Init+0x2d8>)
 8001bca:	400a      	ands	r2, r1
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	4b76      	ldr	r3, [pc, #472]	; (8001da8 <HAL_ADC_Init+0x2d4>)
 8001bd0:	6819      	ldr	r1, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	4b74      	ldr	r3, [pc, #464]	; (8001da8 <HAL_ADC_Init+0x2d4>)
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2118      	movs	r1, #24
 8001be8:	438a      	bics	r2, r1
 8001bea:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68d9      	ldr	r1, [r3, #12]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001bfe:	4b6a      	ldr	r3, [pc, #424]	; (8001da8 <HAL_ADC_Init+0x2d4>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	4b69      	ldr	r3, [pc, #420]	; (8001da8 <HAL_ADC_Init+0x2d4>)
 8001c04:	496a      	ldr	r1, [pc, #424]	; (8001db0 <HAL_ADC_Init+0x2dc>)
 8001c06:	400a      	ands	r2, r1
 8001c08:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8001c0a:	4b67      	ldr	r3, [pc, #412]	; (8001da8 <HAL_ADC_Init+0x2d4>)
 8001c0c:	6819      	ldr	r1, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c12:	065a      	lsls	r2, r3, #25
 8001c14:	4b64      	ldr	r3, [pc, #400]	; (8001da8 <HAL_ADC_Init+0x2d4>)
 8001c16:	430a      	orrs	r2, r1
 8001c18:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	055b      	lsls	r3, r3, #21
 8001c24:	4013      	ands	r3, r2
 8001c26:	d108      	bne.n	8001c3a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2180      	movs	r1, #128	; 0x80
 8001c34:	0549      	lsls	r1, r1, #21
 8001c36:	430a      	orrs	r2, r1
 8001c38:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	495b      	ldr	r1, [pc, #364]	; (8001db4 <HAL_ADC_Init+0x2e0>)
 8001c46:	400a      	ands	r2, r1
 8001c48:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68d9      	ldr	r1, [r3, #12]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d101      	bne.n	8001c60 <HAL_ADC_Init+0x18c>
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	e000      	b.n	8001c62 <HAL_ADC_Init+0x18e>
 8001c60:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001c62:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2020      	movs	r0, #32
 8001c68:	5c1b      	ldrb	r3, [r3, r0]
 8001c6a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001c6c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	202c      	movs	r0, #44	; 0x2c
 8001c72:	5c1b      	ldrb	r3, [r3, r0]
 8001c74:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001c76:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001c7c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001c84:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001c8c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c9a:	23c2      	movs	r3, #194	; 0xc2
 8001c9c:	33ff      	adds	r3, #255	; 0xff
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d00b      	beq.n	8001cba <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68d9      	ldr	r1, [r3, #12]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2221      	movs	r2, #33	; 0x21
 8001cbe:	5c9b      	ldrb	r3, [r3, r2]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d11a      	bne.n	8001cfa <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	5c9b      	ldrb	r3, [r3, r2]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d109      	bne.n	8001ce2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68da      	ldr	r2, [r3, #12]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2180      	movs	r1, #128	; 0x80
 8001cda:	0249      	lsls	r1, r1, #9
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	60da      	str	r2, [r3, #12]
 8001ce0:	e00b      	b.n	8001cfa <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d11f      	bne.n	8001d42 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	492a      	ldr	r1, [pc, #168]	; (8001db8 <HAL_ADC_Init+0x2e4>)
 8001d0e:	400a      	ands	r2, r1
 8001d10:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6919      	ldr	r1, [r3, #16]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001d20:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8001d26:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691a      	ldr	r2, [r3, #16]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	611a      	str	r2, [r3, #16]
 8001d40:	e00e      	b.n	8001d60 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d107      	bne.n	8001d60 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691a      	ldr	r2, [r3, #16]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	438a      	bics	r2, r1
 8001d5e:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	695a      	ldr	r2, [r3, #20]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2107      	movs	r1, #7
 8001d6c:	438a      	bics	r2, r1
 8001d6e:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6959      	ldr	r1, [r3, #20]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	4393      	bics	r3, r2
 8001d90:	2201      	movs	r2, #1
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	b002      	add	sp, #8
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	fffffefd 	.word	0xfffffefd
 8001da8:	40012708 	.word	0x40012708
 8001dac:	ffc3ffff 	.word	0xffc3ffff
 8001db0:	fdffffff 	.word	0xfdffffff
 8001db4:	fffe0219 	.word	0xfffe0219
 8001db8:	fffffc03 	.word	0xfffffc03

08001dbc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001dbc:	b590      	push	{r4, r7, lr}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dc4:	230f      	movs	r3, #15
 8001dc6:	18fb      	adds	r3, r7, r3
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d138      	bne.n	8001e4a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2250      	movs	r2, #80	; 0x50
 8001ddc:	5c9b      	ldrb	r3, [r3, r2]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d101      	bne.n	8001de6 <HAL_ADC_Start+0x2a>
 8001de2:	2302      	movs	r3, #2
 8001de4:	e038      	b.n	8001e58 <HAL_ADC_Start+0x9c>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2250      	movs	r2, #80	; 0x50
 8001dea:	2101      	movs	r1, #1
 8001dec:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d007      	beq.n	8001e06 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001df6:	230f      	movs	r3, #15
 8001df8:	18fc      	adds	r4, r7, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	f000 f93b 	bl	8002078 <ADC_Enable>
 8001e02:	0003      	movs	r3, r0
 8001e04:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e06:	230f      	movs	r3, #15
 8001e08:	18fb      	adds	r3, r7, r3
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d120      	bne.n	8001e52 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e14:	4a12      	ldr	r2, [pc, #72]	; (8001e60 <HAL_ADC_Start+0xa4>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	2280      	movs	r2, #128	; 0x80
 8001e1a:	0052      	lsls	r2, r2, #1
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2250      	movs	r2, #80	; 0x50
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	221c      	movs	r2, #28
 8001e36:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2104      	movs	r1, #4
 8001e44:	430a      	orrs	r2, r1
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	e003      	b.n	8001e52 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e4a:	230f      	movs	r3, #15
 8001e4c:	18fb      	adds	r3, r7, r3
 8001e4e:	2202      	movs	r2, #2
 8001e50:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e52:	230f      	movs	r3, #15
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	781b      	ldrb	r3, [r3, #0]
}
 8001e58:	0018      	movs	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b005      	add	sp, #20
 8001e5e:	bd90      	pop	{r4, r7, pc}
 8001e60:	fffff0fe 	.word	0xfffff0fe

08001e64 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d102      	bne.n	8001e84 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001e7e:	2308      	movs	r3, #8
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	e014      	b.n	8001eae <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d10b      	bne.n	8001eaa <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e96:	2220      	movs	r2, #32
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2250      	movs	r2, #80	; 0x50
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e06c      	b.n	8001f84 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001eaa:	230c      	movs	r3, #12
 8001eac:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001eae:	f7ff fde3 	bl	8001a78 <HAL_GetTick>
 8001eb2:	0003      	movs	r3, r0
 8001eb4:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001eb6:	e019      	b.n	8001eec <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	d016      	beq.n	8001eec <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d007      	beq.n	8001ed4 <HAL_ADC_PollForConversion+0x70>
 8001ec4:	f7ff fdd8 	bl	8001a78 <HAL_GetTick>
 8001ec8:	0002      	movs	r2, r0
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d20b      	bcs.n	8001eec <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed8:	2204      	movs	r2, #4
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2250      	movs	r2, #80	; 0x50
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e04b      	b.n	8001f84 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d0df      	beq.n	8001eb8 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efc:	2280      	movs	r2, #128	; 0x80
 8001efe:	0092      	lsls	r2, r2, #2
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68da      	ldr	r2, [r3, #12]
 8001f0c:	23c0      	movs	r3, #192	; 0xc0
 8001f0e:	011b      	lsls	r3, r3, #4
 8001f10:	4013      	ands	r3, r2
 8001f12:	d12e      	bne.n	8001f72 <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2220      	movs	r2, #32
 8001f18:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d129      	bne.n	8001f72 <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2208      	movs	r2, #8
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d122      	bne.n	8001f72 <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2204      	movs	r2, #4
 8001f34:	4013      	ands	r3, r2
 8001f36:	d110      	bne.n	8001f5a <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	210c      	movs	r1, #12
 8001f44:	438a      	bics	r2, r1
 8001f46:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4c:	4a0f      	ldr	r2, [pc, #60]	; (8001f8c <HAL_ADC_PollForConversion+0x128>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2201      	movs	r2, #1
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	655a      	str	r2, [r3, #84]	; 0x54
 8001f58:	e00b      	b.n	8001f72 <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5e:	2220      	movs	r2, #32
 8001f60:	431a      	orrs	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d103      	bne.n	8001f82 <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	220c      	movs	r2, #12
 8001f80:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	0018      	movs	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b004      	add	sp, #16
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	fffffefe 	.word	0xfffffefe

08001f90 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	b002      	add	sp, #8
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2250      	movs	r2, #80	; 0x50
 8001fb6:	5c9b      	ldrb	r3, [r3, r2]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d101      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x18>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	e050      	b.n	8002062 <HAL_ADC_ConfigChannel+0xba>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2250      	movs	r2, #80	; 0x50
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	2204      	movs	r2, #4
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d00b      	beq.n	8001fec <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd8:	2220      	movs	r2, #32
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2250      	movs	r2, #80	; 0x50
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e03a      	b.n	8002062 <HAL_ADC_ConfigChannel+0xba>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	4a1e      	ldr	r2, [pc, #120]	; (800206c <HAL_ADC_ConfigChannel+0xc4>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d018      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	035b      	lsls	r3, r3, #13
 8002002:	0b5a      	lsrs	r2, r3, #13
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	629a      	str	r2, [r3, #40]	; 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	029b      	lsls	r3, r3, #10
 8002014:	4013      	ands	r3, r2
 8002016:	d01f      	beq.n	8002058 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8002018:	4b15      	ldr	r3, [pc, #84]	; (8002070 <HAL_ADC_ConfigChannel+0xc8>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4b14      	ldr	r3, [pc, #80]	; (8002070 <HAL_ADC_ConfigChannel+0xc8>)
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	03c9      	lsls	r1, r1, #15
 8002022:	430a      	orrs	r2, r1
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	e017      	b.n	8002058 <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	035b      	lsls	r3, r3, #13
 8002034:	0b5b      	lsrs	r3, r3, #13
 8002036:	43d9      	mvns	r1, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	400a      	ands	r2, r1
 800203e:	629a      	str	r2, [r3, #40]	; 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;   
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	029b      	lsls	r3, r3, #10
 8002048:	4013      	ands	r3, r2
 800204a:	d005      	beq.n	8002058 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800204c:	4b08      	ldr	r3, [pc, #32]	; (8002070 <HAL_ADC_ConfigChannel+0xc8>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4b07      	ldr	r3, [pc, #28]	; (8002070 <HAL_ADC_ConfigChannel+0xc8>)
 8002052:	4908      	ldr	r1, [pc, #32]	; (8002074 <HAL_ADC_ConfigChannel+0xcc>)
 8002054:	400a      	ands	r2, r1
 8002056:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2250      	movs	r2, #80	; 0x50
 800205c:	2100      	movs	r1, #0
 800205e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	0018      	movs	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	b002      	add	sp, #8
 8002068:	bd80      	pop	{r7, pc}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	00001001 	.word	0x00001001
 8002070:	40012708 	.word	0x40012708
 8002074:	ffbfffff 	.word	0xffbfffff

08002078 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2203      	movs	r2, #3
 800208c:	4013      	ands	r3, r2
 800208e:	2b01      	cmp	r3, #1
 8002090:	d108      	bne.n	80020a4 <ADC_Enable+0x2c>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2201      	movs	r2, #1
 800209a:	4013      	ands	r3, r2
 800209c:	2b01      	cmp	r3, #1
 800209e:	d101      	bne.n	80020a4 <ADC_Enable+0x2c>
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <ADC_Enable+0x2e>
 80020a4:	2300      	movs	r3, #0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d13f      	bne.n	800212a <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	4a20      	ldr	r2, [pc, #128]	; (8002134 <ADC_Enable+0xbc>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	d00d      	beq.n	80020d2 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ba:	2210      	movs	r2, #16
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c6:	2201      	movs	r2, #1
 80020c8:	431a      	orrs	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e02c      	b.n	800212c <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2101      	movs	r1, #1
 80020de:	430a      	orrs	r2, r1
 80020e0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80020e2:	2001      	movs	r0, #1
 80020e4:	f000 f828 	bl	8002138 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80020e8:	f7ff fcc6 	bl	8001a78 <HAL_GetTick>
 80020ec:	0003      	movs	r3, r0
 80020ee:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80020f0:	e014      	b.n	800211c <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020f2:	f7ff fcc1 	bl	8001a78 <HAL_GetTick>
 80020f6:	0002      	movs	r2, r0
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b0a      	cmp	r3, #10
 80020fe:	d90d      	bls.n	800211c <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002104:	2210      	movs	r2, #16
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002110:	2201      	movs	r2, #1
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e007      	b.n	800212c <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2201      	movs	r2, #1
 8002124:	4013      	ands	r3, r2
 8002126:	2b01      	cmp	r3, #1
 8002128:	d1e3      	bne.n	80020f2 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	0018      	movs	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	b004      	add	sp, #16
 8002132:	bd80      	pop	{r7, pc}
 8002134:	80000017 	.word	0x80000017

08002138 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <ADC_DelayMicroSecond+0x38>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	490b      	ldr	r1, [pc, #44]	; (8002174 <ADC_DelayMicroSecond+0x3c>)
 8002146:	0018      	movs	r0, r3
 8002148:	f7fd ffde 	bl	8000108 <__udivsi3>
 800214c:	0003      	movs	r3, r0
 800214e:	001a      	movs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4353      	muls	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8002156:	e002      	b.n	800215e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	3b01      	subs	r3, #1
 800215c:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1f9      	bne.n	8002158 <ADC_DelayMicroSecond+0x20>
  } 
}
 8002164:	46c0      	nop			; (mov r8, r8)
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	46bd      	mov	sp, r7
 800216a:	b004      	add	sp, #16
 800216c:	bd80      	pop	{r7, pc}
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	20000000 	.word	0x20000000
 8002174:	000f4240 	.word	0x000f4240

08002178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002178:	b590      	push	{r4, r7, lr}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	0002      	movs	r2, r0
 8002180:	6039      	str	r1, [r7, #0]
 8002182:	1dfb      	adds	r3, r7, #7
 8002184:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002186:	1dfb      	adds	r3, r7, #7
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b7f      	cmp	r3, #127	; 0x7f
 800218c:	d828      	bhi.n	80021e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800218e:	4a2f      	ldr	r2, [pc, #188]	; (800224c <__NVIC_SetPriority+0xd4>)
 8002190:	1dfb      	adds	r3, r7, #7
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	b25b      	sxtb	r3, r3
 8002196:	089b      	lsrs	r3, r3, #2
 8002198:	33c0      	adds	r3, #192	; 0xc0
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	589b      	ldr	r3, [r3, r2]
 800219e:	1dfa      	adds	r2, r7, #7
 80021a0:	7812      	ldrb	r2, [r2, #0]
 80021a2:	0011      	movs	r1, r2
 80021a4:	2203      	movs	r2, #3
 80021a6:	400a      	ands	r2, r1
 80021a8:	00d2      	lsls	r2, r2, #3
 80021aa:	21ff      	movs	r1, #255	; 0xff
 80021ac:	4091      	lsls	r1, r2
 80021ae:	000a      	movs	r2, r1
 80021b0:	43d2      	mvns	r2, r2
 80021b2:	401a      	ands	r2, r3
 80021b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	019b      	lsls	r3, r3, #6
 80021ba:	22ff      	movs	r2, #255	; 0xff
 80021bc:	401a      	ands	r2, r3
 80021be:	1dfb      	adds	r3, r7, #7
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	0018      	movs	r0, r3
 80021c4:	2303      	movs	r3, #3
 80021c6:	4003      	ands	r3, r0
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021cc:	481f      	ldr	r0, [pc, #124]	; (800224c <__NVIC_SetPriority+0xd4>)
 80021ce:	1dfb      	adds	r3, r7, #7
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	b25b      	sxtb	r3, r3
 80021d4:	089b      	lsrs	r3, r3, #2
 80021d6:	430a      	orrs	r2, r1
 80021d8:	33c0      	adds	r3, #192	; 0xc0
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80021de:	e031      	b.n	8002244 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021e0:	4a1b      	ldr	r2, [pc, #108]	; (8002250 <__NVIC_SetPriority+0xd8>)
 80021e2:	1dfb      	adds	r3, r7, #7
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	0019      	movs	r1, r3
 80021e8:	230f      	movs	r3, #15
 80021ea:	400b      	ands	r3, r1
 80021ec:	3b08      	subs	r3, #8
 80021ee:	089b      	lsrs	r3, r3, #2
 80021f0:	3306      	adds	r3, #6
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	18d3      	adds	r3, r2, r3
 80021f6:	3304      	adds	r3, #4
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	1dfa      	adds	r2, r7, #7
 80021fc:	7812      	ldrb	r2, [r2, #0]
 80021fe:	0011      	movs	r1, r2
 8002200:	2203      	movs	r2, #3
 8002202:	400a      	ands	r2, r1
 8002204:	00d2      	lsls	r2, r2, #3
 8002206:	21ff      	movs	r1, #255	; 0xff
 8002208:	4091      	lsls	r1, r2
 800220a:	000a      	movs	r2, r1
 800220c:	43d2      	mvns	r2, r2
 800220e:	401a      	ands	r2, r3
 8002210:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	019b      	lsls	r3, r3, #6
 8002216:	22ff      	movs	r2, #255	; 0xff
 8002218:	401a      	ands	r2, r3
 800221a:	1dfb      	adds	r3, r7, #7
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	0018      	movs	r0, r3
 8002220:	2303      	movs	r3, #3
 8002222:	4003      	ands	r3, r0
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002228:	4809      	ldr	r0, [pc, #36]	; (8002250 <__NVIC_SetPriority+0xd8>)
 800222a:	1dfb      	adds	r3, r7, #7
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	001c      	movs	r4, r3
 8002230:	230f      	movs	r3, #15
 8002232:	4023      	ands	r3, r4
 8002234:	3b08      	subs	r3, #8
 8002236:	089b      	lsrs	r3, r3, #2
 8002238:	430a      	orrs	r2, r1
 800223a:	3306      	adds	r3, #6
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	18c3      	adds	r3, r0, r3
 8002240:	3304      	adds	r3, #4
 8002242:	601a      	str	r2, [r3, #0]
}
 8002244:	46c0      	nop			; (mov r8, r8)
 8002246:	46bd      	mov	sp, r7
 8002248:	b003      	add	sp, #12
 800224a:	bd90      	pop	{r4, r7, pc}
 800224c:	e000e100 	.word	0xe000e100
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	1e5a      	subs	r2, r3, #1
 8002260:	2380      	movs	r3, #128	; 0x80
 8002262:	045b      	lsls	r3, r3, #17
 8002264:	429a      	cmp	r2, r3
 8002266:	d301      	bcc.n	800226c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002268:	2301      	movs	r3, #1
 800226a:	e010      	b.n	800228e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800226c:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <SysTick_Config+0x44>)
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	3a01      	subs	r2, #1
 8002272:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002274:	2301      	movs	r3, #1
 8002276:	425b      	negs	r3, r3
 8002278:	2103      	movs	r1, #3
 800227a:	0018      	movs	r0, r3
 800227c:	f7ff ff7c 	bl	8002178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002280:	4b05      	ldr	r3, [pc, #20]	; (8002298 <SysTick_Config+0x44>)
 8002282:	2200      	movs	r2, #0
 8002284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002286:	4b04      	ldr	r3, [pc, #16]	; (8002298 <SysTick_Config+0x44>)
 8002288:	2207      	movs	r2, #7
 800228a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800228c:	2300      	movs	r3, #0
}
 800228e:	0018      	movs	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	b002      	add	sp, #8
 8002294:	bd80      	pop	{r7, pc}
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	e000e010 	.word	0xe000e010

0800229c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	210f      	movs	r1, #15
 80022a8:	187b      	adds	r3, r7, r1
 80022aa:	1c02      	adds	r2, r0, #0
 80022ac:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	187b      	adds	r3, r7, r1
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	b25b      	sxtb	r3, r3
 80022b6:	0011      	movs	r1, r2
 80022b8:	0018      	movs	r0, r3
 80022ba:	f7ff ff5d 	bl	8002178 <__NVIC_SetPriority>
}
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	46bd      	mov	sp, r7
 80022c2:	b004      	add	sp, #16
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	0018      	movs	r0, r3
 80022d2:	f7ff ffbf 	bl	8002254 <SysTick_Config>
 80022d6:	0003      	movs	r3, r0
}
 80022d8:	0018      	movs	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	b002      	add	sp, #8
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80022f6:	e143      	b.n	8002580 <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2101      	movs	r1, #1
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	4091      	lsls	r1, r2
 8002302:	000a      	movs	r2, r1
 8002304:	4013      	ands	r3, r2
 8002306:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d100      	bne.n	8002310 <HAL_GPIO_Init+0x30>
 800230e:	e134      	b.n	800257a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d00b      	beq.n	8002330 <HAL_GPIO_Init+0x50>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b02      	cmp	r3, #2
 800231e:	d007      	beq.n	8002330 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002324:	2b11      	cmp	r3, #17
 8002326:	d003      	beq.n	8002330 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b12      	cmp	r3, #18
 800232e:	d130      	bne.n	8002392 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	2203      	movs	r2, #3
 800233c:	409a      	lsls	r2, r3
 800233e:	0013      	movs	r3, r2
 8002340:	43da      	mvns	r2, r3
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4013      	ands	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	409a      	lsls	r2, r3
 8002352:	0013      	movs	r3, r2
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002366:	2201      	movs	r2, #1
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	409a      	lsls	r2, r3
 800236c:	0013      	movs	r3, r2
 800236e:	43da      	mvns	r2, r3
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4013      	ands	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	091b      	lsrs	r3, r3, #4
 800237c:	2201      	movs	r2, #1
 800237e:	401a      	ands	r2, r3
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	409a      	lsls	r2, r3
 8002384:	0013      	movs	r3, r2
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	2203      	movs	r2, #3
 800239e:	409a      	lsls	r2, r3
 80023a0:	0013      	movs	r3, r2
 80023a2:	43da      	mvns	r2, r3
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	409a      	lsls	r2, r3
 80023b4:	0013      	movs	r3, r2
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0xf2>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b12      	cmp	r3, #18
 80023d0:	d123      	bne.n	800241a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	08da      	lsrs	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3208      	adds	r2, #8
 80023da:	0092      	lsls	r2, r2, #2
 80023dc:	58d3      	ldr	r3, [r2, r3]
 80023de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	2207      	movs	r2, #7
 80023e4:	4013      	ands	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	220f      	movs	r2, #15
 80023ea:	409a      	lsls	r2, r3
 80023ec:	0013      	movs	r3, r2
 80023ee:	43da      	mvns	r2, r3
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	4013      	ands	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	691a      	ldr	r2, [r3, #16]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2107      	movs	r1, #7
 80023fe:	400b      	ands	r3, r1
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	409a      	lsls	r2, r3
 8002404:	0013      	movs	r3, r2
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	08da      	lsrs	r2, r3, #3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3208      	adds	r2, #8
 8002414:	0092      	lsls	r2, r2, #2
 8002416:	6939      	ldr	r1, [r7, #16]
 8002418:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	2203      	movs	r2, #3
 8002426:	409a      	lsls	r2, r3
 8002428:	0013      	movs	r3, r2
 800242a:	43da      	mvns	r2, r3
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	4013      	ands	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2203      	movs	r2, #3
 8002438:	401a      	ands	r2, r3
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	409a      	lsls	r2, r3
 8002440:	0013      	movs	r3, r2
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	2380      	movs	r3, #128	; 0x80
 8002454:	055b      	lsls	r3, r3, #21
 8002456:	4013      	ands	r3, r2
 8002458:	d100      	bne.n	800245c <HAL_GPIO_Init+0x17c>
 800245a:	e08e      	b.n	800257a <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245c:	4b4e      	ldr	r3, [pc, #312]	; (8002598 <HAL_GPIO_Init+0x2b8>)
 800245e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002460:	4b4d      	ldr	r3, [pc, #308]	; (8002598 <HAL_GPIO_Init+0x2b8>)
 8002462:	2101      	movs	r1, #1
 8002464:	430a      	orrs	r2, r1
 8002466:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002468:	4a4c      	ldr	r2, [pc, #304]	; (800259c <HAL_GPIO_Init+0x2bc>)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	089b      	lsrs	r3, r3, #2
 800246e:	3302      	adds	r3, #2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	589b      	ldr	r3, [r3, r2]
 8002474:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2203      	movs	r2, #3
 800247a:	4013      	ands	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	220f      	movs	r2, #15
 8002480:	409a      	lsls	r2, r3
 8002482:	0013      	movs	r3, r2
 8002484:	43da      	mvns	r2, r3
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4013      	ands	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	23a0      	movs	r3, #160	; 0xa0
 8002490:	05db      	lsls	r3, r3, #23
 8002492:	429a      	cmp	r2, r3
 8002494:	d00d      	beq.n	80024b2 <HAL_GPIO_Init+0x1d2>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a41      	ldr	r2, [pc, #260]	; (80025a0 <HAL_GPIO_Init+0x2c0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d007      	beq.n	80024ae <HAL_GPIO_Init+0x1ce>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a40      	ldr	r2, [pc, #256]	; (80025a4 <HAL_GPIO_Init+0x2c4>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d101      	bne.n	80024aa <HAL_GPIO_Init+0x1ca>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e004      	b.n	80024b4 <HAL_GPIO_Init+0x1d4>
 80024aa:	2306      	movs	r3, #6
 80024ac:	e002      	b.n	80024b4 <HAL_GPIO_Init+0x1d4>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_GPIO_Init+0x1d4>
 80024b2:	2300      	movs	r3, #0
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	2103      	movs	r1, #3
 80024b8:	400a      	ands	r2, r1
 80024ba:	0092      	lsls	r2, r2, #2
 80024bc:	4093      	lsls	r3, r2
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024c4:	4935      	ldr	r1, [pc, #212]	; (800259c <HAL_GPIO_Init+0x2bc>)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	089b      	lsrs	r3, r3, #2
 80024ca:	3302      	adds	r3, #2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024d2:	4b35      	ldr	r3, [pc, #212]	; (80025a8 <HAL_GPIO_Init+0x2c8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	43da      	mvns	r2, r3
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4013      	ands	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	2380      	movs	r3, #128	; 0x80
 80024e8:	025b      	lsls	r3, r3, #9
 80024ea:	4013      	ands	r3, r2
 80024ec:	d003      	beq.n	80024f6 <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024f6:	4b2c      	ldr	r3, [pc, #176]	; (80025a8 <HAL_GPIO_Init+0x2c8>)
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80024fc:	4b2a      	ldr	r3, [pc, #168]	; (80025a8 <HAL_GPIO_Init+0x2c8>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	43da      	mvns	r2, r3
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4013      	ands	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	2380      	movs	r3, #128	; 0x80
 8002512:	029b      	lsls	r3, r3, #10
 8002514:	4013      	ands	r3, r2
 8002516:	d003      	beq.n	8002520 <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002520:	4b21      	ldr	r3, [pc, #132]	; (80025a8 <HAL_GPIO_Init+0x2c8>)
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002526:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <HAL_GPIO_Init+0x2c8>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	43da      	mvns	r2, r3
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4013      	ands	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	2380      	movs	r3, #128	; 0x80
 800253c:	035b      	lsls	r3, r3, #13
 800253e:	4013      	ands	r3, r2
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4313      	orrs	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800254a:	4b17      	ldr	r3, [pc, #92]	; (80025a8 <HAL_GPIO_Init+0x2c8>)
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002550:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <HAL_GPIO_Init+0x2c8>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	43da      	mvns	r2, r3
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4013      	ands	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	039b      	lsls	r3, r3, #14
 8002568:	4013      	ands	r3, r2
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4313      	orrs	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002574:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <HAL_GPIO_Init+0x2c8>)
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	3301      	adds	r3, #1
 800257e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	40da      	lsrs	r2, r3
 8002588:	1e13      	subs	r3, r2, #0
 800258a:	d000      	beq.n	800258e <HAL_GPIO_Init+0x2ae>
 800258c:	e6b4      	b.n	80022f8 <HAL_GPIO_Init+0x18>
  }
}
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	46c0      	nop			; (mov r8, r8)
 8002592:	46bd      	mov	sp, r7
 8002594:	b006      	add	sp, #24
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40021000 	.word	0x40021000
 800259c:	40010000 	.word	0x40010000
 80025a0:	50000400 	.word	0x50000400
 80025a4:	50000800 	.word	0x50000800
 80025a8:	40010400 	.word	0x40010400

080025ac <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	000a      	movs	r2, r1
 80025b6:	1cbb      	adds	r3, r7, #2
 80025b8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	1cba      	adds	r2, r7, #2
 80025c0:	8812      	ldrh	r2, [r2, #0]
 80025c2:	4013      	ands	r3, r2
 80025c4:	d004      	beq.n	80025d0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80025c6:	230f      	movs	r3, #15
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	2201      	movs	r2, #1
 80025cc:	701a      	strb	r2, [r3, #0]
 80025ce:	e003      	b.n	80025d8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025d0:	230f      	movs	r3, #15
 80025d2:	18fb      	adds	r3, r7, r3
 80025d4:	2200      	movs	r2, #0
 80025d6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80025d8:	230f      	movs	r3, #15
 80025da:	18fb      	adds	r3, r7, r3
 80025dc:	781b      	ldrb	r3, [r3, #0]
}
 80025de:	0018      	movs	r0, r3
 80025e0:	46bd      	mov	sp, r7
 80025e2:	b004      	add	sp, #16
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	0008      	movs	r0, r1
 80025f0:	0011      	movs	r1, r2
 80025f2:	1cbb      	adds	r3, r7, #2
 80025f4:	1c02      	adds	r2, r0, #0
 80025f6:	801a      	strh	r2, [r3, #0]
 80025f8:	1c7b      	adds	r3, r7, #1
 80025fa:	1c0a      	adds	r2, r1, #0
 80025fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025fe:	1c7b      	adds	r3, r7, #1
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d004      	beq.n	8002610 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002606:	1cbb      	adds	r3, r7, #2
 8002608:	881a      	ldrh	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800260e:	e003      	b.n	8002618 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002610:	1cbb      	adds	r3, r7, #2
 8002612:	881a      	ldrh	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002618:	46c0      	nop			; (mov r8, r8)
 800261a:	46bd      	mov	sp, r7
 800261c:	b002      	add	sp, #8
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002620:	b5b0      	push	{r4, r5, r7, lr}
 8002622:	b08a      	sub	sp, #40	; 0x28
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d102      	bne.n	8002634 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	f000 fb6c 	bl	8002d0c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002634:	4bc8      	ldr	r3, [pc, #800]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	220c      	movs	r2, #12
 800263a:	4013      	ands	r3, r2
 800263c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800263e:	4bc6      	ldr	r3, [pc, #792]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	2380      	movs	r3, #128	; 0x80
 8002644:	025b      	lsls	r3, r3, #9
 8002646:	4013      	ands	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2201      	movs	r2, #1
 8002650:	4013      	ands	r3, r2
 8002652:	d100      	bne.n	8002656 <HAL_RCC_OscConfig+0x36>
 8002654:	e07d      	b.n	8002752 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	2b08      	cmp	r3, #8
 800265a:	d007      	beq.n	800266c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	2b0c      	cmp	r3, #12
 8002660:	d112      	bne.n	8002688 <HAL_RCC_OscConfig+0x68>
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	2380      	movs	r3, #128	; 0x80
 8002666:	025b      	lsls	r3, r3, #9
 8002668:	429a      	cmp	r2, r3
 800266a:	d10d      	bne.n	8002688 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266c:	4bba      	ldr	r3, [pc, #744]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	029b      	lsls	r3, r3, #10
 8002674:	4013      	ands	r3, r2
 8002676:	d100      	bne.n	800267a <HAL_RCC_OscConfig+0x5a>
 8002678:	e06a      	b.n	8002750 <HAL_RCC_OscConfig+0x130>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d166      	bne.n	8002750 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	f000 fb42 	bl	8002d0c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	2380      	movs	r3, #128	; 0x80
 800268e:	025b      	lsls	r3, r3, #9
 8002690:	429a      	cmp	r2, r3
 8002692:	d107      	bne.n	80026a4 <HAL_RCC_OscConfig+0x84>
 8002694:	4bb0      	ldr	r3, [pc, #704]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4baf      	ldr	r3, [pc, #700]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 800269a:	2180      	movs	r1, #128	; 0x80
 800269c:	0249      	lsls	r1, r1, #9
 800269e:	430a      	orrs	r2, r1
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	e027      	b.n	80026f4 <HAL_RCC_OscConfig+0xd4>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	23a0      	movs	r3, #160	; 0xa0
 80026aa:	02db      	lsls	r3, r3, #11
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d10e      	bne.n	80026ce <HAL_RCC_OscConfig+0xae>
 80026b0:	4ba9      	ldr	r3, [pc, #676]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	4ba8      	ldr	r3, [pc, #672]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 80026b6:	2180      	movs	r1, #128	; 0x80
 80026b8:	02c9      	lsls	r1, r1, #11
 80026ba:	430a      	orrs	r2, r1
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	4ba6      	ldr	r3, [pc, #664]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	4ba5      	ldr	r3, [pc, #660]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 80026c4:	2180      	movs	r1, #128	; 0x80
 80026c6:	0249      	lsls	r1, r1, #9
 80026c8:	430a      	orrs	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	e012      	b.n	80026f4 <HAL_RCC_OscConfig+0xd4>
 80026ce:	4ba2      	ldr	r3, [pc, #648]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	4ba1      	ldr	r3, [pc, #644]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 80026d4:	49a1      	ldr	r1, [pc, #644]	; (800295c <HAL_RCC_OscConfig+0x33c>)
 80026d6:	400a      	ands	r2, r1
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	4b9f      	ldr	r3, [pc, #636]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	2380      	movs	r3, #128	; 0x80
 80026e0:	025b      	lsls	r3, r3, #9
 80026e2:	4013      	ands	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4b9b      	ldr	r3, [pc, #620]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4b9a      	ldr	r3, [pc, #616]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 80026ee:	499c      	ldr	r1, [pc, #624]	; (8002960 <HAL_RCC_OscConfig+0x340>)
 80026f0:	400a      	ands	r2, r1
 80026f2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d014      	beq.n	8002726 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fc:	f7ff f9bc 	bl	8001a78 <HAL_GetTick>
 8002700:	0003      	movs	r3, r0
 8002702:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002706:	f7ff f9b7 	bl	8001a78 <HAL_GetTick>
 800270a:	0002      	movs	r2, r0
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b64      	cmp	r3, #100	; 0x64
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e2f9      	b.n	8002d0c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002718:	4b8f      	ldr	r3, [pc, #572]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	029b      	lsls	r3, r3, #10
 8002720:	4013      	ands	r3, r2
 8002722:	d0f0      	beq.n	8002706 <HAL_RCC_OscConfig+0xe6>
 8002724:	e015      	b.n	8002752 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002726:	f7ff f9a7 	bl	8001a78 <HAL_GetTick>
 800272a:	0003      	movs	r3, r0
 800272c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002730:	f7ff f9a2 	bl	8001a78 <HAL_GetTick>
 8002734:	0002      	movs	r2, r0
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	; 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e2e4      	b.n	8002d0c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002742:	4b85      	ldr	r3, [pc, #532]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	2380      	movs	r3, #128	; 0x80
 8002748:	029b      	lsls	r3, r3, #10
 800274a:	4013      	ands	r3, r2
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x110>
 800274e:	e000      	b.n	8002752 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002750:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2202      	movs	r2, #2
 8002758:	4013      	ands	r3, r2
 800275a:	d100      	bne.n	800275e <HAL_RCC_OscConfig+0x13e>
 800275c:	e099      	b.n	8002892 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	2220      	movs	r2, #32
 8002768:	4013      	ands	r3, r2
 800276a:	d009      	beq.n	8002780 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800276c:	4b7a      	ldr	r3, [pc, #488]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4b79      	ldr	r3, [pc, #484]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 8002772:	2120      	movs	r1, #32
 8002774:	430a      	orrs	r2, r1
 8002776:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	2220      	movs	r2, #32
 800277c:	4393      	bics	r3, r2
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	2b04      	cmp	r3, #4
 8002784:	d005      	beq.n	8002792 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	2b0c      	cmp	r3, #12
 800278a:	d13e      	bne.n	800280a <HAL_RCC_OscConfig+0x1ea>
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d13b      	bne.n	800280a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002792:	4b71      	ldr	r3, [pc, #452]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2204      	movs	r2, #4
 8002798:	4013      	ands	r3, r2
 800279a:	d004      	beq.n	80027a6 <HAL_RCC_OscConfig+0x186>
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e2b2      	b.n	8002d0c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a6:	4b6c      	ldr	r3, [pc, #432]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	4a6e      	ldr	r2, [pc, #440]	; (8002964 <HAL_RCC_OscConfig+0x344>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	0019      	movs	r1, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	021a      	lsls	r2, r3, #8
 80027b6:	4b68      	ldr	r3, [pc, #416]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 80027b8:	430a      	orrs	r2, r1
 80027ba:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80027bc:	4b66      	ldr	r3, [pc, #408]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2209      	movs	r2, #9
 80027c2:	4393      	bics	r3, r2
 80027c4:	0019      	movs	r1, r3
 80027c6:	4b64      	ldr	r3, [pc, #400]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 80027c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ca:	430a      	orrs	r2, r1
 80027cc:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027ce:	f000 fbeb 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 80027d2:	0001      	movs	r1, r0
 80027d4:	4b60      	ldr	r3, [pc, #384]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	091b      	lsrs	r3, r3, #4
 80027da:	220f      	movs	r2, #15
 80027dc:	4013      	ands	r3, r2
 80027de:	4a62      	ldr	r2, [pc, #392]	; (8002968 <HAL_RCC_OscConfig+0x348>)
 80027e0:	5cd3      	ldrb	r3, [r2, r3]
 80027e2:	000a      	movs	r2, r1
 80027e4:	40da      	lsrs	r2, r3
 80027e6:	4b61      	ldr	r3, [pc, #388]	; (800296c <HAL_RCC_OscConfig+0x34c>)
 80027e8:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80027ea:	4b61      	ldr	r3, [pc, #388]	; (8002970 <HAL_RCC_OscConfig+0x350>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2513      	movs	r5, #19
 80027f0:	197c      	adds	r4, r7, r5
 80027f2:	0018      	movs	r0, r3
 80027f4:	f7ff f8fa 	bl	80019ec <HAL_InitTick>
 80027f8:	0003      	movs	r3, r0
 80027fa:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80027fc:	197b      	adds	r3, r7, r5
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d046      	beq.n	8002892 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002804:	197b      	adds	r3, r7, r5
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	e280      	b.n	8002d0c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	2b00      	cmp	r3, #0
 800280e:	d027      	beq.n	8002860 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002810:	4b51      	ldr	r3, [pc, #324]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2209      	movs	r2, #9
 8002816:	4393      	bics	r3, r2
 8002818:	0019      	movs	r1, r3
 800281a:	4b4f      	ldr	r3, [pc, #316]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 800281c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281e:	430a      	orrs	r2, r1
 8002820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002822:	f7ff f929 	bl	8001a78 <HAL_GetTick>
 8002826:	0003      	movs	r3, r0
 8002828:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800282c:	f7ff f924 	bl	8001a78 <HAL_GetTick>
 8002830:	0002      	movs	r2, r0
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e266      	b.n	8002d0c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800283e:	4b46      	ldr	r3, [pc, #280]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2204      	movs	r2, #4
 8002844:	4013      	ands	r3, r2
 8002846:	d0f1      	beq.n	800282c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002848:	4b43      	ldr	r3, [pc, #268]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	4a45      	ldr	r2, [pc, #276]	; (8002964 <HAL_RCC_OscConfig+0x344>)
 800284e:	4013      	ands	r3, r2
 8002850:	0019      	movs	r1, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	021a      	lsls	r2, r3, #8
 8002858:	4b3f      	ldr	r3, [pc, #252]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 800285a:	430a      	orrs	r2, r1
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	e018      	b.n	8002892 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002860:	4b3d      	ldr	r3, [pc, #244]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	4b3c      	ldr	r3, [pc, #240]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 8002866:	2101      	movs	r1, #1
 8002868:	438a      	bics	r2, r1
 800286a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7ff f904 	bl	8001a78 <HAL_GetTick>
 8002870:	0003      	movs	r3, r0
 8002872:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002876:	f7ff f8ff 	bl	8001a78 <HAL_GetTick>
 800287a:	0002      	movs	r2, r0
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e241      	b.n	8002d0c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002888:	4b33      	ldr	r3, [pc, #204]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2204      	movs	r2, #4
 800288e:	4013      	ands	r3, r2
 8002890:	d1f1      	bne.n	8002876 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2210      	movs	r2, #16
 8002898:	4013      	ands	r3, r2
 800289a:	d100      	bne.n	800289e <HAL_RCC_OscConfig+0x27e>
 800289c:	e0a1      	b.n	80029e2 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d140      	bne.n	8002926 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028a4:	4b2c      	ldr	r3, [pc, #176]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	2380      	movs	r3, #128	; 0x80
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4013      	ands	r3, r2
 80028ae:	d005      	beq.n	80028bc <HAL_RCC_OscConfig+0x29c>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e227      	b.n	8002d0c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028bc:	4b26      	ldr	r3, [pc, #152]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	4a2c      	ldr	r2, [pc, #176]	; (8002974 <HAL_RCC_OscConfig+0x354>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	0019      	movs	r1, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1a      	ldr	r2, [r3, #32]
 80028ca:	4b23      	ldr	r3, [pc, #140]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 80028cc:	430a      	orrs	r2, r1
 80028ce:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028d0:	4b21      	ldr	r3, [pc, #132]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	021b      	lsls	r3, r3, #8
 80028d6:	0a19      	lsrs	r1, r3, #8
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	061a      	lsls	r2, r3, #24
 80028de:	4b1e      	ldr	r3, [pc, #120]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 80028e0:	430a      	orrs	r2, r1
 80028e2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	0b5b      	lsrs	r3, r3, #13
 80028ea:	3301      	adds	r3, #1
 80028ec:	2280      	movs	r2, #128	; 0x80
 80028ee:	0212      	lsls	r2, r2, #8
 80028f0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80028f2:	4b19      	ldr	r3, [pc, #100]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	091b      	lsrs	r3, r3, #4
 80028f8:	210f      	movs	r1, #15
 80028fa:	400b      	ands	r3, r1
 80028fc:	491a      	ldr	r1, [pc, #104]	; (8002968 <HAL_RCC_OscConfig+0x348>)
 80028fe:	5ccb      	ldrb	r3, [r1, r3]
 8002900:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002902:	4b1a      	ldr	r3, [pc, #104]	; (800296c <HAL_RCC_OscConfig+0x34c>)
 8002904:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002906:	4b1a      	ldr	r3, [pc, #104]	; (8002970 <HAL_RCC_OscConfig+0x350>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2513      	movs	r5, #19
 800290c:	197c      	adds	r4, r7, r5
 800290e:	0018      	movs	r0, r3
 8002910:	f7ff f86c 	bl	80019ec <HAL_InitTick>
 8002914:	0003      	movs	r3, r0
 8002916:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002918:	197b      	adds	r3, r7, r5
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d060      	beq.n	80029e2 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002920:	197b      	adds	r3, r7, r5
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	e1f2      	b.n	8002d0c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d03f      	beq.n	80029ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800292e:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	4b09      	ldr	r3, [pc, #36]	; (8002958 <HAL_RCC_OscConfig+0x338>)
 8002934:	2180      	movs	r1, #128	; 0x80
 8002936:	0049      	lsls	r1, r1, #1
 8002938:	430a      	orrs	r2, r1
 800293a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293c:	f7ff f89c 	bl	8001a78 <HAL_GetTick>
 8002940:	0003      	movs	r3, r0
 8002942:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002944:	e018      	b.n	8002978 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002946:	f7ff f897 	bl	8001a78 <HAL_GetTick>
 800294a:	0002      	movs	r2, r0
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d911      	bls.n	8002978 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e1d9      	b.n	8002d0c <HAL_RCC_OscConfig+0x6ec>
 8002958:	40021000 	.word	0x40021000
 800295c:	fffeffff 	.word	0xfffeffff
 8002960:	fffbffff 	.word	0xfffbffff
 8002964:	ffffe0ff 	.word	0xffffe0ff
 8002968:	08003d80 	.word	0x08003d80
 800296c:	20000000 	.word	0x20000000
 8002970:	20000004 	.word	0x20000004
 8002974:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002978:	4bc9      	ldr	r3, [pc, #804]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	2380      	movs	r3, #128	; 0x80
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4013      	ands	r3, r2
 8002982:	d0e0      	beq.n	8002946 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002984:	4bc6      	ldr	r3, [pc, #792]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	4ac6      	ldr	r2, [pc, #792]	; (8002ca4 <HAL_RCC_OscConfig+0x684>)
 800298a:	4013      	ands	r3, r2
 800298c:	0019      	movs	r1, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1a      	ldr	r2, [r3, #32]
 8002992:	4bc3      	ldr	r3, [pc, #780]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002994:	430a      	orrs	r2, r1
 8002996:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002998:	4bc1      	ldr	r3, [pc, #772]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	021b      	lsls	r3, r3, #8
 800299e:	0a19      	lsrs	r1, r3, #8
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	061a      	lsls	r2, r3, #24
 80029a6:	4bbe      	ldr	r3, [pc, #760]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 80029a8:	430a      	orrs	r2, r1
 80029aa:	605a      	str	r2, [r3, #4]
 80029ac:	e019      	b.n	80029e2 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029ae:	4bbc      	ldr	r3, [pc, #752]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	4bbb      	ldr	r3, [pc, #748]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 80029b4:	49bc      	ldr	r1, [pc, #752]	; (8002ca8 <HAL_RCC_OscConfig+0x688>)
 80029b6:	400a      	ands	r2, r1
 80029b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ba:	f7ff f85d 	bl	8001a78 <HAL_GetTick>
 80029be:	0003      	movs	r3, r0
 80029c0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029c4:	f7ff f858 	bl	8001a78 <HAL_GetTick>
 80029c8:	0002      	movs	r2, r0
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e19a      	b.n	8002d0c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80029d6:	4bb2      	ldr	r3, [pc, #712]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	2380      	movs	r3, #128	; 0x80
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4013      	ands	r3, r2
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2208      	movs	r2, #8
 80029e8:	4013      	ands	r3, r2
 80029ea:	d036      	beq.n	8002a5a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d019      	beq.n	8002a28 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029f4:	4baa      	ldr	r3, [pc, #680]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 80029f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029f8:	4ba9      	ldr	r3, [pc, #676]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 80029fa:	2101      	movs	r1, #1
 80029fc:	430a      	orrs	r2, r1
 80029fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a00:	f7ff f83a 	bl	8001a78 <HAL_GetTick>
 8002a04:	0003      	movs	r3, r0
 8002a06:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a0a:	f7ff f835 	bl	8001a78 <HAL_GetTick>
 8002a0e:	0002      	movs	r2, r0
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e177      	b.n	8002d0c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a1c:	4ba0      	ldr	r3, [pc, #640]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a20:	2202      	movs	r2, #2
 8002a22:	4013      	ands	r3, r2
 8002a24:	d0f1      	beq.n	8002a0a <HAL_RCC_OscConfig+0x3ea>
 8002a26:	e018      	b.n	8002a5a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a28:	4b9d      	ldr	r3, [pc, #628]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002a2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a2c:	4b9c      	ldr	r3, [pc, #624]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002a2e:	2101      	movs	r1, #1
 8002a30:	438a      	bics	r2, r1
 8002a32:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a34:	f7ff f820 	bl	8001a78 <HAL_GetTick>
 8002a38:	0003      	movs	r3, r0
 8002a3a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a3e:	f7ff f81b 	bl	8001a78 <HAL_GetTick>
 8002a42:	0002      	movs	r2, r0
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e15d      	b.n	8002d0c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a50:	4b93      	ldr	r3, [pc, #588]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a54:	2202      	movs	r2, #2
 8002a56:	4013      	ands	r3, r2
 8002a58:	d1f1      	bne.n	8002a3e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2204      	movs	r2, #4
 8002a60:	4013      	ands	r3, r2
 8002a62:	d100      	bne.n	8002a66 <HAL_RCC_OscConfig+0x446>
 8002a64:	e0ae      	b.n	8002bc4 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a66:	2023      	movs	r0, #35	; 0x23
 8002a68:	183b      	adds	r3, r7, r0
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6e:	4b8c      	ldr	r3, [pc, #560]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a72:	2380      	movs	r3, #128	; 0x80
 8002a74:	055b      	lsls	r3, r3, #21
 8002a76:	4013      	ands	r3, r2
 8002a78:	d109      	bne.n	8002a8e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a7a:	4b89      	ldr	r3, [pc, #548]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a7e:	4b88      	ldr	r3, [pc, #544]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002a80:	2180      	movs	r1, #128	; 0x80
 8002a82:	0549      	lsls	r1, r1, #21
 8002a84:	430a      	orrs	r2, r1
 8002a86:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002a88:	183b      	adds	r3, r7, r0
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8e:	4b87      	ldr	r3, [pc, #540]	; (8002cac <HAL_RCC_OscConfig+0x68c>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	2380      	movs	r3, #128	; 0x80
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	4013      	ands	r3, r2
 8002a98:	d11a      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a9a:	4b84      	ldr	r3, [pc, #528]	; (8002cac <HAL_RCC_OscConfig+0x68c>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	4b83      	ldr	r3, [pc, #524]	; (8002cac <HAL_RCC_OscConfig+0x68c>)
 8002aa0:	2180      	movs	r1, #128	; 0x80
 8002aa2:	0049      	lsls	r1, r1, #1
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aa8:	f7fe ffe6 	bl	8001a78 <HAL_GetTick>
 8002aac:	0003      	movs	r3, r0
 8002aae:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab2:	f7fe ffe1 	bl	8001a78 <HAL_GetTick>
 8002ab6:	0002      	movs	r2, r0
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b64      	cmp	r3, #100	; 0x64
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e123      	b.n	8002d0c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac4:	4b79      	ldr	r3, [pc, #484]	; (8002cac <HAL_RCC_OscConfig+0x68c>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	2380      	movs	r3, #128	; 0x80
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	4013      	ands	r3, r2
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	2380      	movs	r3, #128	; 0x80
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d107      	bne.n	8002aec <HAL_RCC_OscConfig+0x4cc>
 8002adc:	4b70      	ldr	r3, [pc, #448]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002ade:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ae0:	4b6f      	ldr	r3, [pc, #444]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002ae2:	2180      	movs	r1, #128	; 0x80
 8002ae4:	0049      	lsls	r1, r1, #1
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	651a      	str	r2, [r3, #80]	; 0x50
 8002aea:	e031      	b.n	8002b50 <HAL_RCC_OscConfig+0x530>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10c      	bne.n	8002b0e <HAL_RCC_OscConfig+0x4ee>
 8002af4:	4b6a      	ldr	r3, [pc, #424]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002af6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002af8:	4b69      	ldr	r3, [pc, #420]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002afa:	496b      	ldr	r1, [pc, #428]	; (8002ca8 <HAL_RCC_OscConfig+0x688>)
 8002afc:	400a      	ands	r2, r1
 8002afe:	651a      	str	r2, [r3, #80]	; 0x50
 8002b00:	4b67      	ldr	r3, [pc, #412]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002b02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b04:	4b66      	ldr	r3, [pc, #408]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002b06:	496a      	ldr	r1, [pc, #424]	; (8002cb0 <HAL_RCC_OscConfig+0x690>)
 8002b08:	400a      	ands	r2, r1
 8002b0a:	651a      	str	r2, [r3, #80]	; 0x50
 8002b0c:	e020      	b.n	8002b50 <HAL_RCC_OscConfig+0x530>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	23a0      	movs	r3, #160	; 0xa0
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d10e      	bne.n	8002b38 <HAL_RCC_OscConfig+0x518>
 8002b1a:	4b61      	ldr	r3, [pc, #388]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002b1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b1e:	4b60      	ldr	r3, [pc, #384]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002b20:	2180      	movs	r1, #128	; 0x80
 8002b22:	00c9      	lsls	r1, r1, #3
 8002b24:	430a      	orrs	r2, r1
 8002b26:	651a      	str	r2, [r3, #80]	; 0x50
 8002b28:	4b5d      	ldr	r3, [pc, #372]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002b2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b2c:	4b5c      	ldr	r3, [pc, #368]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002b2e:	2180      	movs	r1, #128	; 0x80
 8002b30:	0049      	lsls	r1, r1, #1
 8002b32:	430a      	orrs	r2, r1
 8002b34:	651a      	str	r2, [r3, #80]	; 0x50
 8002b36:	e00b      	b.n	8002b50 <HAL_RCC_OscConfig+0x530>
 8002b38:	4b59      	ldr	r3, [pc, #356]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002b3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b3c:	4b58      	ldr	r3, [pc, #352]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002b3e:	495a      	ldr	r1, [pc, #360]	; (8002ca8 <HAL_RCC_OscConfig+0x688>)
 8002b40:	400a      	ands	r2, r1
 8002b42:	651a      	str	r2, [r3, #80]	; 0x50
 8002b44:	4b56      	ldr	r3, [pc, #344]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002b46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b48:	4b55      	ldr	r3, [pc, #340]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002b4a:	4959      	ldr	r1, [pc, #356]	; (8002cb0 <HAL_RCC_OscConfig+0x690>)
 8002b4c:	400a      	ands	r2, r1
 8002b4e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d015      	beq.n	8002b84 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b58:	f7fe ff8e 	bl	8001a78 <HAL_GetTick>
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b60:	e009      	b.n	8002b76 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b62:	f7fe ff89 	bl	8001a78 <HAL_GetTick>
 8002b66:	0002      	movs	r2, r0
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	4a51      	ldr	r2, [pc, #324]	; (8002cb4 <HAL_RCC_OscConfig+0x694>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e0ca      	b.n	8002d0c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b76:	4b4a      	ldr	r3, [pc, #296]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002b78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b7a:	2380      	movs	r3, #128	; 0x80
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d0ef      	beq.n	8002b62 <HAL_RCC_OscConfig+0x542>
 8002b82:	e014      	b.n	8002bae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b84:	f7fe ff78 	bl	8001a78 <HAL_GetTick>
 8002b88:	0003      	movs	r3, r0
 8002b8a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b8c:	e009      	b.n	8002ba2 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b8e:	f7fe ff73 	bl	8001a78 <HAL_GetTick>
 8002b92:	0002      	movs	r2, r0
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	4a46      	ldr	r2, [pc, #280]	; (8002cb4 <HAL_RCC_OscConfig+0x694>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e0b4      	b.n	8002d0c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ba2:	4b3f      	ldr	r3, [pc, #252]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002ba4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ba6:	2380      	movs	r3, #128	; 0x80
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4013      	ands	r3, r2
 8002bac:	d1ef      	bne.n	8002b8e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bae:	2323      	movs	r3, #35	; 0x23
 8002bb0:	18fb      	adds	r3, r7, r3
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d105      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb8:	4b39      	ldr	r3, [pc, #228]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002bba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bbc:	4b38      	ldr	r3, [pc, #224]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002bbe:	493e      	ldr	r1, [pc, #248]	; (8002cb8 <HAL_RCC_OscConfig+0x698>)
 8002bc0:	400a      	ands	r2, r1
 8002bc2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d100      	bne.n	8002bce <HAL_RCC_OscConfig+0x5ae>
 8002bcc:	e09d      	b.n	8002d0a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	2b0c      	cmp	r3, #12
 8002bd2:	d100      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x5b6>
 8002bd4:	e076      	b.n	8002cc4 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d145      	bne.n	8002c6a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bde:	4b30      	ldr	r3, [pc, #192]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	4b2f      	ldr	r3, [pc, #188]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002be4:	4935      	ldr	r1, [pc, #212]	; (8002cbc <HAL_RCC_OscConfig+0x69c>)
 8002be6:	400a      	ands	r2, r1
 8002be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bea:	f7fe ff45 	bl	8001a78 <HAL_GetTick>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bf4:	f7fe ff40 	bl	8001a78 <HAL_GetTick>
 8002bf8:	0002      	movs	r2, r0
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e082      	b.n	8002d0c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002c06:	4b26      	ldr	r3, [pc, #152]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	2380      	movs	r3, #128	; 0x80
 8002c0c:	049b      	lsls	r3, r3, #18
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c12:	4b23      	ldr	r3, [pc, #140]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	4a2a      	ldr	r2, [pc, #168]	; (8002cc0 <HAL_RCC_OscConfig+0x6a0>)
 8002c18:	4013      	ands	r3, r2
 8002c1a:	0019      	movs	r1, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	431a      	orrs	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	4b1c      	ldr	r3, [pc, #112]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c32:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002c38:	2180      	movs	r1, #128	; 0x80
 8002c3a:	0449      	lsls	r1, r1, #17
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c40:	f7fe ff1a 	bl	8001a78 <HAL_GetTick>
 8002c44:	0003      	movs	r3, r0
 8002c46:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c4a:	f7fe ff15 	bl	8001a78 <HAL_GetTick>
 8002c4e:	0002      	movs	r2, r0
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e057      	b.n	8002d0c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002c5c:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	2380      	movs	r3, #128	; 0x80
 8002c62:	049b      	lsls	r3, r3, #18
 8002c64:	4013      	ands	r3, r2
 8002c66:	d0f0      	beq.n	8002c4a <HAL_RCC_OscConfig+0x62a>
 8002c68:	e04f      	b.n	8002d0a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002c70:	4912      	ldr	r1, [pc, #72]	; (8002cbc <HAL_RCC_OscConfig+0x69c>)
 8002c72:	400a      	ands	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c76:	f7fe feff 	bl	8001a78 <HAL_GetTick>
 8002c7a:	0003      	movs	r3, r0
 8002c7c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c80:	f7fe fefa 	bl	8001a78 <HAL_GetTick>
 8002c84:	0002      	movs	r2, r0
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e03c      	b.n	8002d0c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002c92:	4b03      	ldr	r3, [pc, #12]	; (8002ca0 <HAL_RCC_OscConfig+0x680>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	2380      	movs	r3, #128	; 0x80
 8002c98:	049b      	lsls	r3, r3, #18
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x660>
 8002c9e:	e034      	b.n	8002d0a <HAL_RCC_OscConfig+0x6ea>
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	ffff1fff 	.word	0xffff1fff
 8002ca8:	fffffeff 	.word	0xfffffeff
 8002cac:	40007000 	.word	0x40007000
 8002cb0:	fffffbff 	.word	0xfffffbff
 8002cb4:	00001388 	.word	0x00001388
 8002cb8:	efffffff 	.word	0xefffffff
 8002cbc:	feffffff 	.word	0xfeffffff
 8002cc0:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e01d      	b.n	8002d0c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cd0:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <HAL_RCC_OscConfig+0x6f4>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	2380      	movs	r3, #128	; 0x80
 8002cda:	025b      	lsls	r3, r3, #9
 8002cdc:	401a      	ands	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d10f      	bne.n	8002d06 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	23f0      	movs	r3, #240	; 0xf0
 8002cea:	039b      	lsls	r3, r3, #14
 8002cec:	401a      	ands	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d107      	bne.n	8002d06 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	23c0      	movs	r3, #192	; 0xc0
 8002cfa:	041b      	lsls	r3, r3, #16
 8002cfc:	401a      	ands	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d001      	beq.n	8002d0a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	b00a      	add	sp, #40	; 0x28
 8002d12:	bdb0      	pop	{r4, r5, r7, pc}
 8002d14:	40021000 	.word	0x40021000

08002d18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d18:	b5b0      	push	{r4, r5, r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e128      	b.n	8002f7e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d2c:	4b96      	ldr	r3, [pc, #600]	; (8002f88 <HAL_RCC_ClockConfig+0x270>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2201      	movs	r2, #1
 8002d32:	4013      	ands	r3, r2
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d91e      	bls.n	8002d78 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3a:	4b93      	ldr	r3, [pc, #588]	; (8002f88 <HAL_RCC_ClockConfig+0x270>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	4393      	bics	r3, r2
 8002d42:	0019      	movs	r1, r3
 8002d44:	4b90      	ldr	r3, [pc, #576]	; (8002f88 <HAL_RCC_ClockConfig+0x270>)
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d4c:	f7fe fe94 	bl	8001a78 <HAL_GetTick>
 8002d50:	0003      	movs	r3, r0
 8002d52:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d54:	e009      	b.n	8002d6a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d56:	f7fe fe8f 	bl	8001a78 <HAL_GetTick>
 8002d5a:	0002      	movs	r2, r0
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	4a8a      	ldr	r2, [pc, #552]	; (8002f8c <HAL_RCC_ClockConfig+0x274>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e109      	b.n	8002f7e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6a:	4b87      	ldr	r3, [pc, #540]	; (8002f88 <HAL_RCC_ClockConfig+0x270>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	4013      	ands	r3, r2
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d1ee      	bne.n	8002d56 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d009      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d82:	4b83      	ldr	r3, [pc, #524]	; (8002f90 <HAL_RCC_ClockConfig+0x278>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	22f0      	movs	r2, #240	; 0xf0
 8002d88:	4393      	bics	r3, r2
 8002d8a:	0019      	movs	r1, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	4b7f      	ldr	r3, [pc, #508]	; (8002f90 <HAL_RCC_ClockConfig+0x278>)
 8002d92:	430a      	orrs	r2, r1
 8002d94:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d100      	bne.n	8002da2 <HAL_RCC_ClockConfig+0x8a>
 8002da0:	e089      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d107      	bne.n	8002dba <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002daa:	4b79      	ldr	r3, [pc, #484]	; (8002f90 <HAL_RCC_ClockConfig+0x278>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	2380      	movs	r3, #128	; 0x80
 8002db0:	029b      	lsls	r3, r3, #10
 8002db2:	4013      	ands	r3, r2
 8002db4:	d120      	bne.n	8002df8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e0e1      	b.n	8002f7e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d107      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dc2:	4b73      	ldr	r3, [pc, #460]	; (8002f90 <HAL_RCC_ClockConfig+0x278>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	2380      	movs	r3, #128	; 0x80
 8002dc8:	049b      	lsls	r3, r3, #18
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d114      	bne.n	8002df8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e0d5      	b.n	8002f7e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d106      	bne.n	8002de8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dda:	4b6d      	ldr	r3, [pc, #436]	; (8002f90 <HAL_RCC_ClockConfig+0x278>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2204      	movs	r2, #4
 8002de0:	4013      	ands	r3, r2
 8002de2:	d109      	bne.n	8002df8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0ca      	b.n	8002f7e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002de8:	4b69      	ldr	r3, [pc, #420]	; (8002f90 <HAL_RCC_ClockConfig+0x278>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4013      	ands	r3, r2
 8002df2:	d101      	bne.n	8002df8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e0c2      	b.n	8002f7e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002df8:	4b65      	ldr	r3, [pc, #404]	; (8002f90 <HAL_RCC_ClockConfig+0x278>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	4393      	bics	r3, r2
 8002e00:	0019      	movs	r1, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	4b62      	ldr	r3, [pc, #392]	; (8002f90 <HAL_RCC_ClockConfig+0x278>)
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e0c:	f7fe fe34 	bl	8001a78 <HAL_GetTick>
 8002e10:	0003      	movs	r3, r0
 8002e12:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d111      	bne.n	8002e40 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e1c:	e009      	b.n	8002e32 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e1e:	f7fe fe2b 	bl	8001a78 <HAL_GetTick>
 8002e22:	0002      	movs	r2, r0
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	4a58      	ldr	r2, [pc, #352]	; (8002f8c <HAL_RCC_ClockConfig+0x274>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e0a5      	b.n	8002f7e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e32:	4b57      	ldr	r3, [pc, #348]	; (8002f90 <HAL_RCC_ClockConfig+0x278>)
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	220c      	movs	r2, #12
 8002e38:	4013      	ands	r3, r2
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d1ef      	bne.n	8002e1e <HAL_RCC_ClockConfig+0x106>
 8002e3e:	e03a      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b03      	cmp	r3, #3
 8002e46:	d111      	bne.n	8002e6c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e48:	e009      	b.n	8002e5e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e4a:	f7fe fe15 	bl	8001a78 <HAL_GetTick>
 8002e4e:	0002      	movs	r2, r0
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	4a4d      	ldr	r2, [pc, #308]	; (8002f8c <HAL_RCC_ClockConfig+0x274>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e08f      	b.n	8002f7e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e5e:	4b4c      	ldr	r3, [pc, #304]	; (8002f90 <HAL_RCC_ClockConfig+0x278>)
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	220c      	movs	r2, #12
 8002e64:	4013      	ands	r3, r2
 8002e66:	2b0c      	cmp	r3, #12
 8002e68:	d1ef      	bne.n	8002e4a <HAL_RCC_ClockConfig+0x132>
 8002e6a:	e024      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d11b      	bne.n	8002eac <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e74:	e009      	b.n	8002e8a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e76:	f7fe fdff 	bl	8001a78 <HAL_GetTick>
 8002e7a:	0002      	movs	r2, r0
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	4a42      	ldr	r2, [pc, #264]	; (8002f8c <HAL_RCC_ClockConfig+0x274>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e079      	b.n	8002f7e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e8a:	4b41      	ldr	r3, [pc, #260]	; (8002f90 <HAL_RCC_ClockConfig+0x278>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	220c      	movs	r2, #12
 8002e90:	4013      	ands	r3, r2
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d1ef      	bne.n	8002e76 <HAL_RCC_ClockConfig+0x15e>
 8002e96:	e00e      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e98:	f7fe fdee 	bl	8001a78 <HAL_GetTick>
 8002e9c:	0002      	movs	r2, r0
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	4a3a      	ldr	r2, [pc, #232]	; (8002f8c <HAL_RCC_ClockConfig+0x274>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e068      	b.n	8002f7e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002eac:	4b38      	ldr	r3, [pc, #224]	; (8002f90 <HAL_RCC_ClockConfig+0x278>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	220c      	movs	r2, #12
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d1f0      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eb6:	4b34      	ldr	r3, [pc, #208]	; (8002f88 <HAL_RCC_ClockConfig+0x270>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d21e      	bcs.n	8002f02 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec4:	4b30      	ldr	r3, [pc, #192]	; (8002f88 <HAL_RCC_ClockConfig+0x270>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	4393      	bics	r3, r2
 8002ecc:	0019      	movs	r1, r3
 8002ece:	4b2e      	ldr	r3, [pc, #184]	; (8002f88 <HAL_RCC_ClockConfig+0x270>)
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ed6:	f7fe fdcf 	bl	8001a78 <HAL_GetTick>
 8002eda:	0003      	movs	r3, r0
 8002edc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ede:	e009      	b.n	8002ef4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee0:	f7fe fdca 	bl	8001a78 <HAL_GetTick>
 8002ee4:	0002      	movs	r2, r0
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	4a28      	ldr	r2, [pc, #160]	; (8002f8c <HAL_RCC_ClockConfig+0x274>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e044      	b.n	8002f7e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef4:	4b24      	ldr	r3, [pc, #144]	; (8002f88 <HAL_RCC_ClockConfig+0x270>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	4013      	ands	r3, r2
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d1ee      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2204      	movs	r2, #4
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d009      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f0c:	4b20      	ldr	r3, [pc, #128]	; (8002f90 <HAL_RCC_ClockConfig+0x278>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	4a20      	ldr	r2, [pc, #128]	; (8002f94 <HAL_RCC_ClockConfig+0x27c>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	0019      	movs	r1, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	4b1d      	ldr	r3, [pc, #116]	; (8002f90 <HAL_RCC_ClockConfig+0x278>)
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2208      	movs	r2, #8
 8002f26:	4013      	ands	r3, r2
 8002f28:	d00a      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f2a:	4b19      	ldr	r3, [pc, #100]	; (8002f90 <HAL_RCC_ClockConfig+0x278>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	4a1a      	ldr	r2, [pc, #104]	; (8002f98 <HAL_RCC_ClockConfig+0x280>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	0019      	movs	r1, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	00da      	lsls	r2, r3, #3
 8002f3a:	4b15      	ldr	r3, [pc, #84]	; (8002f90 <HAL_RCC_ClockConfig+0x278>)
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f40:	f000 f832 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8002f44:	0001      	movs	r1, r0
 8002f46:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <HAL_RCC_ClockConfig+0x278>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	091b      	lsrs	r3, r3, #4
 8002f4c:	220f      	movs	r2, #15
 8002f4e:	4013      	ands	r3, r2
 8002f50:	4a12      	ldr	r2, [pc, #72]	; (8002f9c <HAL_RCC_ClockConfig+0x284>)
 8002f52:	5cd3      	ldrb	r3, [r2, r3]
 8002f54:	000a      	movs	r2, r1
 8002f56:	40da      	lsrs	r2, r3
 8002f58:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <HAL_RCC_ClockConfig+0x288>)
 8002f5a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f5c:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <HAL_RCC_ClockConfig+0x28c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	250b      	movs	r5, #11
 8002f62:	197c      	adds	r4, r7, r5
 8002f64:	0018      	movs	r0, r3
 8002f66:	f7fe fd41 	bl	80019ec <HAL_InitTick>
 8002f6a:	0003      	movs	r3, r0
 8002f6c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002f6e:	197b      	adds	r3, r7, r5
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d002      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002f76:	197b      	adds	r3, r7, r5
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	e000      	b.n	8002f7e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	0018      	movs	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b004      	add	sp, #16
 8002f84:	bdb0      	pop	{r4, r5, r7, pc}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	40022000 	.word	0x40022000
 8002f8c:	00001388 	.word	0x00001388
 8002f90:	40021000 	.word	0x40021000
 8002f94:	fffff8ff 	.word	0xfffff8ff
 8002f98:	ffffc7ff 	.word	0xffffc7ff
 8002f9c:	08003d80 	.word	0x08003d80
 8002fa0:	20000000 	.word	0x20000000
 8002fa4:	20000004 	.word	0x20000004

08002fa8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa8:	b5b0      	push	{r4, r5, r7, lr}
 8002faa:	b08e      	sub	sp, #56	; 0x38
 8002fac:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002fae:	4b4c      	ldr	r3, [pc, #304]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fb6:	230c      	movs	r3, #12
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b0c      	cmp	r3, #12
 8002fbc:	d014      	beq.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x40>
 8002fbe:	d900      	bls.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x1a>
 8002fc0:	e07b      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0x112>
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d002      	beq.n	8002fcc <HAL_RCC_GetSysClockFreq+0x24>
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d00b      	beq.n	8002fe2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002fca:	e076      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002fcc:	4b44      	ldr	r3, [pc, #272]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2210      	movs	r2, #16
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	d002      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002fd6:	4b43      	ldr	r3, [pc, #268]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002fd8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002fda:	e07c      	b.n	80030d6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002fdc:	4b42      	ldr	r3, [pc, #264]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x140>)
 8002fde:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fe0:	e079      	b.n	80030d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fe2:	4b42      	ldr	r3, [pc, #264]	; (80030ec <HAL_RCC_GetSysClockFreq+0x144>)
 8002fe4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fe6:	e076      	b.n	80030d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fea:	0c9a      	lsrs	r2, r3, #18
 8002fec:	230f      	movs	r3, #15
 8002fee:	401a      	ands	r2, r3
 8002ff0:	4b3f      	ldr	r3, [pc, #252]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x148>)
 8002ff2:	5c9b      	ldrb	r3, [r3, r2]
 8002ff4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff8:	0d9a      	lsrs	r2, r3, #22
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	3301      	adds	r3, #1
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003002:	4b37      	ldr	r3, [pc, #220]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	2380      	movs	r3, #128	; 0x80
 8003008:	025b      	lsls	r3, r3, #9
 800300a:	4013      	ands	r3, r2
 800300c:	d01a      	beq.n	8003044 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800300e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003010:	61bb      	str	r3, [r7, #24]
 8003012:	2300      	movs	r3, #0
 8003014:	61fb      	str	r3, [r7, #28]
 8003016:	4a35      	ldr	r2, [pc, #212]	; (80030ec <HAL_RCC_GetSysClockFreq+0x144>)
 8003018:	2300      	movs	r3, #0
 800301a:	69b8      	ldr	r0, [r7, #24]
 800301c:	69f9      	ldr	r1, [r7, #28]
 800301e:	f7fd f91f 	bl	8000260 <__aeabi_lmul>
 8003022:	0002      	movs	r2, r0
 8003024:	000b      	movs	r3, r1
 8003026:	0010      	movs	r0, r2
 8003028:	0019      	movs	r1, r3
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	2300      	movs	r3, #0
 8003030:	617b      	str	r3, [r7, #20]
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f7fd f8f3 	bl	8000220 <__aeabi_uldivmod>
 800303a:	0002      	movs	r2, r0
 800303c:	000b      	movs	r3, r1
 800303e:	0013      	movs	r3, r2
 8003040:	637b      	str	r3, [r7, #52]	; 0x34
 8003042:	e037      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003044:	4b26      	ldr	r3, [pc, #152]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2210      	movs	r2, #16
 800304a:	4013      	ands	r3, r2
 800304c:	d01a      	beq.n	8003084 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800304e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	2300      	movs	r3, #0
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	4a23      	ldr	r2, [pc, #140]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003058:	2300      	movs	r3, #0
 800305a:	68b8      	ldr	r0, [r7, #8]
 800305c:	68f9      	ldr	r1, [r7, #12]
 800305e:	f7fd f8ff 	bl	8000260 <__aeabi_lmul>
 8003062:	0002      	movs	r2, r0
 8003064:	000b      	movs	r3, r1
 8003066:	0010      	movs	r0, r2
 8003068:	0019      	movs	r1, r3
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	603b      	str	r3, [r7, #0]
 800306e:	2300      	movs	r3, #0
 8003070:	607b      	str	r3, [r7, #4]
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f7fd f8d3 	bl	8000220 <__aeabi_uldivmod>
 800307a:	0002      	movs	r2, r0
 800307c:	000b      	movs	r3, r1
 800307e:	0013      	movs	r3, r2
 8003080:	637b      	str	r3, [r7, #52]	; 0x34
 8003082:	e017      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003086:	0018      	movs	r0, r3
 8003088:	2300      	movs	r3, #0
 800308a:	0019      	movs	r1, r3
 800308c:	4a16      	ldr	r2, [pc, #88]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x140>)
 800308e:	2300      	movs	r3, #0
 8003090:	f7fd f8e6 	bl	8000260 <__aeabi_lmul>
 8003094:	0002      	movs	r2, r0
 8003096:	000b      	movs	r3, r1
 8003098:	0010      	movs	r0, r2
 800309a:	0019      	movs	r1, r3
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	001c      	movs	r4, r3
 80030a0:	2300      	movs	r3, #0
 80030a2:	001d      	movs	r5, r3
 80030a4:	0022      	movs	r2, r4
 80030a6:	002b      	movs	r3, r5
 80030a8:	f7fd f8ba 	bl	8000220 <__aeabi_uldivmod>
 80030ac:	0002      	movs	r2, r0
 80030ae:	000b      	movs	r3, r1
 80030b0:	0013      	movs	r3, r2
 80030b2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80030b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80030b8:	e00d      	b.n	80030d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80030ba:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x138>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	0b5b      	lsrs	r3, r3, #13
 80030c0:	2207      	movs	r2, #7
 80030c2:	4013      	ands	r3, r2
 80030c4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80030c6:	6a3b      	ldr	r3, [r7, #32]
 80030c8:	3301      	adds	r3, #1
 80030ca:	2280      	movs	r2, #128	; 0x80
 80030cc:	0212      	lsls	r2, r2, #8
 80030ce:	409a      	lsls	r2, r3
 80030d0:	0013      	movs	r3, r2
 80030d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80030d4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80030d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80030d8:	0018      	movs	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	b00e      	add	sp, #56	; 0x38
 80030de:	bdb0      	pop	{r4, r5, r7, pc}
 80030e0:	40021000 	.word	0x40021000
 80030e4:	003d0900 	.word	0x003d0900
 80030e8:	00f42400 	.word	0x00f42400
 80030ec:	007a1200 	.word	0x007a1200
 80030f0:	08003d90 	.word	0x08003d90

080030f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e07b      	b.n	80031fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	2b00      	cmp	r3, #0
 800310c:	d109      	bne.n	8003122 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	2382      	movs	r3, #130	; 0x82
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	429a      	cmp	r2, r3
 8003118:	d009      	beq.n	800312e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	61da      	str	r2, [r3, #28]
 8003120:	e005      	b.n	800312e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2251      	movs	r2, #81	; 0x51
 8003138:	5c9b      	ldrb	r3, [r3, r2]
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d107      	bne.n	8003150 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2250      	movs	r2, #80	; 0x50
 8003144:	2100      	movs	r1, #0
 8003146:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	0018      	movs	r0, r3
 800314c:	f7fe fb8c 	bl	8001868 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2251      	movs	r2, #81	; 0x51
 8003154:	2102      	movs	r1, #2
 8003156:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2140      	movs	r1, #64	; 0x40
 8003164:	438a      	bics	r2, r1
 8003166:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	2382      	movs	r3, #130	; 0x82
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	401a      	ands	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6899      	ldr	r1, [r3, #8]
 8003176:	2384      	movs	r3, #132	; 0x84
 8003178:	021b      	lsls	r3, r3, #8
 800317a:	400b      	ands	r3, r1
 800317c:	431a      	orrs	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68d9      	ldr	r1, [r3, #12]
 8003182:	2380      	movs	r3, #128	; 0x80
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	400b      	ands	r3, r1
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	2102      	movs	r1, #2
 8003190:	400b      	ands	r3, r1
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	2101      	movs	r1, #1
 800319a:	400b      	ands	r3, r1
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6999      	ldr	r1, [r3, #24]
 80031a2:	2380      	movs	r3, #128	; 0x80
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	400b      	ands	r3, r1
 80031a8:	431a      	orrs	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	2138      	movs	r1, #56	; 0x38
 80031b0:	400b      	ands	r3, r1
 80031b2:	431a      	orrs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	2180      	movs	r1, #128	; 0x80
 80031ba:	400b      	ands	r3, r1
 80031bc:	431a      	orrs	r2, r3
 80031be:	0011      	movs	r1, r2
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031c4:	2380      	movs	r3, #128	; 0x80
 80031c6:	019b      	lsls	r3, r3, #6
 80031c8:	401a      	ands	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	0c1b      	lsrs	r3, r3, #16
 80031d8:	2204      	movs	r2, #4
 80031da:	4013      	ands	r3, r2
 80031dc:	0019      	movs	r1, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	2210      	movs	r2, #16
 80031e4:	401a      	ands	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2251      	movs	r2, #81	; 0x51
 80031f8:	2101      	movs	r1, #1
 80031fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	0018      	movs	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	b002      	add	sp, #8
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b088      	sub	sp, #32
 800320a:	af00      	add	r7, sp, #0
 800320c:	60f8      	str	r0, [r7, #12]
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	603b      	str	r3, [r7, #0]
 8003212:	1dbb      	adds	r3, r7, #6
 8003214:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003216:	231f      	movs	r3, #31
 8003218:	18fb      	adds	r3, r7, r3
 800321a:	2200      	movs	r2, #0
 800321c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2250      	movs	r2, #80	; 0x50
 8003222:	5c9b      	ldrb	r3, [r3, r2]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d101      	bne.n	800322c <HAL_SPI_Transmit+0x26>
 8003228:	2302      	movs	r3, #2
 800322a:	e13e      	b.n	80034aa <HAL_SPI_Transmit+0x2a4>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2250      	movs	r2, #80	; 0x50
 8003230:	2101      	movs	r1, #1
 8003232:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003234:	f7fe fc20 	bl	8001a78 <HAL_GetTick>
 8003238:	0003      	movs	r3, r0
 800323a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800323c:	2316      	movs	r3, #22
 800323e:	18fb      	adds	r3, r7, r3
 8003240:	1dba      	adds	r2, r7, #6
 8003242:	8812      	ldrh	r2, [r2, #0]
 8003244:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2251      	movs	r2, #81	; 0x51
 800324a:	5c9b      	ldrb	r3, [r3, r2]
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b01      	cmp	r3, #1
 8003250:	d004      	beq.n	800325c <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003252:	231f      	movs	r3, #31
 8003254:	18fb      	adds	r3, r7, r3
 8003256:	2202      	movs	r2, #2
 8003258:	701a      	strb	r2, [r3, #0]
    goto error;
 800325a:	e11b      	b.n	8003494 <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_SPI_Transmit+0x64>
 8003262:	1dbb      	adds	r3, r7, #6
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d104      	bne.n	8003274 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800326a:	231f      	movs	r3, #31
 800326c:	18fb      	adds	r3, r7, r3
 800326e:	2201      	movs	r2, #1
 8003270:	701a      	strb	r2, [r3, #0]
    goto error;
 8003272:	e10f      	b.n	8003494 <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2251      	movs	r2, #81	; 0x51
 8003278:	2103      	movs	r1, #3
 800327a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	1dba      	adds	r2, r7, #6
 800328c:	8812      	ldrh	r2, [r2, #0]
 800328e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	1dba      	adds	r2, r7, #6
 8003294:	8812      	ldrh	r2, [r2, #0]
 8003296:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	2380      	movs	r3, #128	; 0x80
 80032bc:	021b      	lsls	r3, r3, #8
 80032be:	429a      	cmp	r2, r3
 80032c0:	d110      	bne.n	80032e4 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2140      	movs	r1, #64	; 0x40
 80032ce:	438a      	bics	r2, r1
 80032d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2180      	movs	r1, #128	; 0x80
 80032de:	01c9      	lsls	r1, r1, #7
 80032e0:	430a      	orrs	r2, r1
 80032e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2240      	movs	r2, #64	; 0x40
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b40      	cmp	r3, #64	; 0x40
 80032f0:	d007      	beq.n	8003302 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2140      	movs	r1, #64	; 0x40
 80032fe:	430a      	orrs	r2, r1
 8003300:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	68da      	ldr	r2, [r3, #12]
 8003306:	2380      	movs	r3, #128	; 0x80
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	429a      	cmp	r2, r3
 800330c:	d14e      	bne.n	80033ac <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d004      	beq.n	8003320 <HAL_SPI_Transmit+0x11a>
 8003316:	2316      	movs	r3, #22
 8003318:	18fb      	adds	r3, r7, r3
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d13f      	bne.n	80033a0 <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003324:	881a      	ldrh	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003330:	1c9a      	adds	r2, r3, #2
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800333a:	b29b      	uxth	r3, r3
 800333c:	3b01      	subs	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003344:	e02c      	b.n	80033a0 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	2202      	movs	r2, #2
 800334e:	4013      	ands	r3, r2
 8003350:	2b02      	cmp	r3, #2
 8003352:	d112      	bne.n	800337a <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	881a      	ldrh	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003364:	1c9a      	adds	r2, r3, #2
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800336e:	b29b      	uxth	r3, r3
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	86da      	strh	r2, [r3, #54]	; 0x36
 8003378:	e012      	b.n	80033a0 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800337a:	f7fe fb7d 	bl	8001a78 <HAL_GetTick>
 800337e:	0002      	movs	r2, r0
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d802      	bhi.n	8003390 <HAL_SPI_Transmit+0x18a>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	3301      	adds	r3, #1
 800338e:	d102      	bne.n	8003396 <HAL_SPI_Transmit+0x190>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d104      	bne.n	80033a0 <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8003396:	231f      	movs	r3, #31
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	2203      	movs	r2, #3
 800339c:	701a      	strb	r2, [r3, #0]
          goto error;
 800339e:	e079      	b.n	8003494 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1cd      	bne.n	8003346 <HAL_SPI_Transmit+0x140>
 80033aa:	e04f      	b.n	800344c <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d004      	beq.n	80033be <HAL_SPI_Transmit+0x1b8>
 80033b4:	2316      	movs	r3, #22
 80033b6:	18fb      	adds	r3, r7, r3
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d141      	bne.n	8003442 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	330c      	adds	r3, #12
 80033c8:	7812      	ldrb	r2, [r2, #0]
 80033ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80033e4:	e02d      	b.n	8003442 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	2202      	movs	r2, #2
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d113      	bne.n	800341c <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	330c      	adds	r3, #12
 80033fe:	7812      	ldrb	r2, [r2, #0]
 8003400:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003410:	b29b      	uxth	r3, r3
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	86da      	strh	r2, [r3, #54]	; 0x36
 800341a:	e012      	b.n	8003442 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800341c:	f7fe fb2c 	bl	8001a78 <HAL_GetTick>
 8003420:	0002      	movs	r2, r0
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d802      	bhi.n	8003432 <HAL_SPI_Transmit+0x22c>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	3301      	adds	r3, #1
 8003430:	d102      	bne.n	8003438 <HAL_SPI_Transmit+0x232>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d104      	bne.n	8003442 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 8003438:	231f      	movs	r3, #31
 800343a:	18fb      	adds	r3, r7, r3
 800343c:	2203      	movs	r2, #3
 800343e:	701a      	strb	r2, [r3, #0]
          goto error;
 8003440:	e028      	b.n	8003494 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003446:	b29b      	uxth	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1cc      	bne.n	80033e6 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	6839      	ldr	r1, [r7, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	0018      	movs	r0, r3
 8003454:	f000 fc08 	bl	8003c68 <SPI_EndRxTxTransaction>
 8003458:	1e03      	subs	r3, r0, #0
 800345a:	d002      	beq.n	8003462 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2220      	movs	r2, #32
 8003460:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10a      	bne.n	8003480 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800346a:	2300      	movs	r3, #0
 800346c:	613b      	str	r3, [r7, #16]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003484:	2b00      	cmp	r3, #0
 8003486:	d004      	beq.n	8003492 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 8003488:	231f      	movs	r3, #31
 800348a:	18fb      	adds	r3, r7, r3
 800348c:	2201      	movs	r2, #1
 800348e:	701a      	strb	r2, [r3, #0]
 8003490:	e000      	b.n	8003494 <HAL_SPI_Transmit+0x28e>
  }

error:
 8003492:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2251      	movs	r2, #81	; 0x51
 8003498:	2101      	movs	r1, #1
 800349a:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2250      	movs	r2, #80	; 0x50
 80034a0:	2100      	movs	r1, #0
 80034a2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80034a4:	231f      	movs	r3, #31
 80034a6:	18fb      	adds	r3, r7, r3
 80034a8:	781b      	ldrb	r3, [r3, #0]
}
 80034aa:	0018      	movs	r0, r3
 80034ac:	46bd      	mov	sp, r7
 80034ae:	b008      	add	sp, #32
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b4:	b590      	push	{r4, r7, lr}
 80034b6:	b089      	sub	sp, #36	; 0x24
 80034b8:	af02      	add	r7, sp, #8
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	1dbb      	adds	r3, r7, #6
 80034c2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034c4:	2317      	movs	r3, #23
 80034c6:	18fb      	adds	r3, r7, r3
 80034c8:	2200      	movs	r2, #0
 80034ca:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	2382      	movs	r3, #130	; 0x82
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d113      	bne.n	8003500 <HAL_SPI_Receive+0x4c>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10f      	bne.n	8003500 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2251      	movs	r2, #81	; 0x51
 80034e4:	2104      	movs	r1, #4
 80034e6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80034e8:	1dbb      	adds	r3, r7, #6
 80034ea:	881c      	ldrh	r4, [r3, #0]
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	68b9      	ldr	r1, [r7, #8]
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	0023      	movs	r3, r4
 80034f8:	f000 f902 	bl	8003700 <HAL_SPI_TransmitReceive>
 80034fc:	0003      	movs	r3, r0
 80034fe:	e0f9      	b.n	80036f4 <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2250      	movs	r2, #80	; 0x50
 8003504:	5c9b      	ldrb	r3, [r3, r2]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d101      	bne.n	800350e <HAL_SPI_Receive+0x5a>
 800350a:	2302      	movs	r3, #2
 800350c:	e0f2      	b.n	80036f4 <HAL_SPI_Receive+0x240>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2250      	movs	r2, #80	; 0x50
 8003512:	2101      	movs	r1, #1
 8003514:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003516:	f7fe faaf 	bl	8001a78 <HAL_GetTick>
 800351a:	0003      	movs	r3, r0
 800351c:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2251      	movs	r2, #81	; 0x51
 8003522:	5c9b      	ldrb	r3, [r3, r2]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b01      	cmp	r3, #1
 8003528:	d004      	beq.n	8003534 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800352a:	2317      	movs	r3, #23
 800352c:	18fb      	adds	r3, r7, r3
 800352e:	2202      	movs	r2, #2
 8003530:	701a      	strb	r2, [r3, #0]
    goto error;
 8003532:	e0d4      	b.n	80036de <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_SPI_Receive+0x8e>
 800353a:	1dbb      	adds	r3, r7, #6
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d104      	bne.n	800354c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8003542:	2317      	movs	r3, #23
 8003544:	18fb      	adds	r3, r7, r3
 8003546:	2201      	movs	r2, #1
 8003548:	701a      	strb	r2, [r3, #0]
    goto error;
 800354a:	e0c8      	b.n	80036de <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2251      	movs	r2, #81	; 0x51
 8003550:	2104      	movs	r1, #4
 8003552:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	1dba      	adds	r2, r7, #6
 8003564:	8812      	ldrh	r2, [r2, #0]
 8003566:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	1dba      	adds	r2, r7, #6
 800356c:	8812      	ldrh	r2, [r2, #0]
 800356e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	2380      	movs	r3, #128	; 0x80
 8003594:	021b      	lsls	r3, r3, #8
 8003596:	429a      	cmp	r2, r3
 8003598:	d10f      	bne.n	80035ba <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2140      	movs	r1, #64	; 0x40
 80035a6:	438a      	bics	r2, r1
 80035a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4951      	ldr	r1, [pc, #324]	; (80036fc <HAL_SPI_Receive+0x248>)
 80035b6:	400a      	ands	r2, r1
 80035b8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2240      	movs	r2, #64	; 0x40
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b40      	cmp	r3, #64	; 0x40
 80035c6:	d007      	beq.n	80035d8 <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2140      	movs	r1, #64	; 0x40
 80035d4:	430a      	orrs	r2, r1
 80035d6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d164      	bne.n	80036aa <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80035e0:	e02f      	b.n	8003642 <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	2201      	movs	r2, #1
 80035ea:	4013      	ands	r3, r2
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d115      	bne.n	800361c <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	330c      	adds	r3, #12
 80035f6:	001a      	movs	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fc:	7812      	ldrb	r2, [r2, #0]
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003610:	b29b      	uxth	r3, r3
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	87da      	strh	r2, [r3, #62]	; 0x3e
 800361a:	e012      	b.n	8003642 <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800361c:	f7fe fa2c 	bl	8001a78 <HAL_GetTick>
 8003620:	0002      	movs	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d802      	bhi.n	8003632 <HAL_SPI_Receive+0x17e>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	3301      	adds	r3, #1
 8003630:	d102      	bne.n	8003638 <HAL_SPI_Receive+0x184>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d104      	bne.n	8003642 <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8003638:	2317      	movs	r3, #23
 800363a:	18fb      	adds	r3, r7, r3
 800363c:	2203      	movs	r2, #3
 800363e:	701a      	strb	r2, [r3, #0]
          goto error;
 8003640:	e04d      	b.n	80036de <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003646:	b29b      	uxth	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1ca      	bne.n	80035e2 <HAL_SPI_Receive+0x12e>
 800364c:	e032      	b.n	80036b4 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	2201      	movs	r2, #1
 8003656:	4013      	ands	r3, r2
 8003658:	2b01      	cmp	r3, #1
 800365a:	d113      	bne.n	8003684 <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003666:	b292      	uxth	r2, r2
 8003668:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366e:	1c9a      	adds	r2, r3, #2
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003678:	b29b      	uxth	r3, r3
 800367a:	3b01      	subs	r3, #1
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003682:	e012      	b.n	80036aa <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003684:	f7fe f9f8 	bl	8001a78 <HAL_GetTick>
 8003688:	0002      	movs	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	d802      	bhi.n	800369a <HAL_SPI_Receive+0x1e6>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	3301      	adds	r3, #1
 8003698:	d102      	bne.n	80036a0 <HAL_SPI_Receive+0x1ec>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d104      	bne.n	80036aa <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 80036a0:	2317      	movs	r3, #23
 80036a2:	18fb      	adds	r3, r7, r3
 80036a4:	2203      	movs	r2, #3
 80036a6:	701a      	strb	r2, [r3, #0]
          goto error;
 80036a8:	e019      	b.n	80036de <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1cc      	bne.n	800364e <HAL_SPI_Receive+0x19a>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	6839      	ldr	r1, [r7, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	0018      	movs	r0, r3
 80036bc:	f000 fa6a 	bl	8003b94 <SPI_EndRxTransaction>
 80036c0:	1e03      	subs	r3, r0, #0
 80036c2:	d002      	beq.n	80036ca <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2220      	movs	r2, #32
 80036c8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d004      	beq.n	80036dc <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 80036d2:	2317      	movs	r3, #23
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	2201      	movs	r2, #1
 80036d8:	701a      	strb	r2, [r3, #0]
 80036da:	e000      	b.n	80036de <HAL_SPI_Receive+0x22a>
  }

error :
 80036dc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2251      	movs	r2, #81	; 0x51
 80036e2:	2101      	movs	r1, #1
 80036e4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2250      	movs	r2, #80	; 0x50
 80036ea:	2100      	movs	r1, #0
 80036ec:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80036ee:	2317      	movs	r3, #23
 80036f0:	18fb      	adds	r3, r7, r3
 80036f2:	781b      	ldrb	r3, [r3, #0]
}
 80036f4:	0018      	movs	r0, r3
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b007      	add	sp, #28
 80036fa:	bd90      	pop	{r4, r7, pc}
 80036fc:	ffffbfff 	.word	0xffffbfff

08003700 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08c      	sub	sp, #48	; 0x30
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
 800370c:	001a      	movs	r2, r3
 800370e:	1cbb      	adds	r3, r7, #2
 8003710:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003712:	2301      	movs	r3, #1
 8003714:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003716:	232b      	movs	r3, #43	; 0x2b
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	2200      	movs	r2, #0
 800371c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2250      	movs	r2, #80	; 0x50
 8003722:	5c9b      	ldrb	r3, [r3, r2]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d101      	bne.n	800372c <HAL_SPI_TransmitReceive+0x2c>
 8003728:	2302      	movs	r3, #2
 800372a:	e1a0      	b.n	8003a6e <HAL_SPI_TransmitReceive+0x36e>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2250      	movs	r2, #80	; 0x50
 8003730:	2101      	movs	r1, #1
 8003732:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003734:	f7fe f9a0 	bl	8001a78 <HAL_GetTick>
 8003738:	0003      	movs	r3, r0
 800373a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800373c:	2023      	movs	r0, #35	; 0x23
 800373e:	183b      	adds	r3, r7, r0
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	2151      	movs	r1, #81	; 0x51
 8003744:	5c52      	ldrb	r2, [r2, r1]
 8003746:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800374e:	231a      	movs	r3, #26
 8003750:	18fb      	adds	r3, r7, r3
 8003752:	1cba      	adds	r2, r7, #2
 8003754:	8812      	ldrh	r2, [r2, #0]
 8003756:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003758:	183b      	adds	r3, r7, r0
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d011      	beq.n	8003784 <HAL_SPI_TransmitReceive+0x84>
 8003760:	69fa      	ldr	r2, [r7, #28]
 8003762:	2382      	movs	r3, #130	; 0x82
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	429a      	cmp	r2, r3
 8003768:	d107      	bne.n	800377a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d103      	bne.n	800377a <HAL_SPI_TransmitReceive+0x7a>
 8003772:	183b      	adds	r3, r7, r0
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	2b04      	cmp	r3, #4
 8003778:	d004      	beq.n	8003784 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800377a:	232b      	movs	r3, #43	; 0x2b
 800377c:	18fb      	adds	r3, r7, r3
 800377e:	2202      	movs	r2, #2
 8003780:	701a      	strb	r2, [r3, #0]
    goto error;
 8003782:	e169      	b.n	8003a58 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d006      	beq.n	8003798 <HAL_SPI_TransmitReceive+0x98>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_SPI_TransmitReceive+0x98>
 8003790:	1cbb      	adds	r3, r7, #2
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d104      	bne.n	80037a2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003798:	232b      	movs	r3, #43	; 0x2b
 800379a:	18fb      	adds	r3, r7, r3
 800379c:	2201      	movs	r2, #1
 800379e:	701a      	strb	r2, [r3, #0]
    goto error;
 80037a0:	e15a      	b.n	8003a58 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2251      	movs	r2, #81	; 0x51
 80037a6:	5c9b      	ldrb	r3, [r3, r2]
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d003      	beq.n	80037b6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2251      	movs	r2, #81	; 0x51
 80037b2:	2105      	movs	r1, #5
 80037b4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	1cba      	adds	r2, r7, #2
 80037c6:	8812      	ldrh	r2, [r2, #0]
 80037c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1cba      	adds	r2, r7, #2
 80037ce:	8812      	ldrh	r2, [r2, #0]
 80037d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	1cba      	adds	r2, r7, #2
 80037dc:	8812      	ldrh	r2, [r2, #0]
 80037de:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	1cba      	adds	r2, r7, #2
 80037e4:	8812      	ldrh	r2, [r2, #0]
 80037e6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2240      	movs	r2, #64	; 0x40
 80037fc:	4013      	ands	r3, r2
 80037fe:	2b40      	cmp	r3, #64	; 0x40
 8003800:	d007      	beq.n	8003812 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2140      	movs	r1, #64	; 0x40
 800380e:	430a      	orrs	r2, r1
 8003810:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	2380      	movs	r3, #128	; 0x80
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	429a      	cmp	r2, r3
 800381c:	d000      	beq.n	8003820 <HAL_SPI_TransmitReceive+0x120>
 800381e:	e07a      	b.n	8003916 <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d004      	beq.n	8003832 <HAL_SPI_TransmitReceive+0x132>
 8003828:	231a      	movs	r3, #26
 800382a:	18fb      	adds	r3, r7, r3
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d166      	bne.n	8003900 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	881a      	ldrh	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	1c9a      	adds	r2, r3, #2
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003856:	e053      	b.n	8003900 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2202      	movs	r2, #2
 8003860:	4013      	ands	r3, r2
 8003862:	2b02      	cmp	r3, #2
 8003864:	d11b      	bne.n	800389e <HAL_SPI_TransmitReceive+0x19e>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800386a:	b29b      	uxth	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d016      	beq.n	800389e <HAL_SPI_TransmitReceive+0x19e>
 8003870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003872:	2b01      	cmp	r3, #1
 8003874:	d113      	bne.n	800389e <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	881a      	ldrh	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	1c9a      	adds	r2, r3, #2
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003890:	b29b      	uxth	r3, r3
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800389a:	2300      	movs	r3, #0
 800389c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2201      	movs	r2, #1
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d119      	bne.n	80038e0 <HAL_SPI_TransmitReceive+0x1e0>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d014      	beq.n	80038e0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68da      	ldr	r2, [r3, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c0:	b292      	uxth	r2, r2
 80038c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c8:	1c9a      	adds	r2, r3, #2
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038dc:	2301      	movs	r3, #1
 80038de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038e0:	f7fe f8ca 	bl	8001a78 <HAL_GetTick>
 80038e4:	0002      	movs	r2, r0
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d807      	bhi.n	8003900 <HAL_SPI_TransmitReceive+0x200>
 80038f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f2:	3301      	adds	r3, #1
 80038f4:	d004      	beq.n	8003900 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 80038f6:	232b      	movs	r3, #43	; 0x2b
 80038f8:	18fb      	adds	r3, r7, r3
 80038fa:	2203      	movs	r2, #3
 80038fc:	701a      	strb	r2, [r3, #0]
        goto error;
 80038fe:	e0ab      	b.n	8003a58 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003904:	b29b      	uxth	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1a6      	bne.n	8003858 <HAL_SPI_TransmitReceive+0x158>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800390e:	b29b      	uxth	r3, r3
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1a1      	bne.n	8003858 <HAL_SPI_TransmitReceive+0x158>
 8003914:	e07f      	b.n	8003a16 <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d005      	beq.n	800392a <HAL_SPI_TransmitReceive+0x22a>
 800391e:	231a      	movs	r3, #26
 8003920:	18fb      	adds	r3, r7, r3
 8003922:	881b      	ldrh	r3, [r3, #0]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d000      	beq.n	800392a <HAL_SPI_TransmitReceive+0x22a>
 8003928:	e06b      	b.n	8003a02 <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	330c      	adds	r3, #12
 8003934:	7812      	ldrb	r2, [r2, #0]
 8003936:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003946:	b29b      	uxth	r3, r3
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003950:	e057      	b.n	8003a02 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	2202      	movs	r2, #2
 800395a:	4013      	ands	r3, r2
 800395c:	2b02      	cmp	r3, #2
 800395e:	d11c      	bne.n	800399a <HAL_SPI_TransmitReceive+0x29a>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d017      	beq.n	800399a <HAL_SPI_TransmitReceive+0x29a>
 800396a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396c:	2b01      	cmp	r3, #1
 800396e:	d114      	bne.n	800399a <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	330c      	adds	r3, #12
 800397a:	7812      	ldrb	r2, [r2, #0]
 800397c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800398c:	b29b      	uxth	r3, r3
 800398e:	3b01      	subs	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	2201      	movs	r2, #1
 80039a2:	4013      	ands	r3, r2
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d119      	bne.n	80039dc <HAL_SPI_TransmitReceive+0x2dc>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d014      	beq.n	80039dc <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039d8:	2301      	movs	r3, #1
 80039da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80039dc:	f7fe f84c 	bl	8001a78 <HAL_GetTick>
 80039e0:	0002      	movs	r2, r0
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d802      	bhi.n	80039f2 <HAL_SPI_TransmitReceive+0x2f2>
 80039ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ee:	3301      	adds	r3, #1
 80039f0:	d102      	bne.n	80039f8 <HAL_SPI_TransmitReceive+0x2f8>
 80039f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d104      	bne.n	8003a02 <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 80039f8:	232b      	movs	r3, #43	; 0x2b
 80039fa:	18fb      	adds	r3, r7, r3
 80039fc:	2203      	movs	r2, #3
 80039fe:	701a      	strb	r2, [r3, #0]
        goto error;
 8003a00:	e02a      	b.n	8003a58 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1a2      	bne.n	8003952 <HAL_SPI_TransmitReceive+0x252>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d19d      	bne.n	8003952 <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	f000 f923 	bl	8003c68 <SPI_EndRxTxTransaction>
 8003a22:	1e03      	subs	r3, r0, #0
 8003a24:	d007      	beq.n	8003a36 <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 8003a26:	232b      	movs	r3, #43	; 0x2b
 8003a28:	18fb      	adds	r3, r7, r3
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2220      	movs	r2, #32
 8003a32:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a34:	e010      	b.n	8003a58 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10b      	bne.n	8003a56 <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a3e:	2300      	movs	r3, #0
 8003a40:	617b      	str	r3, [r7, #20]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	617b      	str	r3, [r7, #20]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	e000      	b.n	8003a58 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 8003a56:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2251      	movs	r2, #81	; 0x51
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2250      	movs	r2, #80	; 0x50
 8003a64:	2100      	movs	r1, #0
 8003a66:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003a68:	232b      	movs	r3, #43	; 0x2b
 8003a6a:	18fb      	adds	r3, r7, r3
 8003a6c:	781b      	ldrb	r3, [r3, #0]
}
 8003a6e:	0018      	movs	r0, r3
 8003a70:	46bd      	mov	sp, r7
 8003a72:	b00c      	add	sp, #48	; 0x30
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	603b      	str	r3, [r7, #0]
 8003a84:	1dfb      	adds	r3, r7, #7
 8003a86:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a88:	f7fd fff6 	bl	8001a78 <HAL_GetTick>
 8003a8c:	0002      	movs	r2, r0
 8003a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	18d3      	adds	r3, r2, r3
 8003a96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a98:	f7fd ffee 	bl	8001a78 <HAL_GetTick>
 8003a9c:	0003      	movs	r3, r0
 8003a9e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003aa0:	4b3a      	ldr	r3, [pc, #232]	; (8003b8c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	015b      	lsls	r3, r3, #5
 8003aa6:	0d1b      	lsrs	r3, r3, #20
 8003aa8:	69fa      	ldr	r2, [r7, #28]
 8003aaa:	4353      	muls	r3, r2
 8003aac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aae:	e058      	b.n	8003b62 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	d055      	beq.n	8003b62 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ab6:	f7fd ffdf 	bl	8001a78 <HAL_GetTick>
 8003aba:	0002      	movs	r2, r0
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	69fa      	ldr	r2, [r7, #28]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d902      	bls.n	8003acc <SPI_WaitFlagStateUntilTimeout+0x54>
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d142      	bne.n	8003b52 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	21e0      	movs	r1, #224	; 0xe0
 8003ad8:	438a      	bics	r2, r1
 8003ada:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	2382      	movs	r3, #130	; 0x82
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d113      	bne.n	8003b10 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	2380      	movs	r3, #128	; 0x80
 8003aee:	021b      	lsls	r3, r3, #8
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d005      	beq.n	8003b00 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	2380      	movs	r3, #128	; 0x80
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d107      	bne.n	8003b10 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2140      	movs	r1, #64	; 0x40
 8003b0c:	438a      	bics	r2, r1
 8003b0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b14:	2380      	movs	r3, #128	; 0x80
 8003b16:	019b      	lsls	r3, r3, #6
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d110      	bne.n	8003b3e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	491a      	ldr	r1, [pc, #104]	; (8003b90 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003b28:	400a      	ands	r2, r1
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2180      	movs	r1, #128	; 0x80
 8003b38:	0189      	lsls	r1, r1, #6
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2251      	movs	r2, #81	; 0x51
 8003b42:	2101      	movs	r1, #1
 8003b44:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2250      	movs	r2, #80	; 0x50
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e017      	b.n	8003b82 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	425a      	negs	r2, r3
 8003b72:	4153      	adcs	r3, r2
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	001a      	movs	r2, r3
 8003b78:	1dfb      	adds	r3, r7, #7
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d197      	bne.n	8003ab0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	0018      	movs	r0, r3
 8003b84:	46bd      	mov	sp, r7
 8003b86:	b008      	add	sp, #32
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	20000000 	.word	0x20000000
 8003b90:	ffffdfff 	.word	0xffffdfff

08003b94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	2382      	movs	r3, #130	; 0x82
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d113      	bne.n	8003bd4 <SPI_EndRxTransaction+0x40>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	2380      	movs	r3, #128	; 0x80
 8003bb2:	021b      	lsls	r3, r3, #8
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d005      	beq.n	8003bc4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	2380      	movs	r3, #128	; 0x80
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d107      	bne.n	8003bd4 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2140      	movs	r1, #64	; 0x40
 8003bd0:	438a      	bics	r2, r1
 8003bd2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	2382      	movs	r3, #130	; 0x82
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d12b      	bne.n	8003c38 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	2380      	movs	r3, #128	; 0x80
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d012      	beq.n	8003c12 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	0013      	movs	r3, r2
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	2180      	movs	r1, #128	; 0x80
 8003bfa:	f7ff ff3d 	bl	8003a78 <SPI_WaitFlagStateUntilTimeout>
 8003bfe:	1e03      	subs	r3, r0, #0
 8003c00:	d02d      	beq.n	8003c5e <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c06:	2220      	movs	r2, #32
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e026      	b.n	8003c60 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	0013      	movs	r3, r2
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	2101      	movs	r1, #1
 8003c20:	f7ff ff2a 	bl	8003a78 <SPI_WaitFlagStateUntilTimeout>
 8003c24:	1e03      	subs	r3, r0, #0
 8003c26:	d01a      	beq.n	8003c5e <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e013      	b.n	8003c60 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	0013      	movs	r3, r2
 8003c42:	2200      	movs	r2, #0
 8003c44:	2101      	movs	r1, #1
 8003c46:	f7ff ff17 	bl	8003a78 <SPI_WaitFlagStateUntilTimeout>
 8003c4a:	1e03      	subs	r3, r0, #0
 8003c4c:	d007      	beq.n	8003c5e <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c52:	2220      	movs	r2, #32
 8003c54:	431a      	orrs	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e000      	b.n	8003c60 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	0018      	movs	r0, r3
 8003c62:	46bd      	mov	sp, r7
 8003c64:	b004      	add	sp, #16
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af02      	add	r7, sp, #8
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c74:	4b1d      	ldr	r3, [pc, #116]	; (8003cec <SPI_EndRxTxTransaction+0x84>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	491d      	ldr	r1, [pc, #116]	; (8003cf0 <SPI_EndRxTxTransaction+0x88>)
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	f7fc fa44 	bl	8000108 <__udivsi3>
 8003c80:	0003      	movs	r3, r0
 8003c82:	001a      	movs	r2, r3
 8003c84:	0013      	movs	r3, r2
 8003c86:	015b      	lsls	r3, r3, #5
 8003c88:	1a9b      	subs	r3, r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	189b      	adds	r3, r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	2382      	movs	r3, #130	; 0x82
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d112      	bne.n	8003cc4 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	0013      	movs	r3, r2
 8003ca8:	2200      	movs	r2, #0
 8003caa:	2180      	movs	r1, #128	; 0x80
 8003cac:	f7ff fee4 	bl	8003a78 <SPI_WaitFlagStateUntilTimeout>
 8003cb0:	1e03      	subs	r3, r0, #0
 8003cb2:	d016      	beq.n	8003ce2 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb8:	2220      	movs	r2, #32
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e00f      	b.n	8003ce4 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	2280      	movs	r2, #128	; 0x80
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b80      	cmp	r3, #128	; 0x80
 8003cdc:	d0f2      	beq.n	8003cc4 <SPI_EndRxTxTransaction+0x5c>
 8003cde:	e000      	b.n	8003ce2 <SPI_EndRxTxTransaction+0x7a>
        break;
 8003ce0:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	b006      	add	sp, #24
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	20000000 	.word	0x20000000
 8003cf0:	016e3600 	.word	0x016e3600

08003cf4 <__libc_init_array>:
 8003cf4:	b570      	push	{r4, r5, r6, lr}
 8003cf6:	2600      	movs	r6, #0
 8003cf8:	4d0c      	ldr	r5, [pc, #48]	; (8003d2c <__libc_init_array+0x38>)
 8003cfa:	4c0d      	ldr	r4, [pc, #52]	; (8003d30 <__libc_init_array+0x3c>)
 8003cfc:	1b64      	subs	r4, r4, r5
 8003cfe:	10a4      	asrs	r4, r4, #2
 8003d00:	42a6      	cmp	r6, r4
 8003d02:	d109      	bne.n	8003d18 <__libc_init_array+0x24>
 8003d04:	2600      	movs	r6, #0
 8003d06:	f000 f82b 	bl	8003d60 <_init>
 8003d0a:	4d0a      	ldr	r5, [pc, #40]	; (8003d34 <__libc_init_array+0x40>)
 8003d0c:	4c0a      	ldr	r4, [pc, #40]	; (8003d38 <__libc_init_array+0x44>)
 8003d0e:	1b64      	subs	r4, r4, r5
 8003d10:	10a4      	asrs	r4, r4, #2
 8003d12:	42a6      	cmp	r6, r4
 8003d14:	d105      	bne.n	8003d22 <__libc_init_array+0x2e>
 8003d16:	bd70      	pop	{r4, r5, r6, pc}
 8003d18:	00b3      	lsls	r3, r6, #2
 8003d1a:	58eb      	ldr	r3, [r5, r3]
 8003d1c:	4798      	blx	r3
 8003d1e:	3601      	adds	r6, #1
 8003d20:	e7ee      	b.n	8003d00 <__libc_init_array+0xc>
 8003d22:	00b3      	lsls	r3, r6, #2
 8003d24:	58eb      	ldr	r3, [r5, r3]
 8003d26:	4798      	blx	r3
 8003d28:	3601      	adds	r6, #1
 8003d2a:	e7f2      	b.n	8003d12 <__libc_init_array+0x1e>
 8003d2c:	08003da4 	.word	0x08003da4
 8003d30:	08003da4 	.word	0x08003da4
 8003d34:	08003da4 	.word	0x08003da4
 8003d38:	08003da8 	.word	0x08003da8

08003d3c <memcpy>:
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	b510      	push	{r4, lr}
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d100      	bne.n	8003d46 <memcpy+0xa>
 8003d44:	bd10      	pop	{r4, pc}
 8003d46:	5ccc      	ldrb	r4, [r1, r3]
 8003d48:	54c4      	strb	r4, [r0, r3]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	e7f8      	b.n	8003d40 <memcpy+0x4>

08003d4e <memset>:
 8003d4e:	0003      	movs	r3, r0
 8003d50:	1882      	adds	r2, r0, r2
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d100      	bne.n	8003d58 <memset+0xa>
 8003d56:	4770      	bx	lr
 8003d58:	7019      	strb	r1, [r3, #0]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	e7f9      	b.n	8003d52 <memset+0x4>
	...

08003d60 <_init>:
 8003d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d66:	bc08      	pop	{r3}
 8003d68:	469e      	mov	lr, r3
 8003d6a:	4770      	bx	lr

08003d6c <_fini>:
 8003d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d6e:	46c0      	nop			; (mov r8, r8)
 8003d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d72:	bc08      	pop	{r3}
 8003d74:	469e      	mov	lr, r3
 8003d76:	4770      	bx	lr
