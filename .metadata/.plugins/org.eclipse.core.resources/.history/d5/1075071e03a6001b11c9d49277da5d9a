/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under Ultimate Liberty license
  * SLA0044, the "License"; You may not use this file except in compliance with
  * the License. You may obtain a copy of the License at:
  *                             www.st.com/SLA0044
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "usb_device.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "usbd_hid.h"
#include <math.h>
#include "MY_NRF24.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define DEBUG 1 //1 for SERIAL messages
#define HID_BUFFER_SIZE 7 //USB HID Buffer Size

#define RF_ADDRESS_USB 0x11223344AA //USB Controller
#define RF_ADDRESS_LP  0x2233445566 //Laser Pointer
#define RF_ADDRESS_PI  0x5566778899 //RPI
#define RF_CHANNEL 52
#define RF_PIPE 1
#define RF_PAYLOAD_SIZE 32

#define RF_LEFT_CLICK_DOWN 0x01
#define RF_RIGHT_CLICK_DOWN 0x02
#define RF_LEFT_CLICK_UP 0x03
#define RF_RIGHT_CLICK_UP 0x04

#define RF_POSITION 0x05
#define RF_POSITION_MAX_MSB  0x0F
#define RF_POSITION_MAX_LSB  0xFF

#define RF_VALID 0x01
#define RF_NOTVALID 0x02

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
void send_RF_packet(uint8_t command, uint64_t addr)
{
  NRF24_stopListening();
  NRF24_openWritingPipe(addr);
  NRF24_write(&command,1);
  return;
}


void setupTX(uint8_t channel, uint8_t payloadSize){
  NRF24_stopListening();
  NRF24_setAutoAck(true);
  NRF24_setChannel(channel);
  NRF24_setPayloadSize(payloadSize);
  NRF24_enableDynamicPayloads();
  return;
}

void setupRXT(uint64_t address, uint8_t pipe){
  NRF24_stopListening();
  NRF24_setAutoAck(true);
  NRF24_setChannel(RF_CHANNEL);
  NRF24_setPayloadSize(RF_PAYLOAD_SIZE);
  NRF24_openReadingPipe(pipe, address);
  NRF24_enableDynamicPayloads();
  NRF24_startListening();

  return;
}


/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi3;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
USBD_HandleTypeDef hUsbDeviceFS;
uint8_t HIDBuffer[HID_BUFFER_SIZE];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI3_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void setupRX(uint64_t address, uint8_t channel, uint8_t number, uint8_t payloadSize);
bool readData(uint8_t pipe,uint8_t payloadSize);
bool validData(uint8_t * myRxData);
//HID Report Functions
void setupHIDReportClick(uint8_t click);
void setupHIDReportXPosition(uint8_t yPositionLSB, uint8_t yPositionMSB);
void setupHIDReportYPosition(uint8_t yPositionLSB, uint8_t yPositionMSB);
void setupHIDReportScrollWheel(uint8_t scrollWheelMSB, uint8_t scrollWheelLSB);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI3_Init();
  if(DEBUG){
	  MX_USART2_UART_Init();
  }
  MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */

  //Initialize NRF24
  NRF24_begin(CSN_GPIO_Port, CSN_Pin, CE_Pin, hspi3);
  if(DEBUG){
	  nrf24_DebugUART_Init(huart2);   //Initialize NRF24 UART Debugging
  }

//  setupTX(RF_CHANNEL, RF_PAYLOAD_SIZE);

  //Initialize receiving pipe
  	 setupRXT(RF_ADDRESS_LP,2);
//  setupRX(RF_ADDRESS, RF_CHANNEL, RF_PIPE, RF_PAYLOAD_SIZE);

  //Initialize HID Buffer
  HIDBuffer[0] = 0;
  HIDBuffer[1] = 0;
  HIDBuffer[2] = 0;
  HIDBuffer[3] = 0;
  HIDBuffer[4] = 0;
  HIDBuffer[5] = 0;
  HIDBuffer[6] = 0;

  char debugMessage[15]="";
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
//	  if(NRF24_available() && readData(RF_PIPE,RF_PAYLOAD_SIZE)) //Packet Available and Valid
//		{
//		  //Send HID Report
//		  USBD_HID_SendReport(&hUsbDeviceFS, HIDBuffer,HID_BUFFER_SIZE);
//		}
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) != GPIO_PIN_SET){
		  send_RF_packet(0x30, RF_ADDRESS_PI);
		  printRadioSettings();
		  		//Read Registers Manually

		  		for(uint8_t reg = 0; reg <= 0x1D;reg++){
		  			uint8_t regValue = NRF24_read_register(reg);
		  			snprintf(debugMessage, 15, "%02x: %02x \r\n", reg,regValue);
		  			HAL_UART_Transmit(&huart2,(uint8_t *)debugMessage, 15, 10);
		  		}
		  setupRXT(RF_ADDRESS_LP, 2);
		  debugMessage[15] ="";
		  snprintf(debugMessage, 15, "RX Radio Settings \r\n");
		  HAL_UART_Transmit(&huart2,(uint8_t *)debugMessage, 15, 10);
		  printRadioSettings();
		 		  		//Read Registers Manually
		 		  		for(uint8_t reg = 0; reg <= 0x1D;reg++){
		 		  			uint8_t regValue = NRF24_read_register(reg);
		 		  			snprintf(debugMessage, 15, "%02x: %02x \r\n", reg,regValue);
		 		  			HAL_UART_Transmit(&huart2,(uint8_t *)debugMessage, 15, 10);
		 		  		}
		  while(!NRF24_available());
		  uint8_t RxData[RF_PAYLOAD_SIZE];
		  NRF24_read(RxData, RF_PAYLOAD_SIZE);
		  debugMessage[15] ="";
		  snprintf(debugMessage, 15, "%02x\r\n", RxData[0]);
		  HAL_UART_Transmit(&huart2,(uint8_t *)debugMessage, 15, 10);


	  }



    /* USER CODE BEGIN 3 */
  }


  /* USER CODE END 3 */
}

void setupRX(uint64_t address, uint8_t channel, uint8_t pipe, uint8_t payloadSize){
	NRF24_stopListening();
	NRF24_setAutoAck(true);
	NRF24_setChannel(channel);
	NRF24_setPayloadSize(payloadSize);
	NRF24_openReadingPipe(pipe, address);
	NRF24_enableDynamicPayloads();
	NRF24_startListening();
	if(DEBUG){
		printRadioSettings();
		//Read Registers Manually
		char debugMessage[15]="";
		for(uint8_t reg = 0; reg <= 0x1D;reg++){
			uint8_t regValue = NRF24_read_register(reg);
			snprintf(debugMessage, 15, "%02x: %02x \r\n", reg,regValue);
			HAL_UART_Transmit(&huart2,(uint8_t *)debugMessage, 15, 10);
		}

	}
	return;
}



bool readData(uint8_t pipe,uint8_t payloadSize){
	uint8_t RxData[payloadSize];
	NRF24_read(RxData, payloadSize);
	//Check Data Validity
	return validData(RxData);
}

bool validData(uint8_t * myRxData){
	char debugMessage[32]="";
	if(myRxData[0] == RF_LEFT_CLICK_DOWN){
		setupHIDReportClick(1);
		if(DEBUG){
			snprintf(debugMessage, 32,"Left Click Down\r\n");
			HAL_UART_Transmit(&huart2,(uint8_t *)debugMessage, 32,10);
		}
		return true;
	}
	else if(myRxData[0] == RF_RIGHT_CLICK_DOWN){
		setupHIDReportClick(2);
		if(DEBUG){
			snprintf(debugMessage, 32,"Right Click Down\r\n");
			HAL_UART_Transmit(&huart2,(uint8_t *)debugMessage, 32,10);
		}
		return true;
	}
	else if(myRxData[0] == RF_LEFT_CLICK_UP){
			setupHIDReportClick(0);
			if(DEBUG){
				snprintf(debugMessage, 32,"Left Click Up\r\n");
				HAL_UART_Transmit(&huart2,(uint8_t *)debugMessage, 32,10);
			}
			return true;
	}
	else if(myRxData[0] == RF_RIGHT_CLICK_UP){
		setupHIDReportClick(0);
		if(DEBUG){
			snprintf(debugMessage, 32,"Right Click Up\r\n");
			HAL_UART_Transmit(&huart2,(uint8_t *)debugMessage, 32,10);
		}
		return true;
	} else if((myRxData[0] == RF_POSITION) &&
            ((myRxData[1] <= RF_POSITION_MAX_MSB) && (myRxData[2] <= RF_POSITION_MAX_LSB) && (myRxData[3] <= RF_POSITION_MAX_MSB) && (myRxData[4] <= RF_POSITION_MAX_LSB))){
		setupHIDReportXPosition(myRxData[1], myRxData[2]);
		setupHIDReportYPosition(myRxData[3], myRxData[4]);
		if(DEBUG){
			uint16_t xPosition = 0x0000 | (myRxData[1] << 8) | myRxData[2];
			uint16_t yPosition = 0x0000 | (myRxData[3] << 8) | myRxData[4];
			snprintf(debugMessage, 32, "X: %u,Y: %u\r\n", xPosition, yPosition);
			HAL_UART_Transmit(&huart2,(uint8_t *)debugMessage, 32,10);
		}
		return true;
	}
	else if(DEBUG){//Incorrect Message, Print to HAL UART Directly
		snprintf(debugMessage, 15, "%02x\r\n", myRxData[0]);
		HAL_UART_Transmit(&huart2,(uint8_t *)debugMessage, 32, 10);
	}

	return false;
}

void setupHIDReportClick(uint8_t click){
	HIDBuffer[0] = click; //1-> Left Click, 2-> Right Click 3-> Middle
}

void setupHIDReportXPosition(uint8_t xPositionMSB, uint8_t xPositionLSB){
	HIDBuffer[1] = xPositionLSB; //X Position
	HIDBuffer[2] = xPositionMSB; //X Position (2) (Most Significant Bits)
}

void setupHIDReportYPosition(uint8_t yPositionMSB, uint8_t yPositionLSB){
	HIDBuffer[3] = yPositionLSB; //Y Position
	HIDBuffer[4] = yPositionMSB; //Y  Position (2) (Most Significant Bits)
}

void setupHIDReportScrollWheel(uint8_t scrollWheelMSB, uint8_t scrollWheelLSB){
	HIDBuffer[5] = scrollWheelLSB; //Scroll Wheel
	HIDBuffer[6] = scrollWheelMSB; //Scroll Wheel (2) (Most Significant Bits)
}


/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
  hspi3.Init.Mode = SPI_MODE_MASTER;
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi3.Init.NSS = SPI_NSS_SOFT;
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi3.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CSN_Pin|CE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
