/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under Ultimate Liberty license
  * SLA0044, the "License"; You may not use this file except in compliance with
  * the License. You may obtain a copy of the License at:
  *                             www.st.com/SLA0044
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "usb_device.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "usbd_hid.h"
#include <math.h>
#include "MY_NRF24.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define DEBUG 1 //1 for HUART messages
#define HID_BUFFER_SIZE 7
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi3;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
USBD_HandleTypeDef hUsbDeviceFS;
uint8_t HIDBuffer[HID_BUFFER_SIZE];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI3_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void setupRX(uint64_t address, uint8_t channel, uint8_t number, uint8_t payloadSize);
bool readData(uint8_t pipe,uint8_t payloadSize);
bool validData(unsigned int * myRxData);
//HID Report Functions
void setupHIDReportClick(uint8_t click);
void setupHIDReportXPosition(uint16_t xPosition);
void setupHIDReportYPosition( uint16_t yPosition);
void setupHIDReportXYPosition(uint16_t xPosition, uint16_t yPosition);
void setupHIDReportScrollWheel(uint16_t scrollWheel);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI3_Init();
  MX_USART2_UART_Init();
  MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */

  //Initialize NRF24
  NRF24_begin(CSN_GPIO_Port, CSN_Pin, CE_Pin, hspi3);
  nrf24_DebugUART_Init(huart2);   //Initialize NRF24 UART Debugging

  //Initialize receiving pipe
  uint64_t address = 0x100;
  uint8_t channel = 10;
  uint8_t pipe = 1;
  uint8_t payloadSize = 32;
  setupRX(address, channel, pipe, payloadSize);


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(NRF24_available() & readData(pipe,payloadSize)) //Packet Available and Valid
		{
		  //Send HID Report
		  USBD_HID_SendReport(&hUsbDeviceFS, HIDBuffer,HID_BUFFER_SIZE);
		}

    /* USER CODE BEGIN 3 */
  }


  /* USER CODE END 3 */
}

void setupRX(uint64_t address, uint8_t channel, uint8_t pipe, uint8_t payloadSize){
	NRF24_stopListening();
	NRF24_setAutoAck(true);
	NRF24_setChannel(channel);
	NRF24_setPayloadSize(payloadSize);
	NRF24_openReadingPipe(pipe, address);
	NRF24_enableDynamicPayloads();
	NRF24_enableAckPayload();
	NRF24_startListening();
	if(DEBUG){
		printRadioSettings();
	}
	return;
}

bool readData(uint8_t pipe,uint8_t payloadSize){
	unsigned int * RxData;
	unsigned int * AckPayload;
	bool dataIsValid;
	NRF24_read(RxData, payloadSize);
	//Check Data Validity, if valid send regular ACK, otherwise send NACK message
	if(validData(RxData)){
		AckPayload[0] = 0x00;
		dataIsValid = true;
	}
	else{
		AckPayload[0] = 0x01;
		dataIsValid = false;
	}
	NRF24_writeAckPayload(pipe, AckPayload, payloadSize);
	HAL_UART_Transmit(&huart2, (uint8_t *)RxData, payloadSize,10);
	return dataIsValid;
}

bool validData(unsigned int * myRxData){
	//Position 0 Encodes Action
	uint8_t click;
	uint16_t xPosition;
	uint16_t yPosition;
	char debugMessage[32];
	// Click Message Format 0x02,0x0N //N = 1-> Left Click, 2-> Right Click 3-> Middle
	if(myRxData[0] == 0x02 &
	   (myRxData[1] >= 0x1 & myRxData[1] <= 0x03) &
	   sscanf(myRxData, "%*x%x", click)){
		setupHIDReportClick(click);
		if(DEBUG){
			snprintf(debugMessage, 32, "Click: %d", click);
			HAL_UART_Transmit(&huart2,(uint8_t *)debugMessage, 32,10);
		}
		return true;
	}
	//MouseXY Format 0x03,0x0X,0xXX, 0x0Y,0xYY //Todo Check if sscanf is implemented correctly.
	else if(myRxData[0] == 0x03 &
            (myRxData[1] <= 0x0F & myRxData[2] <= 0xFF & myRxData[3] <= 0x0F & myRxData[4] <= 0xFF) &
			sscanf(myRxData, "%*x%x%x", xPosition, yPosition)){
		setupHIDReportXYPosition(xPosition, yPosition);
		if(DEBUG){
			snprintf(debugMessage, 32, "X: %u,Y: %u", xPosition, yPosition);
			HAL_UART_Transmit(&huart2,(uint8_t *)debugMessage, 32,10);
		}
		return true;
	}

	return false;
}

void setupHIDReportClick(uint8_t click){
	HIDBuffer[0] = click; //1-> Left Click, 2-> Right Click 3-> Middle
}

void setupHIDReportXPosition(uint16_t xPosition){
	HIDBuffer[1] = (xPosition & 0xFF); //X Position
	HIDBuffer[2] = (xPosition >> 8) & 0x0F; //X Position (2) (Most Significant Bits)
}

void setupHIDReportYPosition( uint16_t yPosition){
	HIDBuffer[3] = (yPosition & 0xFF); //Y Position
	HIDBuffer[4] = (yPosition >> 8) & 0x0F; //Y Position (2) (Most Significant Bits)
}

void setupHIDReportXYPosition(uint16_t xPosition, uint16_t yPosition){
	HIDBuffer[1] = (xPosition & 0xFF); //X Position
	HIDBuffer[2] = (xPosition >> 8) & 0x0F; //X Position (2) (Most Significant Bits)
	HIDBuffer[3] = (yPosition & 0xFF); //Y Position
	HIDBuffer[4] = (yPosition >> 8) & 0x0F; //Y Position (2) (Most Significant Bits)
}

void setupHIDReportScrollWheel(uint16_t scrollWheel){
	HIDBuffer[5] = (scrollWheel & 0xFF); //Scroll Wheel
	HIDBuffer[6] = (scrollWheel >> 8) & 0x0F; //Scroll Wheel (2) (Most Significant Bits)
}




/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
  hspi3.Init.Mode = SPI_MODE_MASTER;
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi3.Init.NSS = SPI_NSS_SOFT;
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi3.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CSN_Pin|CE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
